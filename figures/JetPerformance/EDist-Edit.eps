%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: EDist.pdf
%%Creator: (Adobe Acrobat 11.0.0)
%%For: gabrown
%%CreationDate: 16/01/2013, 12:49
%%BoundingBox: 0 0 567 384
%%HiResBoundingBox: 0 0 567 384
%%CropBox: 0 0 567 384
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 922 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="GPL Ghostscript 870 (epswrite)"
   xmp:CreateDate="2013-01-16T12:44:37Z"
   xmp:ModifyDate="2013-01-16T12:44:37Z"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 11.0 (Macintosh)"
   xmpMM:DocumentID="uuid:93d6fd46-cec2-ec40-a438-40c18bb8d405"
   xmpMM:InstanceID="uuid:26418b6a-d3d2-6b45-bf88-3f691515faa0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">untitled</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -384 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 384 li
567 384 li
567 0 li
cp
clp
.06 383.94 mo
566.929 383.94 li
566.929 0 li
.06 0 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
90.709 322.485 mo
110.181 322.485 li
110.181 106.044 li
129.654 106.044 li
129.654 93.145 li
149.127 93.145 li
149.127 98.582 li
168.6 98.582 li
168.6 105.637 li
188.073 105.637 li
188.073 115.272 li
207.545 115.272 li
207.545 123.504 li
227.018 123.504 li
227.018 129.998 li
246.491 129.998 li
246.491 134.457 li
265.964 134.457 li
265.964 141.699 li
285.436 141.699 li
285.436 156.409 li
304.909 156.409 li
304.909 169.442 li
324.382 169.442 li
324.382 182.185 li
343.855 182.185 li
343.855 196.875 li
363.328 196.875 li
363.328 207.031 li
382.8 207.031 li
382.8 223.325 li
402.273 223.325 li
402.273 232.534 li
421.746 232.534 li
421.746 243.367 li
441.219 243.367 li
441.219 257.337 li
460.692 257.337 li
460.692 268.94 li
480.164 268.94 li
480.164 275.571 li
499.637 275.571 li
499.637 291.732 li
519.11 291.732 li
519.11 303.887 li
538.583 303.887 li
538.583 322.485 li
.0639048 0 .996094 0 cmyk
ef
1.5 lw
90.709 322.485 mo
110.181 322.485 li
110.181 106.044 li
129.654 106.044 li
129.654 93.145 li
149.127 93.145 li
149.127 98.582 li
168.6 98.582 li
168.6 105.637 li
188.073 105.637 li
188.073 115.272 li
207.545 115.272 li
207.545 123.504 li
227.018 123.504 li
227.018 129.998 li
246.491 129.998 li
246.491 134.457 li
265.964 134.457 li
265.964 141.699 li
285.436 141.699 li
285.436 156.409 li
304.909 156.409 li
304.909 169.442 li
324.382 169.442 li
324.382 182.185 li
343.855 182.185 li
343.855 196.875 li
363.328 196.875 li
363.328 207.031 li
382.8 207.031 li
382.8 223.325 li
402.273 223.325 li
402.273 232.534 li
421.746 232.534 li
421.746 243.367 li
441.219 243.367 li
441.219 257.337 li
460.692 257.337 li
460.692 268.94 li
480.164 268.94 li
480.164 275.571 li
499.637 275.571 li
499.637 291.732 li
519.11 291.732 li
519.11 303.887 li
538.583 303.887 li
@
.75 lw
90.709 322.485 mo
538.584 322.485 li
1 /0 /CSD get_res sepcs
1 sep
@
453.2 344 mo
453.2 353.209 li
453.2 354.25 453.091 354.843 452.784 355.291 cv
452.458 355.793 451.843 356.098 451.173 356.098 cv
449.906 356.098 449.201 355.26 449.201 353.744 cv
449.201 352.905 li
447.5 352.905 li
447.5 354.049 li
447.5 356.158 448.911 357.499 451.173 357.499 cv
453.47 357.499 454.901 356.081 454.901 353.819 cv
454.901 343.999 li
f
465.293 352.9 mo
465.293 351.457 465.185 350.592 464.919 349.888 cv
464.316 348.337 462.897 347.399 461.158 347.399 cv
458.568 347.399 456.9 349.413 456.9 352.504 cv
456.9 355.595 458.514 357.499 461.121 357.499 cv
463.249 357.499 464.721 356.285 465.096 354.25 cv
463.595 354.25 li
463.184 355.465 462.345 356.098 461.15 356.098 cv
460.204 356.098 459.4 355.672 458.901 354.89 cv
458.544 354.357 458.419 353.824 458.401 352.899 cv
cp
458.412 351.7 mo
458.537 349.942 459.595 348.8 461.1 348.8 cv
462.57 348.8 463.698 350.032 463.698 351.591 cv
463.698 351.627 463.698 351.663 463.68 351.7 cv
f
470.652 347.7 mo
469.101 347.7 li
469.101 345.13 li
467.601 345.13 li
467.601 347.7 li
466.352 347.7 li
466.352 348.9 li
467.601 348.9 li
467.601 356.01 li
467.601 356.962 468.251 357.5 469.425 357.5 cv
469.786 357.5 470.147 357.464 470.653 357.376 cv
470.653 356.133 li
470.455 356.183 470.22 356.2 469.932 356.2 cv
469.283 356.2 469.102 356.02 469.102 355.355 cv
469.102 348.9 li
470.653 348.9 li
f
479.4 351.2 mo
486.494 351.2 li
486.494 349.7 li
479.4 349.7 li
479.4 345.501 li
486.763 345.501 li
486.763 344.001 li
477.7 344.001 li
477.7 357.101 li
487.086 357.101 li
487.086 355.601 li
479.401 355.601 li
f
497.48 344 mo
494.1 344 li
494.1 360.9 li
497.48 360.9 li
497.48 359.599 li
495.601 359.599 li
495.601 345.3 li
497.48 345.3 li
f
510.701 350.2 mo
505.258 350.2 li
505.258 351.7 li
509.201 351.7 li
509.201 352.053 li
509.201 354.344 507.496 355.999 505.135 355.999 cv
503.821 355.999 502.632 355.518 501.868 354.68 cv
501.016 353.753 500.501 352.202 500.501 350.597 cv
500.501 347.406 502.32 345.3 505.067 345.3 cv
507.047 345.3 508.474 346.318 508.831 347.996 cv
510.527 347.996 li
510.061 345.331 508.056 343.8 505.066 343.8 cv
503.473 343.8 502.184 344.214 501.163 345.057 cv
499.659 346.312 498.8 348.338 498.8 350.687 cv
498.8 354.703 501.244 357.5 504.758 357.5 cv
506.524 357.5 507.933 356.841 509.201 355.434 cv
509.622 357.2 li
510.702 357.2 li
f
521.093 352.9 mo
521.093 351.457 520.985 350.592 520.719 349.888 cv
520.116 348.337 518.697 347.399 516.958 347.399 cv
514.368 347.399 512.7 349.413 512.7 352.504 cv
512.7 355.595 514.314 357.499 516.921 357.499 cv
519.049 357.499 520.521 356.285 520.896 354.25 cv
519.395 354.25 li
518.984 355.465 518.145 356.098 516.95 356.098 cv
516.004 356.098 515.2 355.672 514.701 354.89 cv
514.344 354.357 514.219 353.824 514.201 352.899 cv
cp
514.212 351.7 mo
514.337 349.942 515.395 348.8 516.9 348.8 cv
518.37 348.8 519.498 350.032 519.498 351.591 cv
519.498 351.627 519.498 351.663 519.48 351.7 cv
f
528.925 357.1 mo
533.459 344 li
531.685 344 li
528.065 355.093 li
524.23 344 li
522.438 344 li
527.133 357.1 li
f
534.312 360.9 mo
537.701 360.9 li
537.701 344 li
534.312 344 li
534.312 345.3 li
536.2 345.3 li
536.2 359.599 li
534.312 359.599 li
f
100.445 313.373 mo
100.445 322.485 li
@
112.616 317.929 mo
112.616 322.485 li
@
124.786 317.929 mo
124.786 322.485 li
@
136.957 317.929 mo
136.957 322.485 li
@
149.127 313.373 mo
149.127 322.485 li
@
161.298 317.929 mo
161.298 322.485 li
@
173.468 317.929 mo
173.468 322.485 li
@
185.638 317.929 mo
185.638 322.485 li
@
197.809 313.373 mo
197.809 322.485 li
@
209.979 317.929 mo
209.979 322.485 li
@
222.15 317.929 mo
222.15 322.485 li
@
234.32 317.929 mo
234.32 322.485 li
@
246.491 313.373 mo
246.491 322.485 li
@
258.661 317.929 mo
258.661 322.485 li
@
270.832 317.929 mo
270.832 322.485 li
@
283.002 317.929 mo
283.002 322.485 li
@
295.173 313.373 mo
295.173 322.485 li
@
307.343 317.929 mo
307.343 322.485 li
@
319.514 317.929 mo
319.514 322.485 li
@
331.684 317.929 mo
331.684 322.485 li
@
343.855 313.373 mo
343.855 322.485 li
@
356.025 317.929 mo
356.025 322.485 li
@
368.196 317.929 mo
368.196 322.485 li
@
380.366 317.929 mo
380.366 322.485 li
@
392.537 313.373 mo
392.537 322.485 li
@
404.707 317.929 mo
404.707 322.485 li
@
416.878 317.929 mo
416.878 322.485 li
@
429.048 317.929 mo
429.048 322.485 li
@
441.219 313.373 mo
441.219 322.485 li
@
453.389 317.929 mo
453.389 322.485 li
@
465.56 317.929 mo
465.56 322.485 li
@
477.73 317.929 mo
477.73 322.485 li
@
489.901 313.373 mo
489.901 322.485 li
@
502.071 317.929 mo
502.071 322.485 li
@
514.242 317.929 mo
514.242 322.485 li
@
526.412 317.929 mo
526.412 322.485 li
@
538.583 313.373 mo
538.583 322.485 li
@
100.445 313.373 mo
100.445 322.485 li
@
94.609 337.6 mo
87.892 337.6 li
88.054 336.565 88.63 335.905 90.197 334.995 cv
91.998 334.032 li
93.781 333.069 94.7 331.766 94.7 330.214 cv
94.7 329.161 94.268 328.18 93.511 327.502 cv
92.754 326.824 91.818 326.501 90.611 326.501 cv
88.99 326.501 87.783 327.075 87.081 328.148 cv
86.631 328.828 86.433 329.615 86.397 330.904 cv
87.986 330.904 li
88.04 330.051 88.149 329.536 88.365 329.127 cv
88.781 328.363 89.611 327.901 90.569 327.901 cv
92.014 327.901 93.099 328.921 93.099 330.28 cv
93.099 331.281 92.503 332.139 91.365 332.783 cv
89.703 333.713 li
87.03 335.215 86.254 336.412 86.109 339.201 cv
94.609 339.201 li
f
100.449 326.5 mo
99.269 326.5 98.195 327.021 97.533 327.901 cv
96.71 329.012 96.299 330.711 96.299 333.054 cv
96.299 337.329 97.73 339.6 100.449 339.6 cv
103.132 339.6 104.6 337.329 104.6 333.161 cv
104.6 330.693 104.205 329.047 103.364 327.9 cv
102.702 327.002 101.647 326.499 100.449 326.499 cv
cp
100.45 327.901 mo
102.155 327.901 103 329.621 103 333.021 cv
103 336.618 102.174 338.3 100.414 338.3 cv
98.744 338.3 97.9 336.546 97.9 333.075 cv
97.9 329.604 98.744 327.901 100.45 327.901 cv
f
110.449 326.5 mo
109.269 326.5 108.195 327.021 107.533 327.901 cv
106.71 329.012 106.299 330.711 106.299 333.054 cv
106.299 337.329 107.73 339.6 110.449 339.6 cv
113.132 339.6 114.6 337.329 114.6 333.161 cv
114.6 330.693 114.205 329.047 113.364 327.9 cv
112.702 327.002 111.647 326.499 110.449 326.499 cv
cp
110.45 327.901 mo
112.155 327.901 113 329.621 113 333.021 cv
113 336.618 112.174 338.3 110.414 338.3 cv
108.744 338.3 107.9 336.546 107.9 333.075 cv
107.9 329.604 108.744 327.901 110.45 327.901 cv
f
140.3 336.1 mo
140.3 339.2 li
141.8 339.2 li
141.8 336.1 li
143.718 336.1 li
143.718 334.699 li
141.8 334.699 li
141.8 326.499 li
140.641 326.499 li
134.902 334.443 li
134.902 336.1 li
cp
140.3 334.7 mo
136.282 334.7 li
140.3 329.183 li
f
149.349 326.5 mo
148.169 326.5 147.095 327.021 146.433 327.901 cv
145.61 329.012 145.199 330.711 145.199 333.054 cv
145.199 337.329 146.63 339.6 149.349 339.6 cv
152.032 339.6 153.5 337.329 153.5 333.161 cv
153.5 330.693 153.105 329.047 152.264 327.9 cv
151.602 327.002 150.547 326.499 149.349 326.499 cv
cp
149.35 327.901 mo
151.055 327.901 151.9 329.621 151.9 333.021 cv
151.9 336.618 151.074 338.3 149.314 338.3 cv
147.644 338.3 146.8 336.546 146.8 333.075 cv
146.8 329.604 147.644 327.901 149.35 327.901 cv
f
159.249 326.5 mo
158.069 326.5 156.995 327.021 156.333 327.901 cv
155.51 329.012 155.099 330.711 155.099 333.054 cv
155.099 337.329 156.53 339.6 159.249 339.6 cv
161.932 339.6 163.4 337.329 163.4 333.161 cv
163.4 330.693 163.005 329.047 162.164 327.9 cv
161.502 327.002 160.447 326.499 159.249 326.499 cv
cp
159.25 327.901 mo
160.955 327.901 161.8 329.621 161.8 333.021 cv
161.8 336.618 160.974 338.3 159.214 338.3 cv
157.544 338.3 156.7 336.546 156.7 333.075 cv
156.7 329.604 157.544 327.901 159.25 327.901 cv
f
191.424 329.8 mo
191.12 327.732 189.763 326.5 187.835 326.5 cv
186.442 326.5 185.192 327.182 184.443 328.309 cv
183.657 329.544 183.3 331.101 183.3 333.409 cv
183.3 335.538 183.622 336.898 184.372 338.025 cv
185.051 339.045 186.16 339.6 187.553 339.6 cv
189.966 339.6 191.699 337.811 191.699 335.325 cv
191.699 332.964 190.088 331.299 187.815 331.299 cv
186.563 331.299 185.579 331.778 184.899 332.699 cv
184.917 329.613 185.918 327.9 187.723 327.9 cv
188.831 327.9 189.6 328.592 189.85 329.799 cv
cp
187.617 332.7 mo
189.146 332.7 190.099 333.754 190.099 335.45 cv
190.099 337.039 189.02 338.199 187.563 338.199 cv
186.088 338.199 184.973 336.985 184.973 335.36 cv
184.973 333.789 186.052 332.699 187.617 332.699 cv
f
197.349 326.5 mo
196.169 326.5 195.095 327.021 194.433 327.901 cv
193.61 329.012 193.199 330.711 193.199 333.054 cv
193.199 337.329 194.63 339.6 197.349 339.6 cv
200.032 339.6 201.5 337.329 201.5 333.161 cv
201.5 330.693 201.105 329.047 200.264 327.9 cv
199.602 327.002 198.547 326.499 197.349 326.499 cv
cp
197.35 327.901 mo
199.055 327.901 199.9 329.621 199.9 333.021 cv
199.9 336.618 199.074 338.3 197.314 338.3 cv
195.644 338.3 194.8 336.546 194.8 333.075 cv
194.8 329.604 195.644 327.901 197.35 327.901 cv
f
207.349 326.5 mo
206.169 326.5 205.095 327.021 204.433 327.901 cv
203.61 329.012 203.199 330.711 203.199 333.054 cv
203.199 337.329 204.63 339.6 207.349 339.6 cv
210.032 339.6 211.5 337.329 211.5 333.161 cv
211.5 330.693 211.105 329.047 210.264 327.9 cv
209.602 327.002 208.547 326.499 207.349 326.499 cv
cp
207.35 327.901 mo
209.055 327.901 209.9 329.621 209.9 333.021 cv
209.9 336.618 209.074 338.3 207.314 338.3 cv
205.644 338.3 204.8 336.546 204.8 333.075 cv
204.8 329.604 205.644 327.901 207.35 327.901 cv
f
238.307 332.514 mo
239.582 331.726 240.001 331.082 240.001 329.884 cv
240.001 327.898 238.447 326.5 236.2 326.5 cv
233.97 326.5 232.401 327.897 232.401 329.884 cv
232.401 331.065 232.834 331.709 234.132 332.514 cv
232.705 333.212 232.001 334.268 232.001 335.663 cv
232.001 337.989 233.751 339.6 236.25 339.6 cv
238.75 339.6 240.5 337.989 240.5 335.681 cv
240.5 334.267 239.781 333.211 238.307 332.514 cv
cp
236.2 327.901 mo
237.541 327.901 238.4 328.69 238.4 329.927 cv
238.4 331.111 237.523 331.9 236.2 331.9 cv
234.877 331.9 234.001 331.111 234.001 329.91 cv
234.001 328.69 234.877 327.901 236.2 327.901 cv
cp
236.249 333.2 mo
237.824 333.2 238.899 334.204 238.899 335.691 cv
238.899 337.196 237.824 338.199 236.213 338.199 cv
234.674 338.199 233.6 337.178 233.6 335.691 cv
233.6 334.204 234.674 333.2 236.249 333.2 cv
f
246.249 326.5 mo
245.069 326.5 243.995 327.021 243.333 327.901 cv
242.51 329.012 242.099 330.711 242.099 333.054 cv
242.099 337.329 243.53 339.6 246.249 339.6 cv
248.932 339.6 250.4 337.329 250.4 333.161 cv
250.4 330.693 250.005 329.047 249.164 327.9 cv
248.502 327.002 247.447 326.499 246.249 326.499 cv
cp
246.25 327.901 mo
247.955 327.901 248.8 329.621 248.8 333.021 cv
248.8 336.618 247.974 338.3 246.214 338.3 cv
244.544 338.3 243.7 336.546 243.7 333.075 cv
243.7 329.604 244.544 327.901 246.25 327.901 cv
f
256.249 326.5 mo
255.069 326.5 253.995 327.021 253.333 327.901 cv
252.51 329.012 252.099 330.711 252.099 333.054 cv
252.099 337.329 253.53 339.6 256.249 339.6 cv
258.932 339.6 260.4 337.329 260.4 333.161 cv
260.4 330.693 260.005 329.047 259.164 327.9 cv
258.502 327.002 257.447 326.499 256.249 326.499 cv
cp
256.25 327.901 mo
257.955 327.901 258.8 329.621 258.8 333.021 cv
258.8 336.618 257.974 338.3 256.214 338.3 cv
254.544 338.3 253.7 336.546 253.7 333.075 cv
253.7 329.604 254.544 327.901 256.25 327.901 cv
f
280 330.155 mo
280 339.2 li
281.5 339.2 li
281.5 326.5 li
280.464 326.5 li
279.911 328.453 279.554 328.722 277.127 329.026 cv
277.127 330.155 li
f
290.249 326.5 mo
289.069 326.5 287.995 327.021 287.333 327.901 cv
286.51 329.012 286.099 330.711 286.099 333.054 cv
286.099 337.329 287.53 339.6 290.249 339.6 cv
292.932 339.6 294.4 337.329 294.4 333.161 cv
294.4 330.693 294.005 329.047 293.164 327.9 cv
292.502 327.002 291.447 326.499 290.249 326.499 cv
cp
290.25 327.901 mo
291.955 327.901 292.8 329.621 292.8 333.021 cv
292.8 336.618 291.974 338.3 290.214 338.3 cv
288.544 338.3 287.7 336.546 287.7 333.075 cv
287.7 329.604 288.544 327.901 290.25 327.901 cv
f
300.149 326.5 mo
298.969 326.5 297.895 327.021 297.233 327.901 cv
296.41 329.012 295.999 330.711 295.999 333.054 cv
295.999 337.329 297.43 339.6 300.149 339.6 cv
302.832 339.6 304.3 337.329 304.3 333.161 cv
304.3 330.693 303.905 329.047 303.064 327.9 cv
302.402 327.002 301.347 326.499 300.149 326.499 cv
cp
300.15 327.901 mo
301.855 327.901 302.7 329.621 302.7 333.021 cv
302.7 336.618 301.874 338.3 300.114 338.3 cv
298.444 338.3 297.6 336.546 297.6 333.075 cv
297.6 329.604 298.444 327.901 300.15 327.901 cv
f
310.149 326.5 mo
308.969 326.5 307.895 327.021 307.233 327.901 cv
306.41 329.012 305.999 330.711 305.999 333.054 cv
305.999 337.329 307.43 339.6 310.149 339.6 cv
312.832 339.6 314.3 337.329 314.3 333.161 cv
314.3 330.693 313.905 329.047 313.064 327.9 cv
312.402 327.002 311.347 326.499 310.149 326.499 cv
cp
310.15 327.901 mo
311.855 327.901 312.7 329.621 312.7 333.021 cv
312.7 336.618 311.874 338.3 310.114 338.3 cv
308.444 338.3 307.6 336.546 307.6 333.075 cv
307.6 329.604 308.444 327.901 310.15 327.901 cv
f
328.9 330.155 mo
328.9 339.2 li
330.4 339.2 li
330.4 326.5 li
329.364 326.5 li
328.811 328.453 328.454 328.722 326.027 329.026 cv
326.027 330.155 li
f
343.309 337.6 mo
336.592 337.6 li
336.754 336.565 337.33 335.905 338.897 334.995 cv
340.698 334.032 li
342.481 333.069 343.4 331.766 343.4 330.214 cv
343.4 329.161 342.968 328.18 342.211 327.502 cv
341.454 326.824 340.518 326.501 339.311 326.501 cv
337.69 326.501 336.483 327.075 335.781 328.148 cv
335.331 328.828 335.133 329.615 335.097 330.904 cv
336.686 330.904 li
336.74 330.051 336.849 329.536 337.065 329.127 cv
337.481 328.363 338.311 327.901 339.269 327.901 cv
340.714 327.901 341.799 328.921 341.799 330.28 cv
341.799 331.281 341.203 332.139 340.065 332.783 cv
338.403 333.713 li
335.73 335.215 334.954 336.412 334.809 339.201 cv
343.309 339.201 li
f
349.049 326.5 mo
347.869 326.5 346.795 327.021 346.133 327.901 cv
345.31 329.012 344.899 330.711 344.899 333.054 cv
344.899 337.329 346.33 339.6 349.049 339.6 cv
351.732 339.6 353.2 337.329 353.2 333.161 cv
353.2 330.693 352.805 329.047 351.964 327.9 cv
351.302 327.002 350.247 326.499 349.049 326.499 cv
cp
349.05 327.901 mo
350.755 327.901 351.6 329.621 351.6 333.021 cv
351.6 336.618 350.774 338.3 349.014 338.3 cv
347.344 338.3 346.5 336.546 346.5 333.075 cv
346.5 329.604 347.344 327.901 349.05 327.901 cv
f
359.049 326.5 mo
357.869 326.5 356.795 327.021 356.133 327.901 cv
355.31 329.012 354.899 330.711 354.899 333.054 cv
354.899 337.329 356.33 339.6 359.049 339.6 cv
361.732 339.6 363.2 337.329 363.2 333.161 cv
363.2 330.693 362.805 329.047 361.964 327.9 cv
361.302 327.002 360.247 326.499 359.049 326.499 cv
cp
359.05 327.901 mo
360.755 327.901 361.6 329.621 361.6 333.021 cv
361.6 336.618 360.774 338.3 359.014 338.3 cv
357.344 338.3 356.5 336.546 356.5 333.075 cv
356.5 329.604 357.344 327.901 359.05 327.901 cv
f
377 330.155 mo
377 339.2 li
378.5 339.2 li
378.5 326.5 li
377.464 326.5 li
376.911 328.453 376.554 328.722 374.127 329.026 cv
374.127 330.155 li
f
388.1 336.1 mo
388.1 339.2 li
389.6 339.2 li
389.6 336.1 li
391.518 336.1 li
391.518 334.699 li
389.6 334.699 li
389.6 326.499 li
388.441 326.499 li
382.702 334.443 li
382.702 336.1 li
cp
388.1 334.7 mo
384.082 334.7 li
388.1 329.183 li
f
397.149 326.5 mo
395.969 326.5 394.895 327.021 394.233 327.901 cv
393.41 329.012 392.999 330.711 392.999 333.054 cv
392.999 337.329 394.43 339.6 397.149 339.6 cv
399.832 339.6 401.3 337.329 401.3 333.161 cv
401.3 330.693 400.905 329.047 400.064 327.9 cv
399.402 327.002 398.347 326.499 397.149 326.499 cv
cp
397.15 327.901 mo
398.855 327.901 399.7 329.621 399.7 333.021 cv
399.7 336.618 398.874 338.3 397.114 338.3 cv
395.444 338.3 394.6 336.546 394.6 333.075 cv
394.6 329.604 395.444 327.901 397.15 327.901 cv
f
407.049 326.5 mo
405.869 326.5 404.795 327.021 404.133 327.901 cv
403.31 329.012 402.899 330.711 402.899 333.054 cv
402.899 337.329 404.33 339.6 407.049 339.6 cv
409.732 339.6 411.2 337.329 411.2 333.161 cv
411.2 330.693 410.805 329.047 409.964 327.9 cv
409.302 327.002 408.247 326.499 407.049 326.499 cv
cp
407.05 327.901 mo
408.755 327.901 409.6 329.621 409.6 333.021 cv
409.6 336.618 408.774 338.3 407.014 338.3 cv
405.344 338.3 404.5 336.546 404.5 333.075 cv
404.5 329.604 405.344 327.901 407.05 327.901 cv
f
425.8 330.155 mo
425.8 339.2 li
427.3 339.2 li
427.3 326.5 li
426.264 326.5 li
425.711 328.453 425.354 328.722 422.927 329.026 cv
422.927 330.155 li
f
440.024 329.8 mo
439.72 327.732 438.363 326.5 436.435 326.5 cv
435.042 326.5 433.792 327.182 433.043 328.309 cv
432.257 329.544 431.9 331.101 431.9 333.409 cv
431.9 335.538 432.222 336.898 432.972 338.025 cv
433.651 339.045 434.76 339.6 436.153 339.6 cv
438.566 339.6 440.299 337.811 440.299 335.325 cv
440.299 332.964 438.688 331.299 436.415 331.299 cv
435.163 331.299 434.179 331.778 433.499 332.699 cv
433.517 329.613 434.518 327.9 436.323 327.9 cv
437.431 327.9 438.2 328.592 438.45 329.799 cv
cp
436.217 332.7 mo
437.746 332.7 438.699 333.754 438.699 335.45 cv
438.699 337.039 437.62 338.199 436.163 338.199 cv
434.688 338.199 433.573 336.985 433.573 335.36 cv
433.573 333.789 434.652 332.699 436.217 332.699 cv
f
446.049 326.5 mo
444.869 326.5 443.795 327.021 443.133 327.901 cv
442.31 329.012 441.899 330.711 441.899 333.054 cv
441.899 337.329 443.33 339.6 446.049 339.6 cv
448.732 339.6 450.2 337.329 450.2 333.161 cv
450.2 330.693 449.805 329.047 448.964 327.9 cv
448.302 327.002 447.247 326.499 446.049 326.499 cv
cp
446.05 327.901 mo
447.755 327.901 448.6 329.621 448.6 333.021 cv
448.6 336.618 447.774 338.3 446.014 338.3 cv
444.344 338.3 443.5 336.546 443.5 333.075 cv
443.5 329.604 444.344 327.901 446.05 327.901 cv
f
455.949 326.5 mo
454.769 326.5 453.695 327.021 453.033 327.901 cv
452.21 329.012 451.799 330.711 451.799 333.054 cv
451.799 337.329 453.23 339.6 455.949 339.6 cv
458.632 339.6 460.1 337.329 460.1 333.161 cv
460.1 330.693 459.705 329.047 458.864 327.9 cv
458.202 327.002 457.147 326.499 455.949 326.499 cv
cp
455.95 327.901 mo
457.655 327.901 458.5 329.621 458.5 333.021 cv
458.5 336.618 457.674 338.3 455.914 338.3 cv
454.244 338.3 453.4 336.546 453.4 333.075 cv
453.4 329.604 454.244 327.901 455.95 327.901 cv
f
474.7 330.155 mo
474.7 339.2 li
476.2 339.2 li
476.2 326.5 li
475.164 326.5 li
474.611 328.453 474.254 328.722 471.827 329.026 cv
471.827 330.155 li
f
487.007 332.514 mo
488.282 331.726 488.701 331.082 488.701 329.884 cv
488.701 327.898 487.147 326.5 484.9 326.5 cv
482.67 326.5 481.101 327.897 481.101 329.884 cv
481.101 331.065 481.534 331.709 482.832 332.514 cv
481.405 333.212 480.701 334.268 480.701 335.663 cv
480.701 337.989 482.451 339.6 484.95 339.6 cv
487.45 339.6 489.2 337.989 489.2 335.681 cv
489.2 334.267 488.481 333.211 487.007 332.514 cv
cp
484.9 327.901 mo
486.241 327.901 487.1 328.69 487.1 329.927 cv
487.1 331.111 486.223 331.9 484.9 331.9 cv
483.577 331.9 482.701 331.111 482.701 329.91 cv
482.701 328.69 483.577 327.901 484.9 327.901 cv
cp
484.949 333.2 mo
486.524 333.2 487.599 334.204 487.599 335.691 cv
487.599 337.196 486.524 338.199 484.913 338.199 cv
483.374 338.199 482.3 337.178 482.3 335.691 cv
482.3 334.204 483.374 333.2 484.949 333.2 cv
f
494.849 326.5 mo
493.669 326.5 492.595 327.021 491.933 327.901 cv
491.11 329.012 490.699 330.711 490.699 333.054 cv
490.699 337.329 492.13 339.6 494.849 339.6 cv
497.532 339.6 499 337.329 499 333.161 cv
499 330.693 498.605 329.047 497.764 327.9 cv
497.102 327.002 496.047 326.499 494.849 326.499 cv
cp
494.85 327.901 mo
496.555 327.901 497.4 329.621 497.4 333.021 cv
497.4 336.618 496.574 338.3 494.814 338.3 cv
493.144 338.3 492.3 336.546 492.3 333.075 cv
492.3 329.604 493.144 327.901 494.85 327.901 cv
f
504.849 326.5 mo
503.669 326.5 502.595 327.021 501.933 327.901 cv
501.11 329.012 500.699 330.711 500.699 333.054 cv
500.699 337.329 502.13 339.6 504.849 339.6 cv
507.532 339.6 509 337.329 509 333.161 cv
509 330.693 508.605 329.047 507.764 327.9 cv
507.102 327.002 506.047 326.499 504.849 326.499 cv
cp
504.85 327.901 mo
506.555 327.901 507.4 329.621 507.4 333.021 cv
507.4 336.618 506.574 338.3 504.814 338.3 cv
503.144 338.3 502.3 336.546 502.3 333.075 cv
502.3 329.604 503.144 327.901 504.85 327.901 cv
f
528.009 337.6 mo
521.292 337.6 li
521.454 336.565 522.03 335.905 523.597 334.995 cv
525.398 334.032 li
527.181 333.069 528.1 331.766 528.1 330.214 cv
528.1 329.161 527.668 328.18 526.911 327.502 cv
526.154 326.824 525.218 326.501 524.011 326.501 cv
522.39 326.501 521.183 327.075 520.481 328.148 cv
520.031 328.828 519.833 329.615 519.797 330.904 cv
521.386 330.904 li
521.44 330.051 521.549 329.536 521.765 329.127 cv
522.181 328.363 523.011 327.901 523.969 327.901 cv
525.414 327.901 526.499 328.921 526.499 330.28 cv
526.499 331.281 525.903 332.139 524.765 332.783 cv
523.103 333.713 li
520.43 335.215 519.654 336.412 519.509 339.201 cv
528.009 339.201 li
f
533.749 326.5 mo
532.569 326.5 531.495 327.021 530.833 327.901 cv
530.01 329.012 529.599 330.711 529.599 333.054 cv
529.599 337.329 531.03 339.6 533.749 339.6 cv
536.432 339.6 537.9 337.329 537.9 333.161 cv
537.9 330.693 537.505 329.047 536.664 327.9 cv
536.002 327.002 534.947 326.499 533.749 326.499 cv
cp
533.75 327.901 mo
535.455 327.901 536.3 329.621 536.3 333.021 cv
536.3 336.618 535.474 338.3 533.714 338.3 cv
532.044 338.3 531.2 336.546 531.2 333.075 cv
531.2 329.604 532.044 327.901 533.75 327.901 cv
f
543.749 326.5 mo
542.569 326.5 541.495 327.021 540.833 327.901 cv
540.01 329.012 539.599 330.711 539.599 333.054 cv
539.599 337.329 541.03 339.6 543.749 339.6 cv
546.432 339.6 547.9 337.329 547.9 333.161 cv
547.9 330.693 547.505 329.047 546.664 327.9 cv
546.002 327.002 544.947 326.499 543.749 326.499 cv
cp
543.75 327.901 mo
545.455 327.901 546.3 329.621 546.3 333.021 cv
546.3 336.618 545.474 338.3 543.714 338.3 cv
542.044 338.3 541.2 336.546 541.2 333.075 cv
541.2 329.604 542.044 327.901 543.75 327.901 cv
f
553.749 326.5 mo
552.569 326.5 551.495 327.021 550.833 327.901 cv
550.01 329.012 549.599 330.711 549.599 333.054 cv
549.599 337.329 551.03 339.6 553.749 339.6 cv
556.432 339.6 557.9 337.329 557.9 333.161 cv
557.9 330.693 557.505 329.047 556.664 327.9 cv
556.002 327.002 554.947 326.499 553.749 326.499 cv
cp
553.75 327.901 mo
555.455 327.901 556.3 329.621 556.3 333.021 cv
556.3 336.618 555.474 338.3 553.714 338.3 cv
552.044 338.3 551.2 336.546 551.2 333.075 cv
551.2 329.604 552.044 327.901 553.75 327.901 cv
f
90.709 18.754 mo
538.584 18.754 li
@
100.445 27.866 mo
100.445 18.754 li
@
112.616 23.31 mo
112.616 18.754 li
@
124.786 23.31 mo
124.786 18.754 li
@
136.957 23.31 mo
136.957 18.754 li
@
149.127 27.866 mo
149.127 18.754 li
@
161.298 23.31 mo
161.298 18.754 li
@
173.468 23.31 mo
173.468 18.754 li
@
185.638 23.31 mo
185.638 18.754 li
@
197.809 27.866 mo
197.809 18.754 li
@
209.979 23.31 mo
209.979 18.754 li
@
222.15 23.31 mo
222.15 18.754 li
@
234.32 23.31 mo
234.32 18.754 li
@
246.491 27.866 mo
246.491 18.754 li
@
258.661 23.31 mo
258.661 18.754 li
@
270.832 23.31 mo
270.832 18.754 li
@
283.002 23.31 mo
283.002 18.754 li
@
295.173 27.866 mo
295.173 18.754 li
@
307.343 23.31 mo
307.343 18.754 li
@
319.514 23.31 mo
319.514 18.754 li
@
331.684 23.31 mo
331.684 18.754 li
@
343.855 27.866 mo
343.855 18.754 li
@
356.025 23.31 mo
356.025 18.754 li
@
368.196 23.31 mo
368.196 18.754 li
@
380.366 23.31 mo
380.366 18.754 li
@
392.537 27.866 mo
392.537 18.754 li
@
404.707 23.31 mo
404.707 18.754 li
@
416.878 23.31 mo
416.878 18.754 li
@
429.048 23.31 mo
429.048 18.754 li
@
441.219 27.866 mo
441.219 18.754 li
@
453.389 23.31 mo
453.389 18.754 li
@
465.56 23.31 mo
465.56 18.754 li
@
477.73 23.31 mo
477.73 18.754 li
@
489.901 27.866 mo
489.901 18.754 li
@
502.071 23.31 mo
502.071 18.754 li
@
514.242 23.31 mo
514.242 18.754 li
@
526.412 23.31 mo
526.412 18.754 li
@
538.583 27.866 mo
538.583 18.754 li
@
100.445 27.866 mo
100.445 18.754 li
@
90.709 322.485 mo
90.709 18.754 li
@
35.1 98.1 mo
35.1 99.6 li
39.992 99.6 li
39.015 100.227 38.499 101.228 38.499 102.479 cv
38.499 104.909 40.46 106.5 43.46 106.5 cv
46.64 106.5 48.599 104.942 48.599 102.416 cv
48.599 101.126 48.119 100.231 46.963 99.425 cv
48.199 99.425 li
48.199 98.1 li
cp
39.9 102.255 mo
39.9 100.63 41.339 99.6 43.586 99.6 cv
45.761 99.6 47.199 100.648 47.199 102.237 cv
47.199 103.898 45.743 104.999 43.55 104.999 cv
41.357 104.999 39.9 103.898 39.9 102.254 cv
f
42.3 93.699 mo
42.3 86.606 li
40.8 86.606 li
40.8 93.699 li
36.601 93.699 li
36.601 86.338 li
35.101 86.338 li
35.101 95.4 li
48.201 95.4 li
48.201 86.015 li
46.701 86.015 li
46.701 93.699 li
f
17.6 84.7 mo
29.7 84.7 li
29.7 86.8 li
17.6 86.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[12.1 0 0 -2.10001 17.6 299.3 ]ct
<<
/T 1
/W 121 
/H 21 
/M[121 0 0 -21 0 21 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
oD\gkJ+N[@!.XV?!<@W@rrE+LoD\gkJ+N[@!.XV?!<@WArrN*!!.XY@!r`1Lo`"si!;$3pn,WL`!'gDT
!!N>s!'gDT!!N>s!'gDU!!NE'p]*PVpAb?ts7cRYr:^0p"98,r5Q(6U"U"f"!'gDU!!NW-p]*PVpAb@-
s7cRYr:^0p5QCKY5Q(6Us8RT~>

%%EndBinary
grestore
np
f
7.39999 99.7 mo
7.39999 101.2 li
12.292 101.2 li
11.315 101.827 10.799 102.828 10.799 104.079 cv
10.799 106.509 12.76 108.1 15.76 108.1 cv
18.94 108.1 20.899 106.542 20.899 104.016 cv
20.899 102.726 20.419 101.831 19.263 101.025 cv
20.499 101.025 li
20.499 99.7 li
cp
12.2 103.855 mo
12.2 102.23 13.639 101.2 15.886 101.2 cv
18.061 101.2 19.499 102.248 19.499 103.837 cv
19.499 105.498 18.043 106.599 15.85 106.599 cv
13.657 106.599 12.2 105.498 12.2 103.854 cv
1 /0 /CSD get_res sepcs
1 sep
f
7.39999 87.1 mo
7.39999 88.6 li
18.116 88.6 li
7.39999 95.398 li
7.39999 97.2 li
20.5 97.2 li
20.5 95.7 li
9.90899 95.7 li
20.5 88.975 li
20.5 87.1 li
f
1.5 lw
32.695 109.404 mo
32.695 84.153 li
@
44.5 115.6 mo
56.6 115.6 li
56.6 117.7 li
44.5 117.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[12.1 0 0 -2.10001 44.5 268.4 ]ct
<<
/T 1
/W 121 
/H 21 
/M[121 0 0 -21 0 21 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
oD\gkJ+N[@!.XV?!<@W@rrE+LoD\gkJ+N[@!.XV?!<@WArrN*!!.XY@!r`1Lo`"si!;$3pn,WL`!'gDT
!!N>s!'gDT!!N>s!'gDU!!NE'p]*PVpAb?ts7cRYr:^0p"98,r5Q(6U"U"f"!'gDU!!NW-p]*PVpAb@-
s7cRYr:^0p5QCKY5Q(6Us8RT~>

%%EndBinary
grestore
np
f
35.1 118.3 mo
35.1 119.8 li
45.816 119.8 li
35.1 126.598 li
35.1 128.4 li
48.2 128.4 li
48.2 126.9 li
37.609 126.9 li
48.2 120.175 li
48.2 118.3 li
1 /0 /CSD get_res sepcs
1 sep
f
21.255 120.2 mo
30.3 120.2 li
30.3 118.7 li
17.6 118.7 li
17.6 119.736 li
19.553 120.289 19.821 120.646 20.126 123.073 cv
21.255 123.073 li
f
32.695 129.768 mo
32.695 114.291 li
@
.75 lw
97.427 318.425 mo
90.709 318.425 li
@
97.427 314.289 mo
90.709 314.289 li
@
97.427 310.707 mo
90.709 310.707 li
@
97.427 307.546 mo
90.709 307.546 li
@
104.145 304.72 mo
90.709 304.72 li
@
80 301.9 mo
81.9 301.9 li
81.9 302.4 li
80 302.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 82.1 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 299 mo
86 299 li
86 304.4 li
82.5 304.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.4 82.5 85 ]ct
<<
/T 1
/W 35 
/H 54 
/M[35 0 0 -54 0 54 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfK<Hs5<q8!.Wr,J,g\Lrr<$(i;N]V"5s(W!!2$Q!W2rUp]pg!i:%9WJ7.jgs1i%#5QBXai'782+Q.bL
n0#Mrs7cT0s8Vio_#OH0!5SX7p],jEs7cSEs8VioJH,ZE!.]S!p],hos6p#=J,f!\J3X(l+FkR6i#mO\
/-!CmJ-Z+)@"8:U!8rA-!!2#/!!!,ZJUd_*i.8ZD&)`$.!'fCmrW3&W_>aH8i5#?l!T:cmrrM&nrr3#W
_#F?qi8B+bs5;gbs6q/hJ,eFLn3?s2+RgKQi#qe:s1i%;&-%/fqucs!i;<TQ!9!hV!!2$X!!!,Zs*t(S
&)dKG!"\#fp]*P:s8N*!i.(~>

%%EndBinary
grestore
np
f
68.8 302.4 mo
72.1 302.4 li
72.1 309.9 li
68.8 309.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 81.6 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 302.4 mo
79.7 302.4 li
79.7 310.1 li
74.7 310.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 81.6 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 286.122 mo
90.709 286.122 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 275.243 mo
90.709 275.243 li
@
97.427 267.524 mo
90.709 267.524 li
@
97.427 261.537 mo
90.709 261.537 li
@
97.427 256.645 mo
90.709 256.645 li
@
97.427 252.509 mo
90.709 252.509 li
@
97.427 248.926 mo
90.709 248.926 li
@
97.427 245.766 mo
90.709 245.766 li
@
104.145 242.939 mo
90.709 242.939 li
@
80 240 mo
81.9 240 li
81.9 240.5 li
80 240.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 144 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 237.1 mo
86 237.1 li
86 242.5 li
82.5 242.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.4 82.5 146.9 ]ct
<<
/T 1
/W 35 
/H 54 
/M[35 0 0 -54 0 54 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
9)nYgs5<pm!.Wr,!!",!qu?^-i:m9P#N5(O!!D0K"8DoTi",hfi4qSWJ7-0Bs1i$XJ,eG7JH,Z=+FsLl
n0!;^s6q.^s8Viorr3#o!<3!!p]1<n!VcZorrMlprr3#o!<3!!p]1<n!VcZorrMThrr3#g+TDBCi#r("
EW=r>^jlC"@),#,J7.:WrrD!8"8DlShuE`Xi8=S8"5r);!!hH?5QD>Qi,AZ\i:)*ps5<B2s8V$H5QCcA
n3?sQi:&u2s5<B2s8V$H5QCcAn3?sQi:oP:s5<Yos8V$P+92B!p`KP9i:nDos5<\O!!2$QrVuuWr;HZs
i;EQS!T<nT!!2$UrVurVJ,~>

%%EndBinary
grestore
np
f
68.8 240.5 mo
72.1 240.5 li
72.1 248 li
68.8 248 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 143.5 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 240.5 mo
79.7 240.5 li
79.7 248.2 li
74.7 248.2 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 143.5 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 224.341 mo
90.709 224.341 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 213.462 mo
90.709 213.462 li
@
97.427 205.744 mo
90.709 205.744 li
@
97.427 199.756 mo
90.709 199.756 li
@
97.427 194.865 mo
90.709 194.865 li
@
97.427 190.729 mo
90.709 190.729 li
@
97.427 187.146 mo
90.709 187.146 li
@
97.427 183.986 mo
90.709 183.986 li
@
104.145 181.159 mo
90.709 181.159 li
@
80 178.9 mo
81.9 178.9 li
81.9 179.4 li
80 179.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 205.1 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 176 mo
86.1 176 li
86.1 181.2 li
82.5 181.2 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.6 0 0 -5.2 82.5 208 ]ct
<<
/T 1
/W 36 
/H 52 
/M[36 0 0 -52 0 52 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
49,?Y&+KW!r"&;ss83Dss8W!-nGiOd&+KW!r"&;ss83Dss8W!-nGiOd&+KW!r"&;ss83Dss8W!-nDaKo
"9890n,`Re&+G/Mr"&;4s83Dsi.(Y8nDHP/&+K'Qr"&;l++F+unG!Ol&+KK-r"&;r#Q,,%rWE'/nG`Oe
&+KUMr"&;s_#+`4s1j!mnGhEo&+KVg4:gr]n/Mu.s7d!5nGiCp&+KVu":t#%rW!Jus8N'0nGiN=&+KW!
J.M/Ls1f07s8V!fnGiOH&+KW!n.5$gs7d,os8W!-nGiOd%gDJ&s8EPuJ,~>

%%EndBinary
grestore
np
f
68.8 178.6 mo
72.1 178.6 li
72.1 186.1 li
68.8 186.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 205.4 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 178.6 mo
79.7 178.6 li
79.7 186.3 li
74.7 186.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 205.4 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 162.561 mo
90.709 162.561 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 151.682 mo
90.709 151.682 li
@
97.427 143.963 mo
90.709 143.963 li
@
97.427 137.976 mo
90.709 137.976 li
@
97.427 133.084 mo
90.709 133.084 li
@
97.427 128.948 mo
90.709 128.948 li
@
97.427 125.365 mo
90.709 125.365 li
@
97.427 122.205 mo
90.709 122.205 li
@
104.145 119.378 mo
90.709 119.378 li
@
80 117 mo
81.9 117 li
81.9 117.5 li
80 117.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 267 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 114.1 mo
86 114.1 li
86 119.5 li
82.5 119.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.4 82.5 269.9 ]ct
<<
/T 1
/W 35 
/H 54 
/M[35 0 0 -54 0 54 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
<<)Fis5<p-!'fE@!!!Pfqu?^%i:m9P"5rYK!!2$9"8i/Wi",hf@),#,^gOs-s55#MJ,eFLJH,Z=+FsLl
n,S%>s7cSFs8Vio!WW2p!!3-"p]1<n!VcZorrMlprr3#o!<3!!n,WIf!Uq62rrM%#rr3#7@/g0.J7/EW
-2[c$s82iti;`]T#N5X[!$C/!qu@8cs82j%i;`]T"5s4Zp]9=PrrE,Xrr3"Li;W`W^u54l7_iEIs8V"b
_#OGm@)2gBi*aA#s57;#s8V"bi.(db@,QP7^gQ(bs1mRN+9-lLn.5O!i:$jD!T<_Q!!D0W!!!,ZrVup'
&)dHf!$C/!^]8lBs7c]ri.(~>

%%EndBinary
grestore
np
f
68.8 117.5 mo
72.1 117.5 li
72.1 125 li
68.8 125 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 266.5 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 117.5 mo
79.7 117.5 li
79.7 125.2 li
74.7 125.2 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 266.5 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 100.781 mo
90.709 100.781 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 89.902 mo
90.709 89.902 li
@
97.427 82.183 mo
90.709 82.183 li
@
97.427 76.196 mo
90.709 76.196 li
@
97.427 71.304 mo
90.709 71.304 li
@
97.427 67.168 mo
90.709 67.168 li
@
97.427 63.585 mo
90.709 63.585 li
@
97.427 60.425 mo
90.709 60.425 li
@
104.145 57.598 mo
90.709 57.598 li
@
80 55.9 mo
81.9 55.9 li
81.9 56.4 li
80 56.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 328.1 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 53 mo
86 53 li
86 58.2 li
82.5 58.2 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.2 82.5 331 ]ct
<<
/T 1
/W 35 
/H 52 
/M[35 0 0 -52 0 52 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!.b"J!.b"J!.b"J!.b"J!.b"J!.b"J!.b(K!T:cmrrM&nrr5mS^jlCai8B+bs5;g"s8V$H+92B!n.5R!
i:mQWs5<eUs8V$V!<<)Wrr>:`i;\<<s5<q8"97<Zn,WLHs82kHi;`cV+5m2!J.LT<s54.?s8N?!"5s4Z
rW1sVrrE,Xrr3"L@/g0,^gR0A!T5+"rrMU3rr3#g+TDC)p]/,0s7cT0s8Vio_#OH0!5O*ap]/*Zs7cT0
J,f!<^jlCR!8p*Ai#pr"s55$X&-'FQn-Asn@/'d#!9!YO!#+;g!!!&XrVup'i;\<-&)dKG!'^YFs82ot
i.(~>

%%EndBinary
grestore
np
f
68.8 55.6 mo
72.1 55.6 li
72.1 63.1 li
68.8 63.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 328.4 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 55.6 mo
79.7 55.6 li
79.7 63.3 li
74.7 63.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 328.4 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 39 mo
90.709 39 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 28.121 mo
90.709 28.121 li
@
97.427 20.402 mo
90.709 20.402 li
@
538.583 322.485 mo
538.583 18.754 li
@
531.865 318.425 mo
538.583 318.425 li
@
531.865 314.289 mo
538.583 314.289 li
@
531.865 310.707 mo
538.583 310.707 li
@
531.865 307.546 mo
538.583 307.546 li
@
525.146 304.72 mo
538.583 304.72 li
@
531.865 286.122 mo
538.583 286.122 li
@
531.865 275.243 mo
538.583 275.243 li
@
531.865 267.524 mo
538.583 267.524 li
@
531.865 261.537 mo
538.583 261.537 li
@
531.865 256.645 mo
538.583 256.645 li
@
531.865 252.509 mo
538.583 252.509 li
@
531.865 248.926 mo
538.583 248.926 li
@
531.865 245.766 mo
538.583 245.766 li
@
525.146 242.939 mo
538.583 242.939 li
@
531.865 224.341 mo
538.583 224.341 li
@
531.865 213.462 mo
538.583 213.462 li
@
531.865 205.744 mo
538.583 205.744 li
@
531.865 199.756 mo
538.583 199.756 li
@
531.865 194.865 mo
538.583 194.865 li
@
531.865 190.729 mo
538.583 190.729 li
@
531.865 187.146 mo
538.583 187.146 li
@
531.865 183.986 mo
538.583 183.986 li
@
525.146 181.159 mo
538.583 181.159 li
@
531.865 162.561 mo
538.583 162.561 li
@
531.865 151.682 mo
538.583 151.682 li
@
531.865 143.963 mo
538.583 143.963 li
@
531.865 137.976 mo
538.583 137.976 li
@
531.865 133.084 mo
538.583 133.084 li
@
531.865 128.948 mo
538.583 128.948 li
@
531.865 125.365 mo
538.583 125.365 li
@
531.865 122.205 mo
538.583 122.205 li
@
525.146 119.378 mo
538.583 119.378 li
@
531.865 100.781 mo
538.583 100.781 li
@
531.865 89.902 mo
538.583 89.902 li
@
531.865 82.183 mo
538.583 82.183 li
@
531.865 76.196 mo
538.583 76.196 li
@
531.865 71.304 mo
538.583 71.304 li
@
531.865 67.168 mo
538.583 67.168 li
@
531.865 63.585 mo
538.583 63.585 li
@
531.865 60.425 mo
538.583 60.425 li
@
525.146 57.598 mo
538.583 57.598 li
@
531.865 39 mo
538.583 39 li
@
531.865 28.121 mo
538.583 28.121 li
@
531.865 20.402 mo
538.583 20.402 li
@
1.5 lw
110.181 105.628 mo
116.66 105.628 li
@
123.176 105.628 mo
129.654 105.628 li
@
.75 lw
116.618 105.628 mo
116.618 101.228 123.218 101.228 123.218 105.628 cv
123.218 110.028 116.618 110.028 116.618 105.628 cv
cp
@
1.5 lw
129.654 94.193 mo
136.132 94.193 li
@
142.649 94.193 mo
149.127 94.193 li
@
.75 lw
136.091 94.193 mo
136.091 89.793 142.691 89.793 142.691 94.193 cv
142.691 98.593 136.091 98.593 136.091 94.193 cv
cp
@
1.5 lw
149.127 100.876 mo
155.605 100.876 li
@
162.122 100.876 mo
168.6 100.876 li
@
.75 lw
155.563 100.876 mo
155.563 96.476 162.163 96.476 162.163 100.876 cv
162.163 105.276 155.563 105.276 155.563 100.876 cv
cp
@
1.5 lw
168.6 108.15 mo
175.078 108.15 li
@
181.594 108.15 mo
188.073 108.15 li
@
.75 lw
175.036 108.15 mo
175.036 103.75 181.636 103.75 181.636 108.15 cv
181.636 112.55 175.036 112.55 175.036 108.15 cv
cp
@
1.5 lw
188.073 115.689 mo
194.551 115.689 li
@
201.067 115.689 mo
207.545 115.689 li
@
.75 lw
194.509 115.689 mo
194.509 111.289 201.109 111.289 201.109 115.689 cv
201.109 120.089 194.509 120.089 194.509 115.689 cv
cp
@
1.5 lw
207.545 122.678 mo
214.024 122.678 li
@
220.54 122.678 mo
227.018 122.678 li
@
.75 lw
213.982 122.678 mo
213.982 118.278 220.582 118.278 220.582 122.678 cv
220.582 127.078 213.982 127.078 213.982 122.678 cv
cp
@
1.5 lw
227.018 127.736 mo
233.496 127.736 li
@
240.013 127.736 mo
246.491 127.736 li
@
.75 lw
233.455 127.736 mo
233.455 123.336 240.055 123.336 240.055 127.736 cv
240.055 132.136 233.455 132.136 233.455 127.736 cv
cp
@
1.5 lw
246.491 131.645 mo
252.969 131.645 li
@
259.486 131.645 mo
265.964 131.645 li
@
.75 lw
252.927 131.645 mo
252.927 127.245 259.527 127.245 259.527 131.645 cv
259.527 136.045 252.927 136.045 252.927 131.645 cv
cp
@
1.5 lw
265.964 137.088 mo
272.442 137.088 li
@
278.958 137.088 mo
285.436 137.088 li
@
.75 lw
272.4 137.088 mo
272.4 132.688 279 132.688 279 137.088 cv
279 141.488 272.4 141.488 272.4 137.088 cv
cp
@
1.5 lw
285.436 151.267 mo
291.915 151.267 li
@
298.431 151.267 mo
304.909 151.267 li
@
.75 lw
291.873 151.267 mo
291.873 146.867 298.473 146.867 298.473 151.267 cv
298.473 155.667 291.873 155.667 291.873 151.267 cv
cp
@
1.5 lw
304.909 163.277 mo
311.387 163.277 li
@
317.904 163.277 mo
324.382 163.277 li
@
.75 lw
311.346 163.277 mo
311.346 158.877 317.946 158.877 317.946 163.277 cv
317.946 167.677 311.346 167.677 311.346 163.277 cv
cp
@
1.5 lw
324.382 174.994 mo
330.86 174.994 li
@
337.377 174.994 mo
343.855 174.994 li
@
.75 lw
330.818 174.994 mo
330.818 170.594 337.418 170.594 337.418 174.994 cv
337.418 179.394 330.818 179.394 330.818 174.994 cv
cp
@
1.5 lw
343.855 187.735 mo
350.333 187.735 li
@
356.849 187.735 mo
363.328 187.735 li
@
.75 lw
350.291 187.735 mo
350.291 183.335 356.891 183.335 356.891 187.735 cv
356.891 192.135 350.291 192.135 350.291 187.735 cv
cp
@
1.5 lw
363.328 200.012 mo
369.806 200.012 li
@
376.322 200.012 mo
382.8 200.012 li
@
.75 lw
369.764 200.012 mo
369.764 195.612 376.364 195.612 376.364 200.012 cv
376.364 204.412 369.764 204.412 369.764 200.012 cv
cp
@
1.5 lw
382.8 214.214 mo
389.279 214.214 li
@
395.795 214.214 mo
402.273 214.214 li
@
.75 lw
389.237 214.214 mo
389.237 209.814 395.837 209.814 395.837 214.214 cv
395.837 218.614 389.237 218.614 389.237 214.214 cv
cp
@
1.5 lw
402.273 219.754 mo
408.751 219.754 li
@
415.268 219.754 mo
421.746 219.754 li
@
.75 lw
408.71 219.754 mo
408.71 215.354 415.31 215.354 415.31 219.754 cv
415.31 224.154 408.71 224.154 408.71 219.754 cv
cp
@
1.5 lw
421.746 234.892 mo
428.224 234.892 li
@
434.741 234.892 mo
441.219 234.892 li
@
.75 lw
428.182 234.892 mo
428.182 230.492 434.782 230.492 434.782 234.892 cv
434.782 239.292 428.182 239.292 428.182 234.892 cv
cp
@
1.5 lw
441.219 240.397 mo
447.697 240.397 li
@
454.213 240.397 mo
460.692 240.397 li
@
.75 lw
447.655 240.397 mo
447.655 235.997 454.255 235.997 454.255 240.397 cv
454.255 244.797 447.655 244.797 447.655 240.397 cv
cp
@
1.5 lw
470.428 258.079 mo
470.428 257.628 li
@
460.692 254.37 mo
467.17 254.37 li
@
473.686 254.37 mo
480.164 254.37 li
@
.75 lw
467.128 254.37 mo
467.128 249.97 473.728 249.97 473.728 254.37 cv
473.728 258.77 467.128 258.77 467.128 254.37 cv
cp
@
1.5 lw
489.901 258.563 mo
489.901 258.079 li
@
489.901 251.563 mo
489.901 251.537 li
@
480.164 254.821 mo
486.643 254.821 li
@
493.159 254.821 mo
499.637 254.821 li
@
.75 lw
486.601 254.821 mo
486.601 250.421 493.201 250.421 493.201 254.821 cv
493.201 259.221 486.601 259.221 486.601 254.821 cv
cp
@
1.5 lw
509.374 297.552 mo
509.374 293.091 li
@
509.374 286.575 mo
509.374 283.846 li
@
499.637 289.834 mo
506.115 289.834 li
@
512.632 289.834 mo
519.11 289.834 li
@
.75 lw
506.074 289.834 mo
506.074 285.434 512.674 285.434 512.674 289.834 cv
512.674 294.234 506.074 294.234 506.074 289.834 cv
cp
@
1.5 lw
528.846 287.723 mo
528.846 284.548 li
@
528.846 278.031 mo
528.846 276.104 li
@
519.11 281.289 mo
525.588 281.289 li
@
532.104 281.289 mo
538.583 281.289 li
@
.75 lw
525.546 281.289 mo
525.546 276.889 532.146 276.889 532.146 281.289 cv
532.146 285.689 525.546 285.689 525.546 281.289 cv
cp
@
1.5 lw
110.181 104.973 mo
116.66 104.973 li
0 .990631 1 .000396735 cmyk
@
123.176 104.973 mo
129.654 104.973 li
@
116.618 104.973 mo
116.618 100.573 123.218 100.573 123.218 104.973 cv
123.218 109.373 116.618 109.373 116.618 104.973 cv
f
129.654 94.082 mo
136.132 94.082 li
@
142.649 94.082 mo
149.127 94.082 li
@
136.091 94.082 mo
136.091 89.682 142.691 89.682 142.691 94.082 cv
142.691 98.482 136.091 98.482 136.091 94.082 cv
f
149.127 99.538 mo
155.605 99.538 li
@
162.122 99.538 mo
168.6 99.538 li
@
155.563 99.538 mo
155.563 95.138 162.163 95.138 162.163 99.538 cv
162.163 103.938 155.563 103.938 155.563 99.538 cv
f
168.6 105.633 mo
175.078 105.633 li
@
181.594 105.633 mo
188.073 105.633 li
@
175.036 105.633 mo
175.036 101.233 181.636 101.233 181.636 105.633 cv
181.636 110.033 175.036 110.033 175.036 105.633 cv
f
188.073 114.428 mo
194.551 114.428 li
@
201.067 114.428 mo
207.545 114.428 li
@
194.509 114.428 mo
194.509 110.029 201.109 110.029 201.109 114.428 cv
201.109 118.829 194.509 118.829 194.509 114.428 cv
f
207.545 123.114 mo
214.024 123.114 li
@
220.54 123.114 mo
227.018 123.114 li
@
213.982 123.114 mo
213.982 118.714 220.582 118.714 220.582 123.114 cv
220.582 127.514 213.982 127.514 213.982 123.114 cv
f
227.018 129.349 mo
233.496 129.349 li
@
240.013 129.349 mo
246.491 129.349 li
@
233.455 129.349 mo
233.455 124.949 240.055 124.949 240.055 129.349 cv
240.055 133.749 233.455 133.749 233.455 129.349 cv
f
246.491 134.621 mo
252.969 134.621 li
@
259.486 134.621 mo
265.964 134.621 li
@
252.927 134.621 mo
252.927 130.221 259.527 130.221 259.527 134.621 cv
259.527 139.021 252.927 139.021 252.927 134.621 cv
f
265.964 141.338 mo
272.442 141.338 li
@
278.958 141.338 mo
285.436 141.338 li
@
272.4 141.338 mo
272.4 136.938 279 136.938 279 141.338 cv
279 145.738 272.4 145.738 272.4 141.338 cv
f
285.436 154.403 mo
291.915 154.403 li
@
298.431 154.403 mo
304.909 154.403 li
@
291.873 154.403 mo
291.873 150.003 298.473 150.003 298.473 154.403 cv
298.473 158.803 291.873 158.803 291.873 154.403 cv
f
304.909 168.252 mo
311.387 168.252 li
@
317.904 168.252 mo
324.382 168.252 li
@
311.346 168.252 mo
311.346 163.852 317.946 163.852 317.946 168.252 cv
317.946 172.652 311.346 172.652 311.346 168.252 cv
f
324.382 182.483 mo
330.86 182.483 li
@
337.377 182.483 mo
343.855 182.483 li
@
330.818 182.483 mo
330.818 178.083 337.418 178.083 337.418 182.483 cv
337.418 186.883 330.818 186.883 330.818 182.483 cv
f
343.855 197.234 mo
350.333 197.234 li
@
356.849 197.234 mo
363.328 197.234 li
@
350.291 197.234 mo
350.291 192.834 356.891 192.834 356.891 197.234 cv
356.891 201.634 350.291 201.634 350.291 197.234 cv
f
363.328 205.951 mo
369.806 205.951 li
@
376.322 205.951 mo
382.8 205.951 li
@
369.764 205.951 mo
369.764 201.551 376.364 201.551 376.364 205.951 cv
376.364 210.351 369.764 210.351 369.764 205.951 cv
f
382.8 220.214 mo
389.279 220.214 li
@
395.795 220.214 mo
402.273 220.214 li
@
389.237 220.214 mo
389.237 215.814 395.837 215.814 395.837 220.214 cv
395.837 224.614 389.237 224.614 389.237 220.214 cv
f
402.273 230.032 mo
408.751 230.032 li
@
415.268 230.032 mo
421.746 230.032 li
@
408.71 230.032 mo
408.71 225.632 415.31 225.632 415.31 230.032 cv
415.31 234.432 408.71 234.432 408.71 230.032 cv
f
431.482 244.88 mo
431.482 244.326 li
@
431.482 237.81 mo
431.482 237.73 li
@
421.746 241.068 mo
428.224 241.068 li
@
434.741 241.068 mo
441.219 241.068 li
@
428.182 241.068 mo
428.182 236.668 434.782 236.668 434.782 241.068 cv
434.782 245.468 428.182 245.468 428.182 241.068 cv
f
450.955 257.481 mo
450.955 255.921 li
@
450.955 249.404 mo
450.955 248.579 li
@
441.219 252.662 mo
447.697 252.662 li
@
454.213 252.662 mo
460.692 252.662 li
@
447.655 252.662 mo
447.655 248.262 454.255 248.262 454.255 252.662 cv
454.255 257.062 447.655 257.062 447.655 252.662 cv
f
470.428 275.959 mo
470.428 272.427 li
@
470.428 265.91 mo
470.428 263.754 li
@
460.692 269.168 mo
467.17 269.168 li
@
473.686 269.168 mo
480.164 269.168 li
@
467.128 269.168 mo
467.128 264.768 473.728 264.768 473.728 269.168 cv
473.728 273.568 467.128 273.568 467.128 269.168 cv
f
489.901 310.074 mo
489.901 300.594 li
@
489.901 294.078 mo
489.901 288.734 li
@
480.164 297.336 mo
486.643 297.336 li
@
493.159 297.336 mo
499.637 297.336 li
@
486.601 297.336 mo
486.601 292.936 493.201 292.936 493.201 297.336 cv
493.201 301.736 486.601 301.736 486.601 297.336 cv
f
509.374 294.837 mo
509.374 288.467 li
@
509.374 281.951 mo
509.374 278.138 li
@
499.637 285.209 mo
506.115 285.209 li
@
512.632 285.209 mo
519.11 285.209 li
@
506.074 285.209 mo
506.074 280.809 512.674 280.809 512.674 285.209 cv
512.674 289.609 506.074 289.609 506.074 285.209 cv
f
528.846 310.074 mo
528.846 300.594 li
@
528.846 294.078 mo
528.846 288.734 li
@
519.11 297.336 mo
525.588 297.336 li
@
532.104 297.336 mo
538.583 297.336 li
@
525.546 297.336 mo
525.546 292.936 532.146 292.936 532.146 297.336 cv
532.146 301.736 525.546 301.736 525.546 297.336 cv
f
110.181 105.628 mo
116.66 105.628 li
1 /0 /CSD get_res sepcs
1 sep
@
123.176 105.628 mo
129.654 105.628 li
@
.75 lw
116.618 105.628 mo
116.618 101.228 123.218 101.228 123.218 105.628 cv
123.218 110.028 116.618 110.028 116.618 105.628 cv
cp
@
1.5 lw
129.654 94.193 mo
136.132 94.193 li
@
142.649 94.193 mo
149.127 94.193 li
@
.75 lw
136.091 94.193 mo
136.091 89.793 142.691 89.793 142.691 94.193 cv
142.691 98.593 136.091 98.593 136.091 94.193 cv
cp
@
1.5 lw
149.127 100.876 mo
155.605 100.876 li
@
162.122 100.876 mo
168.6 100.876 li
@
.75 lw
155.563 100.876 mo
155.563 96.476 162.163 96.476 162.163 100.876 cv
162.163 105.276 155.563 105.276 155.563 100.876 cv
cp
@
1.5 lw
168.6 108.15 mo
175.078 108.15 li
@
181.594 108.15 mo
188.073 108.15 li
@
.75 lw
175.036 108.15 mo
175.036 103.75 181.636 103.75 181.636 108.15 cv
181.636 112.55 175.036 112.55 175.036 108.15 cv
cp
@
1.5 lw
188.073 115.689 mo
194.551 115.689 li
@
201.067 115.689 mo
207.545 115.689 li
@
.75 lw
194.509 115.689 mo
194.509 111.289 201.109 111.289 201.109 115.689 cv
201.109 120.089 194.509 120.089 194.509 115.689 cv
cp
@
1.5 lw
207.545 122.678 mo
214.024 122.678 li
@
220.54 122.678 mo
227.018 122.678 li
@
.75 lw
213.982 122.678 mo
213.982 118.278 220.582 118.278 220.582 122.678 cv
220.582 127.078 213.982 127.078 213.982 122.678 cv
cp
@
1.5 lw
227.018 127.736 mo
233.496 127.736 li
@
240.013 127.736 mo
246.491 127.736 li
@
.75 lw
233.455 127.736 mo
233.455 123.336 240.055 123.336 240.055 127.736 cv
240.055 132.136 233.455 132.136 233.455 127.736 cv
cp
@
1.5 lw
246.491 131.645 mo
252.969 131.645 li
@
259.486 131.645 mo
265.964 131.645 li
@
.75 lw
252.927 131.645 mo
252.927 127.245 259.527 127.245 259.527 131.645 cv
259.527 136.045 252.927 136.045 252.927 131.645 cv
cp
@
1.5 lw
265.964 137.088 mo
272.442 137.088 li
@
278.958 137.088 mo
285.436 137.088 li
@
.75 lw
272.4 137.088 mo
272.4 132.688 279 132.688 279 137.088 cv
279 141.488 272.4 141.488 272.4 137.088 cv
cp
@
1.5 lw
285.436 151.267 mo
291.915 151.267 li
@
298.431 151.267 mo
304.909 151.267 li
@
.75 lw
291.873 151.267 mo
291.873 146.867 298.473 146.867 298.473 151.267 cv
298.473 155.667 291.873 155.667 291.873 151.267 cv
cp
@
1.5 lw
304.909 163.277 mo
311.387 163.277 li
@
317.904 163.277 mo
324.382 163.277 li
@
.75 lw
311.346 163.277 mo
311.346 158.877 317.946 158.877 317.946 163.277 cv
317.946 167.677 311.346 167.677 311.346 163.277 cv
cp
@
1.5 lw
324.382 174.994 mo
330.86 174.994 li
@
337.377 174.994 mo
343.855 174.994 li
@
.75 lw
330.818 174.994 mo
330.818 170.594 337.418 170.594 337.418 174.994 cv
337.418 179.394 330.818 179.394 330.818 174.994 cv
cp
@
1.5 lw
343.855 187.735 mo
350.333 187.735 li
@
356.849 187.735 mo
363.328 187.735 li
@
.75 lw
350.291 187.735 mo
350.291 183.335 356.891 183.335 356.891 187.735 cv
356.891 192.135 350.291 192.135 350.291 187.735 cv
cp
@
1.5 lw
363.328 200.012 mo
369.806 200.012 li
@
376.322 200.012 mo
382.8 200.012 li
@
.75 lw
369.764 200.012 mo
369.764 195.612 376.364 195.612 376.364 200.012 cv
376.364 204.412 369.764 204.412 369.764 200.012 cv
cp
@
1.5 lw
382.8 214.214 mo
389.279 214.214 li
@
395.795 214.214 mo
402.273 214.214 li
@
.75 lw
389.237 214.214 mo
389.237 209.814 395.837 209.814 395.837 214.214 cv
395.837 218.614 389.237 218.614 389.237 214.214 cv
cp
@
1.5 lw
402.273 219.754 mo
408.751 219.754 li
@
415.268 219.754 mo
421.746 219.754 li
@
.75 lw
408.71 219.754 mo
408.71 215.354 415.31 215.354 415.31 219.754 cv
415.31 224.154 408.71 224.154 408.71 219.754 cv
cp
@
1.5 lw
421.746 234.892 mo
428.224 234.892 li
@
434.741 234.892 mo
441.219 234.892 li
@
.75 lw
428.182 234.892 mo
428.182 230.492 434.782 230.492 434.782 234.892 cv
434.782 239.292 428.182 239.292 428.182 234.892 cv
cp
@
1.5 lw
441.219 240.397 mo
447.697 240.397 li
@
454.213 240.397 mo
460.692 240.397 li
@
.75 lw
447.655 240.397 mo
447.655 235.997 454.255 235.997 454.255 240.397 cv
454.255 244.797 447.655 244.797 447.655 240.397 cv
cp
@
1.5 lw
470.428 258.079 mo
470.428 257.628 li
@
460.692 254.37 mo
467.17 254.37 li
@
473.686 254.37 mo
480.164 254.37 li
@
.75 lw
467.128 254.37 mo
467.128 249.97 473.728 249.97 473.728 254.37 cv
473.728 258.77 467.128 258.77 467.128 254.37 cv
cp
@
1.5 lw
489.901 258.563 mo
489.901 258.079 li
@
489.901 251.563 mo
489.901 251.537 li
@
480.164 254.821 mo
486.643 254.821 li
@
493.159 254.821 mo
499.637 254.821 li
@
.75 lw
486.601 254.821 mo
486.601 250.421 493.201 250.421 493.201 254.821 cv
493.201 259.221 486.601 259.221 486.601 254.821 cv
cp
@
1.5 lw
509.374 297.552 mo
509.374 293.091 li
@
509.374 286.575 mo
509.374 283.846 li
@
499.637 289.834 mo
506.115 289.834 li
@
512.632 289.834 mo
519.11 289.834 li
@
.75 lw
506.074 289.834 mo
506.074 285.434 512.674 285.434 512.674 289.834 cv
512.674 294.234 506.074 294.234 506.074 289.834 cv
cp
@
1.5 lw
528.846 287.723 mo
528.846 284.548 li
@
528.846 278.031 mo
528.846 276.104 li
@
519.11 281.289 mo
525.588 281.289 li
@
532.104 281.289 mo
538.583 281.289 li
@
.75 lw
525.546 281.289 mo
525.546 276.889 532.146 276.889 532.146 281.289 cv
532.146 285.689 525.546 285.689 525.546 281.289 cv
cp
@
140.7 46.301 mo
141.052 49.2 li
144.043 49.2 li
142.147 34.9 li
138.765 34.9 li
130.808 49.2 li
133.799 49.2 li
135.383 46.301 li
cp
140.427 43.9 mo
136.732 43.9 li
139.743 38.35 li
f
154.448 37.3 mo
158.593 37.3 li
159.121 34.899 li
147.704 34.899 li
147.176 37.3 li
151.516 37.3 li
148.994 49.2 li
151.926 49.2 li
f
163.927 34.9 mo
160.995 34.9 li
157.965 49.2 li
167.72 49.2 li
168.248 46.799 li
161.425 46.799 li
f
178.7 46.301 mo
179.052 49.2 li
182.043 49.2 li
180.147 34.9 li
176.765 34.9 li
168.808 49.2 li
171.799 49.2 li
173.383 46.301 li
cp
178.427 43.9 mo
174.732 43.9 li
177.743 38.35 li
f
196.348 39.289 mo
196.462 38.74 196.5 38.466 196.5 38.073 cv
196.5 35.955 194.701 34.7 191.626 34.7 cv
189.75 34.7 188.281 35.169 187.178 36.144 cv
186.075 37.099 185.399 38.561 185.399 39.945 cv
185.399 41.563 186.368 42.421 188.674 42.888 cv
190.574 43.278 li
192.338 43.629 192.9 44.019 192.9 44.935 cv
192.9 46.241 191.577 47.098 189.524 47.098 cv
187.728 47.098 186.701 46.468 186.701 45.378 cv
186.701 45.283 186.759 45.11 186.817 44.938 cv
183.977 44.938 li
183.919 45.325 183.899 45.519 183.899 45.79 cv
183.899 46.815 184.288 47.704 184.99 48.343 cv
185.925 49.194 187.269 49.6 189.139 49.6 cv
191.515 49.6 193.327 48.918 194.457 47.612 cv
195.275 46.696 195.801 45.273 195.801 43.987 cv
195.801 42.486 194.735 41.473 192.758 41.083 cv
190.645 40.654 li
188.823 40.284 188.3 39.972 188.3 39.231 cv
188.3 37.984 189.383 37.203 191.144 37.203 cv
192.789 37.203 193.699 37.774 193.699 38.837 cv
193.699 38.935 193.689 39.113 193.679 39.29 cv
f
207.2 43.2 mo
211.643 43.2 li
212.749 43.2 213.622 42.864 214.379 42.173 cv
215.233 41.382 215.601 40.454 215.601 39.13 cv
215.601 36.423 214.029 34.9 211.237 34.9 cv
205.4 34.9 li
205.4 49.2 li
207.201 49.2 li
cp
207.2 41.599 mo
207.2 36.501 li
211.01 36.501 li
212.758 36.501 213.8 37.457 213.8 39.05 cv
213.8 40.643 212.758 41.599 211.01 41.599 cv
f
218.099 39 mo
218.099 49.2 li
219.8 49.2 li
219.8 43.893 li
219.8 42.43 220.159 41.473 220.915 40.908 cv
221.406 40.537 221.879 40.42 222.976 40.401 cv
222.976 38.758 li
222.705 38.72 222.57 38.7 222.358 38.7 cv
221.317 38.7 220.526 39.315 219.6 40.814 cv
219.6 39.001 li
f
233.229 44.6 mo
233.229 43.052 233.111 42.124 232.818 41.37 cv
232.155 39.706 230.594 38.7 228.682 38.7 cv
225.834 38.7 224 40.874 224 44.209 cv
224 47.545 225.775 49.6 228.643 49.6 cv
230.984 49.6 232.604 48.289 233.014 46.092 cv
231.375 46.092 li
230.927 47.411 230.01 48.099 228.703 48.099 cv
227.669 48.099 226.792 47.633 226.246 46.778 cv
225.856 46.195 225.719 45.612 225.7 44.601 cv
cp
225.722 43.3 mo
225.859 41.421 227.012 40.2 228.654 40.2 cv
230.257 40.2 231.489 41.518 231.489 43.184 cv
231.489 43.223 231.489 43.261 231.469 43.3 cv
f
235.4 49.2 mo
237.101 49.2 li
237.101 34.9 li
235.4 34.9 li
cp
f
241.301 39 mo
239.7 39 li
239.7 49.2 li
241.301 49.2 li
cp
241.301 34.9 mo
239.7 34.9 li
239.7 37.002 li
241.301 37.002 li
f
243.999 39 mo
243.999 49.2 li
245.7 49.2 li
245.7 42.776 li
245.7 41.292 246.775 40.1 248.104 40.1 cv
249.315 40.1 250 40.843 250 42.151 cv
250 49.2 li
251.701 49.2 li
251.701 42.776 li
251.701 41.292 252.751 40.1 254.049 40.1 cv
255.213 40.1 255.901 40.862 255.901 42.151 cv
255.901 49.2 li
257.602 49.2 li
257.602 41.545 li
257.602 39.714 256.54 38.699 254.614 38.699 cv
253.238 38.699 252.413 39.1 251.45 40.226 cv
250.841 39.157 250.015 38.699 248.679 38.699 cv
247.303 38.699 246.399 39.197 245.515 40.402 cv
245.515 38.999 li
f
261.901 39 mo
260.3 39 li
260.3 49.2 li
261.901 49.2 li
cp
261.901 34.9 mo
260.3 34.9 li
260.3 37.002 li
261.901 37.002 li
f
264.799 39 mo
264.799 49.2 li
266.5 49.2 li
266.5 43.557 li
266.5 41.468 267.575 40.1 269.227 40.1 cv
270.494 40.1 271.301 40.882 271.301 42.112 cv
271.301 49.2 li
272.901 49.2 li
272.901 41.487 li
272.901 39.792 271.639 38.7 269.678 38.7 cv
268.164 38.7 267.193 39.276 266.3 40.677 cv
266.3 39 li
f
284.659 48.199 mo
284.479 48.199 284.399 48.199 284.299 48.199 cv
283.72 48.199 283.4 47.91 283.4 47.408 cv
283.4 41.462 li
283.4 39.666 282.075 38.7 279.562 38.7 cv
278.081 38.7 276.854 39.126 276.172 39.88 cv
275.704 40.402 275.51 40.982 275.471 41.987 cv
277.112 41.987 li
277.249 40.758 277.991 40.201 279.514 40.201 cv
280.979 40.201 281.8 40.745 281.8 41.714 cv
281.8 42.141 li
281.8 42.819 281.388 43.11 280.095 43.265 cv
277.783 43.556 277.43 43.633 276.803 43.885 cv
275.608 44.369 275.001 45.28 275.001 46.598 cv
275.001 48.439 276.294 49.602 278.37 49.602 cv
279.663 49.602 280.701 49.167 281.857 48.147 cv
281.974 49.149 282.484 49.602 283.541 49.602 cv
283.874 49.602 284.129 49.563 284.659 49.427 cv
cp
281.8 45.964 mo
281.8 46.508 281.642 46.839 281.152 47.285 cv
280.485 47.887 279.681 48.198 278.721 48.198 cv
277.446 48.198 276.701 47.596 276.701 46.566 cv
276.701 45.497 277.426 44.953 279.171 44.7 cv
280.896 44.467 281.25 44.389 281.799 44.136 cv
f
286.499 39 mo
286.499 49.2 li
288.2 49.2 li
288.2 43.893 li
288.2 42.43 288.559 41.473 289.315 40.908 cv
289.806 40.537 290.279 40.42 291.376 40.401 cv
291.376 38.758 li
291.105 38.72 290.97 38.7 290.758 38.7 cv
289.717 38.7 288.926 39.315 288 40.814 cv
288 39.001 li
f
299.185 39 mo
296.35 46.932 li
293.73 39 li
291.99 39 li
295.45 49.281 li
294.825 50.903 li
294.571 51.626 294.199 51.899 293.515 51.899 cv
293.28 51.899 293.006 51.846 292.654 51.741 cv
292.654 53.239 li
292.986 53.419 293.319 53.499 293.749 53.499 cv
294.277 53.499 294.844 53.323 295.274 53.011 cv
295.782 52.64 296.076 52.21 296.388 51.389 cv
300.943 39 li
f
387.9 44.1 mo
391.833 44.1 li
393.193 44.1 393.8 44.75 393.8 46.212 cv
393.8 47.267 li
393.8 47.998 393.929 48.712 394.139 49.199 cv
395.962 49.199 li
395.962 48.824 li
395.435 48.432 395.33 48.008 395.3 46.424 cv
395.283 44.465 394.963 43.878 393.632 43.323 cv
394.964 42.67 395.5 41.837 395.5 40.483 cv
395.5 38.426 394.211 37.3 391.88 37.3 cv
386.401 37.3 li
386.401 49.2 li
387.901 49.2 li
cp
387.9 42.8 mo
387.9 38.6 li
391.629 38.6 li
392.491 38.6 392.988 38.734 393.369 39.069 cv
393.783 39.421 394 39.973 394 40.709 cv
394 42.148 393.27 42.801 391.629 42.801 cv
f
405.4 43.5 mo
397.515 43.5 li
397.515 44.6 li
405.4 44.6 li
cp
405.4 46.3 mo
397.515 46.3 li
397.515 47.4 li
405.4 47.4 li
f
410.698 37.6 mo
409.617 37.6 408.635 38.084 408.029 38.9 cv
407.276 39.916 406.899 41.471 406.899 43.614 cv
406.899 47.524 408.209 49.601 410.698 49.601 cv
413.154 49.601 414.499 47.524 414.499 43.712 cv
414.499 41.455 414.137 39.949 413.367 38.9 cv
412.761 38.067 411.795 37.6 410.698 37.6 cv
cp
410.699 38.899 mo
412.238 38.899 413 40.47 413 43.577 cv
413 46.864 412.254 48.4 410.667 48.4 cv
409.161 48.4 408.4 46.798 408.4 43.626 cv
408.4 40.454 409.161 38.899 410.7 38.899 cv
f
416.701 49.2 mo
418.401 49.2 li
418.401 47.5 li
416.701 47.5 li
cp
f
427.913 40.7 mo
427.635 38.756 426.397 37.6 424.638 37.6 cv
423.367 37.6 422.227 38.225 421.543 39.258 cv
420.826 40.389 420.5 41.815 420.5 43.929 cv
420.5 45.88 420.795 47.125 421.483 48.158 cv
422.106 49.092 423.121 49.6 424.399 49.6 cv
426.611 49.6 428.201 47.962 428.201 45.686 cv
428.201 43.524 426.708 42 424.602 42 cv
423.441 42 422.53 42.444 421.9 43.3 cv
421.916 40.471 422.839 38.9 424.503 38.9 cv
425.524 38.9 426.233 39.557 426.464 40.701 cv
cp
424.448 43.3 mo
425.836 43.3 426.701 44.258 426.701 45.801 cv
426.701 47.246 425.721 48.301 424.399 48.301 cv
423.06 48.301 422.048 47.197 422.048 45.72 cv
422.048 44.291 423.028 43.3 424.448 43.3 cv
f
444.185 41.005 mo
443.711 38.38 442.215 37.099 439.614 37.099 cv
438.021 37.099 436.736 37.609 435.858 38.59 cv
434.785 39.768 434.2 41.469 434.2 43.4 cv
434.2 45.363 434.802 47.048 435.924 48.209 cv
436.835 49.158 438.006 49.599 439.551 49.599 cv
442.446 49.599 444.072 48.027 444.43 44.865 cv
442.866 44.865 li
442.736 45.695 442.573 46.259 442.329 46.74 cv
441.841 47.735 440.831 48.299 439.56 48.299 cv
437.199 48.299 435.7 46.385 435.7 43.383 cv
435.7 40.298 437.133 38.399 439.43 38.399 cv
440.391 38.399 441.287 38.7 441.775 39.167 cv
442.215 39.585 442.459 40.103 442.638 41.004 cv
f
446.2 49.2 mo
447.6 49.2 li
447.6 37.3 li
446.2 37.3 li
cp
f
456.7 49.2 mo
456.7 40.7 li
455.3 40.7 li
455.3 45.525 li
455.3 47.263 454.385 48.4 452.964 48.4 cv
451.886 48.4 451.2 47.75 451.2 46.727 cv
451.2 40.7 li
449.8 40.7 li
449.8 47.274 li
449.8 48.689 450.875 49.6 452.563 49.6 cv
453.837 49.6 454.648 49.153 455.459 48.011 cv
455.459 49.2 li
f
464.936 43.042 mo
464.92 41.352 463.818 40.4 461.857 40.4 cv
459.88 40.4 458.6 41.428 458.6 43.007 cv
458.6 44.343 459.285 44.978 461.307 45.466 cv
462.579 45.776 li
463.525 46.004 463.901 46.346 463.901 46.965 cv
463.901 47.763 463.096 48.301 461.898 48.301 cv
461.16 48.301 460.536 48.092 460.192 47.738 cv
459.979 47.497 459.88 47.255 459.798 46.659 cv
458.354 46.659 li
458.419 48.648 459.531 49.6 461.77 49.6 cv
463.927 49.6 465.3 48.541 465.3 46.896 cv
465.3 45.626 464.582 44.925 462.886 44.518 cv
461.582 44.208 li
460.473 43.947 460 43.589 460 42.987 cv
460 42.205 460.698 41.699 461.802 41.699 cv
462.89 41.699 463.474 42.162 463.507 43.041 cv
f
470.138 40.7 mo
468.8 40.7 li
468.8 38.318 li
467.4 38.318 li
467.4 40.7 li
466.228 40.7 li
466.228 41.8 li
467.4 41.8 li
467.4 48.249 li
467.4 49.112 467.983 49.6 469.036 49.6 cv
469.36 49.6 469.684 49.567 470.138 49.484 cv
470.138 48.32 li
469.967 48.38 469.765 48.4 469.515 48.4 cv
468.955 48.4 468.799 48.237 468.799 47.636 cv
468.799 41.8 li
470.137 41.8 li
f
478.857 45.4 mo
478.857 44.089 478.759 43.302 478.516 42.662 cv
477.966 41.252 476.67 40.399 475.084 40.399 cv
472.721 40.399 471.199 42.233 471.199 45.049 cv
471.199 47.865 472.672 49.6 475.051 49.6 cv
476.993 49.6 478.336 48.483 478.678 46.61 cv
477.316 46.61 li
476.943 47.721 476.181 48.301 475.095 48.301 cv
474.236 48.301 473.507 47.914 473.053 47.206 cv
472.729 46.722 472.616 46.239 472.599 45.401 cv
cp
472.602 44.3 mo
472.716 42.723 473.677 41.699 475.046 41.699 cv
476.382 41.699 477.408 42.804 477.408 44.202 cv
477.408 44.235 477.408 44.267 477.392 44.3 cv
f
480.601 40.7 mo
480.601 49.2 li
482.001 49.2 li
482.001 44.737 li
482.001 43.507 482.31 42.703 482.959 42.227 cv
483.381 41.915 483.788 41.817 484.73 41.799 cv
484.73 40.447 li
484.503 40.415 484.39 40.399 484.212 40.399 cv
483.339 40.399 482.676 40.926 481.901 42.21 cv
481.901 40.699 li
f
494.9 37.3 mo
494.9 45.673 li
494.9 46.619 494.802 47.158 494.525 47.566 cv
494.232 48.023 493.678 48.3 493.075 48.3 cv
491.934 48.3 491.299 47.536 491.299 46.152 cv
491.299 45.387 li
489.799 45.387 li
489.799 46.437 li
489.799 48.371 491.058 49.599 493.074 49.599 cv
495.124 49.599 496.398 48.307 496.398 46.246 cv
496.398 37.299 li
f
505.957 45.4 mo
505.957 44.089 505.859 43.302 505.616 42.662 cv
505.066 41.252 503.77 40.399 502.184 40.399 cv
499.821 40.399 498.299 42.233 498.299 45.049 cv
498.299 47.865 499.772 49.6 502.151 49.6 cv
504.093 49.6 505.436 48.483 505.778 46.61 cv
504.416 46.61 li
504.043 47.721 503.281 48.301 502.195 48.301 cv
501.336 48.301 500.607 47.914 500.153 47.206 cv
499.829 46.722 499.716 46.239 499.699 45.401 cv
cp
499.702 44.3 mo
499.816 42.723 500.777 41.699 502.146 41.699 cv
503.482 41.699 504.508 42.804 504.508 44.202 cv
504.508 44.235 504.508 44.267 504.492 44.3 cv
f
510.838 40.7 mo
509.5 40.7 li
509.5 38.318 li
508.1 38.318 li
508.1 40.7 li
506.928 40.7 li
506.928 41.8 li
508.1 41.8 li
508.1 48.249 li
508.1 49.112 508.683 49.6 509.736 49.6 cv
510.06 49.6 510.384 49.567 510.838 49.484 cv
510.838 48.32 li
510.667 48.38 510.465 48.4 510.215 48.4 cv
509.655 48.4 509.499 48.237 509.499 47.636 cv
509.499 41.8 li
510.837 41.8 li
f
518.336 43.042 mo
518.32 41.352 517.218 40.4 515.257 40.4 cv
513.28 40.4 512 41.428 512 43.007 cv
512 44.343 512.685 44.978 514.707 45.466 cv
515.979 45.776 li
516.925 46.004 517.301 46.346 517.301 46.965 cv
517.301 47.763 516.496 48.301 515.298 48.301 cv
514.56 48.301 513.936 48.092 513.592 47.738 cv
513.379 47.497 513.28 47.255 513.198 46.659 cv
511.754 46.659 li
511.819 48.648 512.931 49.6 515.17 49.6 cv
517.327 49.6 518.7 48.541 518.7 46.896 cv
518.7 45.626 517.982 44.925 516.286 44.518 cv
514.982 44.208 li
513.873 43.947 513.4 43.589 513.4 42.987 cv
513.4 42.205 514.098 41.699 515.202 41.699 cv
516.29 41.699 516.874 42.162 516.907 43.041 cv
f
376.7 47.8 mo
379.8 47.8 li
379.8 55.1 li
376.7 55.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.1 0 0 -7.3 376.7 336.2 ]ct
<<
/T 1
/W 31 
/H 73 
/M[31 0 0 -73 0 73 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfKH+"98CO!WW-!!WW-!!WW&t!WVop!WVop!WVop!WVops8Vips8Virs8Virs8Virs8Virs8Virs8Vir
s8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Vir
IfKHC"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr
"98Dr"98Dr"98,r!!2ip!!2ip!!2ip!!2ip!!2ip!!2ip!!3,p"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr
,m42Ip]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LPH~>

%%EndBinary
grestore
np
f
341.722 45.6 mo
342.944 49.2 li
344.638 49.2 li
340.468 37.3 li
338.513 37.3 li
334.277 49.2 li
335.89 49.2 li
337.144 45.6 li
cp
341.298 44.3 mo
337.518 44.3 li
339.473 38.953 li
1 /0 /CSD get_res sepcs
1 sep
f
345.901 40.7 mo
345.901 49.2 li
347.301 49.2 li
347.301 44.487 li
347.301 42.742 348.219 41.599 349.63 41.599 cv
350.712 41.599 351.401 42.253 351.401 43.28 cv
351.401 49.2 li
352.801 49.2 li
352.801 42.735 li
352.801 41.314 351.73 40.4 350.067 40.4 cv
348.783 40.4 347.96 40.895 347.202 42.098 cv
347.202 40.701 li
f
358.038 40.7 mo
356.7 40.7 li
356.7 38.318 li
355.3 38.318 li
355.3 40.7 li
354.128 40.7 li
354.128 41.8 li
355.3 41.8 li
355.3 48.249 li
355.3 49.112 355.883 49.6 356.936 49.6 cv
357.26 49.6 357.584 49.567 358.038 49.484 cv
358.038 48.32 li
357.867 48.38 357.665 48.4 357.415 48.4 cv
356.855 48.4 356.699 48.237 356.699 47.636 cv
356.699 41.8 li
358.037 41.8 li
f
360.899 40.7 mo
359.499 40.7 li
359.499 49.2 li
360.899 49.2 li
cp
360.899 37.3 mo
359.499 37.3 li
359.499 39.034 li
360.899 39.034 li
f
362.749 45.3 mo
366.626 45.3 li
366.626 44.1 li
362.749 44.1 li
cp
f
369.8 37.3 mo
368.4 37.3 li
368.4 49.2 li
369.8 49.2 li
369.8 45.877 li
371.119 44.574 li
374 49.201 li
375.678 49.201 li
372.193 43.638 li
375.156 40.701 li
373.414 40.701 li
369.8 44.281 li
f
479.701 76.254 mo
480.7 76.254 li
480.7 60.901 li
479.701 60.901 li
cp
f
483.133 69.574 mo
491.099 72.946 li
491.099 71.659 li
484.68 68.987 li
491.099 66.364 li
491.099 65.077 li
483.133 68.449 li
f
497.2 70 mo
497.2 72.8 li
498.6 72.8 li
498.6 70 li
500.372 70 li
500.372 68.7 li
498.6 68.7 li
498.6 61.199 li
497.552 61.199 li
492.357 68.481 li
492.357 69.999 li
cp
497.2 68.7 mo
493.611 68.7 li
497.2 63.693 li
f
502.401 72.8 mo
504.101 72.8 li
504.101 71.1 li
502.401 71.1 li
cp
f
513.293 61.2 mo
507.297 61.2 li
506.429 67.538 li
507.75 67.538 li
508.419 66.768 508.974 66.5 509.871 66.5 cv
511.421 66.5 512.4 67.552 512.4 69.249 cv
512.4 70.898 511.436 71.901 509.87 71.901 cv
508.614 71.901 507.847 71.267 507.505 69.966 cv
506.07 69.966 li
506.266 70.919 506.43 71.378 506.774 71.805 cv
507.429 72.691 508.608 73.2 509.919 73.2 cv
512.261 73.2 513.9 71.503 513.9 69.054 cv
513.9 66.768 512.375 65.2 510.147 65.2 cv
509.328 65.2 508.673 65.409 508.001 65.892 cv
508.46 62.599 li
513.293 62.599 li
f
471.125 72.8 mo
472.549 72.8 li
472.549 66.884 li
473.131 66.007 473.698 65.6 474.41 65.6 cv
475.332 65.6 475.9 66.234 475.9 67.273 cv
475.9 74.402 li
475.9 74.954 476 75.572 476.234 76.4 cv
477.786 76.4 li
477.505 75.607 477.4 75.186 477.4 74.781 cv
477.4 66.833 li
477.4 65.489 476.425 64.5 475.078 64.5 cv
474.12 64.5 473.438 64.925 472.561 66.104 cv
472.48 65.624 472.399 65.416 472.253 65.192 cv
471.977 64.824 471.506 64.6 471.019 64.6 cv
470.37 64.6 469.753 65.003 469.444 65.647 cv
469.265 66.033 469.201 66.372 469.201 66.967 cv
469.589 66.967 li
469.686 65.967 469.912 65.499 470.301 65.499 cv
470.786 65.499 471.142 66.134 471.142 67.012 cv
f
363.881 68.45 mo
355.915 65.078 li
355.915 66.365 li
362.334 69.037 li
355.915 71.66 li
355.915 72.947 li
363.881 69.575 li
f
372.919 71.4 mo
366.862 71.4 li
367.008 70.449 367.528 69.842 368.941 69.006 cv
370.565 68.12 li
372.173 67.234 373.001 66.038 373.001 64.611 cv
373.001 63.643 372.61 62.741 371.928 62.118 cv
371.246 61.495 370.402 61.199 369.314 61.199 cv
367.853 61.199 366.765 61.728 366.132 62.717 cv
365.726 63.344 365.547 64.069 365.515 65.256 cv
366.935 65.256 li
366.983 64.473 367.08 64 367.274 63.625 cv
367.645 62.923 368.387 62.498 369.242 62.498 cv
370.533 62.498 371.502 63.429 371.502 64.668 cv
371.502 65.58 370.969 66.363 369.952 66.949 cv
368.467 67.796 li
366.078 69.165 365.385 70.257 365.255 72.799 cv
372.92 72.799 li
f
378.198 61.2 mo
377.117 61.2 376.135 61.684 375.529 62.5 cv
374.776 63.516 374.399 65.071 374.399 67.214 cv
374.399 71.124 375.709 73.201 378.198 73.201 cv
380.654 73.201 381.999 71.124 381.999 67.312 cv
381.999 65.055 381.637 63.549 380.867 62.5 cv
380.261 61.667 379.295 61.2 378.198 61.2 cv
cp
378.199 62.499 mo
379.738 62.499 380.5 64.07 380.5 67.177 cv
380.5 70.464 379.754 72 378.167 72 cv
376.661 72 375.9 70.398 375.9 67.226 cv
375.9 64.054 376.661 62.499 378.2 62.499 cv
f
398.8 66.5 mo
393.898 66.5 li
393.898 67.8 li
397.5 67.8 li
397.5 68.136 li
397.5 70.321 395.931 71.9 393.76 71.9 cv
392.552 71.9 391.458 71.455 390.756 70.679 cv
389.972 69.821 389.499 68.386 389.499 66.901 cv
389.499 63.948 391.167 61.999 393.684 61.999 cv
395.498 61.999 396.806 62.952 397.133 64.524 cv
398.687 64.524 li
398.262 62.095 396.435 60.699 393.71 60.699 cv
392.258 60.699 391.083 61.078 390.153 61.847 cv
388.783 62.992 387.999 64.841 387.999 66.984 cv
387.999 70.648 390.231 73.2 393.44 73.2 cv
395.053 73.2 396.34 72.589 397.499 71.285 cv
397.863 72.9 li
398.798 72.9 li
f
408.357 69 mo
408.357 67.689 408.259 66.902 408.016 66.262 cv
407.466 64.852 406.17 63.999 404.584 63.999 cv
402.221 63.999 400.699 65.833 400.699 68.649 cv
400.699 71.465 402.172 73.2 404.551 73.2 cv
406.493 73.2 407.836 72.083 408.178 70.21 cv
406.816 70.21 li
406.443 71.321 405.681 71.901 404.595 71.901 cv
403.736 71.901 403.007 71.514 402.553 70.806 cv
402.229 70.322 402.116 69.839 402.099 69.001 cv
cp
402.102 67.9 mo
402.216 66.323 403.177 65.299 404.546 65.299 cv
405.882 65.299 406.908 66.404 406.908 67.802 cv
406.908 67.835 406.908 67.867 406.892 67.9 cv
f
415.386 72.8 mo
419.508 60.9 li
417.895 60.9 li
414.604 70.975 li
411.118 60.9 li
409.489 60.9 li
413.757 72.8 li
f
437.1 67.499 mo
437.887 67.499 li
439.478 67.499 440.299 68.214 440.299 69.594 cv
440.299 71.039 439.399 71.9 437.895 71.9 cv
436.326 71.9 435.558 71.119 435.459 69.444 cv
434.021 69.444 li
434.087 70.38 434.251 70.986 434.53 71.511 cv
435.121 72.626 436.269 73.2 437.86 73.2 cv
440.255 73.2 441.799 71.774 441.799 69.578 cv
441.799 68.103 441.212 67.283 439.788 66.808 cv
440.863 66.382 441.4 65.562 441.4 64.399 cv
441.4 62.399 440.086 61.2 437.898 61.2 cv
435.58 61.2 434.349 62.488 434.3 64.981 cv
435.7 64.981 li
435.716 64.279 435.781 63.888 435.959 63.529 cv
436.282 62.892 436.993 62.5 437.882 62.5 cv
439.142 62.5 439.902 63.254 439.902 64.482 cv
439.902 65.301 439.612 65.792 438.985 66.054 cv
438.599 66.218 438.1 66.283 437.102 66.3 cv
f
443.901 72.8 mo
445.601 72.8 li
445.601 71.1 li
443.901 71.1 li
cp
f
455.319 71.4 mo
449.262 71.4 li
449.408 70.449 449.928 69.842 451.341 69.006 cv
452.965 68.12 li
454.573 67.234 455.401 66.038 455.401 64.611 cv
455.401 63.643 455.01 62.741 454.328 62.118 cv
453.646 61.495 452.802 61.199 451.714 61.199 cv
450.253 61.199 449.165 61.728 448.532 62.717 cv
448.126 63.344 447.947 64.069 447.915 65.256 cv
449.335 65.256 li
449.383 64.473 449.48 64 449.674 63.625 cv
450.045 62.923 450.787 62.498 451.642 62.498 cv
452.933 62.498 453.902 63.429 453.902 64.668 cv
453.902 65.58 453.369 66.363 452.352 66.949 cv
450.867 67.796 li
448.478 69.165 447.785 70.257 447.655 72.799 cv
455.32 72.799 li
f
456.833 69.574 mo
464.799 72.946 li
464.799 71.659 li
458.38 68.987 li
464.799 66.364 li
464.799 65.077 li
456.833 68.449 li
f
467.201 76.254 mo
468.2 76.254 li
468.2 60.901 li
467.201 60.901 li
cp
f
342.5 57 mo
344.5 57 li
344.5 67 li
342.5 67 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[2 0 0 -10 342.5 327 ]ct
<<
/T 1
/W 20 
/H 100 
/M[20 0 0 -100 0 100 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
I_\2J^]XVP!<9h7J%u%K^]5Il!$AuV+9)<Os*tX[^^pJ'&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pu
s54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ff
C>]X&i",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ff
i",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(Pus54Ffi",kG&-(PumJleX+5d\0i",kG&-(Pus54Ff
i",kG&-(Pus54Ffi",kG%tF~>

%%EndBinary
grestore
np
f
345.7 59 mo
350.7 59 li
350.7 64.9 li
345.7 64.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -5.9 345.7 325 ]ct
<<
/T 1
/W 50 
/H 59 
/M[50 0 0 -59 0 59 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
*WQ0/!WW28s8N'!+90.Vqu?^%s1n[(!!!'"_#M4L!!@_ds+((K!^FL#r;Zm@_#F9464^m0!!iE%#Jg*7
5Q?6=_"[nZs1e`Pn,`Rhn,^>o"98Dr!PmUus8Vio^u,b's82l4^^pJFrW'aL+92B?!'n=Arr3$"5_&i!
rr3'#5_))trrTud5Q1T`^jpq5rrTt9J,TBK^]8l_rrTt9J,TBK^]8l_rrTt9J,TBI^s;u\5Q:ZbJ,fR6
rr3(N!.[<5rr[cOJ3X&5"+UB%5Q:Zb!!%Nkrr3'#5enK@rrW6d^`WRU5la0c&-)\/!'oHQs8W&u^u,It
s82l4huj#Zp]/,!!WW2h!PnI1s8V!X_"[nZs1e`Pqu@i=!!g==!!Dur#JgB<!!3\Hs8;p"+2IolrW!'c
_#N<m*rl<@_#Nm(!!3,8s82is#QMU>s*t(ks1n[7n,`Rh^jl~>

%%EndBinary
grestore
np
f
350.8 57.6 mo
353.9 57.6 li
353.9 64.9 li
350.8 64.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.1 0 0 -7.3 350.8 326.4 ]ct
<<
/T 1
/W 31 
/H 73 
/M[31 0 0 -73 0 73 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfKH+"98CO!WW-!!WW-!!WW&t!WVop!WVop!WVop!WVops8Vips8Virs8Virs8Virs8Virs8Virs8Vir
s8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Vir
IfKHC"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr
"98Dr"98Dr"98,r!!2ip!!2ip!!2ip!!2ip!!2ip!!2ip!!3,p"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr
,m42Ip]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LPH~>

%%EndBinary
grestore
np
f
342.5 73.3 mo
349.2 73.3 li
349.2 81 li
342.5 81 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.7 0 0 -7.7 342.5 310.7 ]ct
<<
/T 1
/W 67 
/H 77 
/M[67 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVllu5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\rrE*aqYpQr
5PkB\!'gG^rr3!!5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\
rrE*aqYpQr5PkB\!'gD]"98B$5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\
!'g>[!<>@\rrE*aqYpQr5PkB\!'gA\!ri6bqYpQr5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\
rrE*aqYpQr5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'g>[!<>@\rrE*a
qYpQr5PkB\!'g>[!<>@\rrE*aqYpQr5PkB\!'gJ_!;uZn!?_7<!<)s!+8ks8!?_79!!+2>q>^O<r;$Bo
+8ks8!?_79!!"*k~>

%%EndBinary
grestore
np
f
334.9 76.352 mo
336.3 76.352 li
336.3 71.901 li
337.009 72.801 337.797 73.201 338.892 73.201 cv
341.065 73.201 342.5 71.417 342.5 68.683 cv
342.5 65.802 341.117 64.001 338.884 64.001 cv
337.743 64.001 336.827 64.529 336.2 65.552 cv
336.2 64.302 li
334.9 64.302 li
cp
338.651 65.3 mo
340.133 65.3 341.1 66.618 341.1 68.65 cv
341.1 70.584 340.116 71.901 338.651 71.901 cv
337.234 71.901 336.3 70.601 336.3 68.601 cv
336.3 66.601 337.234 65.3 338.651 65.3 cv
1 /0 /CSD get_res sepcs
1 sep
f
357.165 161.008 mo
470.551 161.008 li
470.551 87.96 li
357.165 87.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
362.053 161.008 mo
362.053 164.266 li
473.809 164.266 li
473.809 92.846 li
470.551 92.846 li
470.551 161.008 li
ef
357.165 161.008 mo
470.551 161.008 li
470.551 87.96 li
357.165 87.96 li
cp
@
386.6 94.7 mo
395.3 94.7 li
395.3 105.4 li
386.6 105.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[8.7 0 0 -10.7 386.6 289.3 ]ct
<<
/T 1
/W 87 
/H 107 
/M[87 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!<<6!rrDur!!!,urrDin!!!,urrDin!!!,urri)s!WW?"rri)s"onc&rrhfk%KHV.rrhfk*WQ<>rrhfk
*WQ<>rrhfk4ob]^rrhfk4ob]^rrh6[IK0KKrs&N'huJ3+"8i*$huJ3+"8i*$huJ3+"8i*$huJ3+"8i*$
huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*#huN`V!!E,u
"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u
"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E0!"ol@<rW!&trrg+<rW!&trrg+<rW!&trrg+<rW!&trrdiQrW!&t
rrdiQrW!&trr`<(rW!&urrrB%"9&9&r;Qs"!!E3#"8r0&qu@!$!!E0!"n2KsrW!&urrp1<&,lP2rVm$"
!!",?p](=ZrqHHoJ,]3C!WW/p!!39&rqQNq&-)Y)!!5CbrqQNq+92?9!!3E*rqQNq"98Aq!!3-!q#CNt
J,TEMrVm*"!!#7_!!E0!"i(*[rW!&urrqll&,lP2r;Qru!!iK'"8r0&rW!'"!!E,u"98Q'!!E,u"FpOP
!!E,u"FpOP!!E,u"Mb$:!!E,u"Mb$:!!E,u"lKB0!!E9!rrh6[IK0KIrrh6[IK0KIrrhfkIK0KIrrhfk
4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrDNj
!'UAbqu6fg!'UAbqu6fW!'UAbqu6fW!'UAbqu6fW!'UAbqu6fW!.FnMqu6f7!.FnMqu6f7!.FnMqu6eL
!.FnMqu6d!!<)s#qu6d!!<)s#r;R$$!!3'!"98E#rrr<#!WE'$r;Qri!!3'!"8r0&^]4K9!!E3""T/6"
#QFJu!=/W!!!*W0p](=:rqHHo5Q:EX!WW/p!!33$rqQNq#QOf!!!*W1!<2co!e:7Lq>^U"s8W)p!!@`N
s8IN~>

%%EndBinary
grestore
np
f
396.4 97.5 mo
403.4 97.5 li
403.4 105.7 li
396.4 105.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 396.4 286.5 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
403.7 94.7 mo
407.8 94.7 li
407.8 105.4 li
403.7 105.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4.1 0 0 -10.7 403.7 289.3 ]ct
<<
/T 1
/W 41 
/H 107 
/M[41 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
"98B$&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu
&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,uS1rr<T.rrE*1rVllu&,lM/!"]&.
!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/
rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1
rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVlit
!"]&.!<<Z/rrE*1rVm!#&-)\-r;ZkJr;?TrJ,K6F!It%G!!.TIr;ZkJr;?TrJ,K6F!It%G!!.TIr;ZkJ
r;?TuJ,fNK&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1
rVllu&,lM/!"]&.!<<Z/rrE*)rVllu"9&6#!!3&u!e:9#rr4d)!!%NKs*t(LJ,fPa!!%NKs1eU7J,fQ,
!!%NKs6p!gJ,fQD!!%NKs82isJ,fQJ!!%NJrrKn8!.Y"J!r)cqJ,~>

%%EndBinary
grestore
np
f
408.6 97.5 mo
415.6 97.5 li
415.6 105.7 li
408.6 105.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 408.6 286.5 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
416.7 97.5 mo
420.9 97.5 li
420.9 105.4 li
416.7 105.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4.2 0 0 -7.9 416.7 286.5 ]ct
<<
/T 1
/W 42 
/H 79 
/M[42 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnms8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZ
s8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0
IK4lts1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gD
s1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0
IXhCt_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[mos8Tn0!'gM`_"[mos8Tn0!'gM`_"[mos8Tn0!$D7@
_"[mOs8Tn0!"],0_"[m?s8Tn0!!iQ(_"[m7s8Tn0!!E9$_"[m1s8Tn0!!*'!_"[m0J,d=Z!!#7`_"[m0
&J+oWp],gHs1nC0^]6U7p]/,/!!;oqi;N]Xp]0g_!!;oqq#16pp]1*g!!;oqr;HZtp]1<m!!;oqs8E!1
p]1>E!!)cos53kWp]1?`!!*#u!rN#urVlnK!.Y~>

%%EndBinary
grestore
np
f
421.6 97.5 mo
428.6 97.5 li
428.6 105.7 li
421.6 105.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 421.6 286.5 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
429.8 97.5 mo
436.4 97.5 li
436.4 105.4 li
429.8 105.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.6 0 0 -7.9 429.8 286.5 ]ct
<<
/T 1
/W 66 
/H 79 
/M[66 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!r)bFrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#
p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HMqu?`l
!<@WKrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr3-!!!)co
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)co
J,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p]*PX
rrr<#!;HOYrr30"!!)co5Q:Zdqu?`l!'gJ_"oJ?#p])E8rrr<#!;HO9rr30"!!)co+9)9Equ?`l!"])7
s8Vus!;HO)rr3/s!!)co#QF`,p](<h!!E6#"o&&tp](Eqrrqll!;HNprr3/k!!)co!<3!RhuEcP!!%NK
s1eV"p](:9s8RTL5kk>0&-)Y0!'p;Z^]XW7!!'h0!5JSahuEbmp]07N!!E><p]0g^!!WJ>p]1'h!!WE'
"2O[3r;?Tu#Jg*7rqug"&&@r?s8;p$+2IXOs1nU6"[Bft!<;!V!"/bAp]1?h!!!-$_#F?>rVup/s1nC0
J,]HLqu?_I~>

%%EndBinary
grestore
np
f
437.9 97.5 mo
444.4 97.5 li
444.4 105.7 li
437.9 105.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.5 0 0 -8.2 437.9 286.5 ]ct
<<
/T 1
/W 65 
/H 82 
/M[65 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3#g!<3!5JH,ZK!!!9(s+(.Lp](9ps8RWLs1nU6"[E$;s8RWK!!FDDJH,WI!!EQ,JH,QG!!EE(JH,-;
!!E?&JH+R*!!E7Os1nO4"+Pk$JG]Bf5Cica!!iE%!$?ak!!#7`^]4mqrVurus6p"!JGpMg"98Dr!!e&P
!!iQ(qu?tPp](j)s8E!#JG9*drr3-%"+]k@5Q:ZdJ,t2i!.Y"J"b6W(huJ9+rrg+<JD^G+rrg+;JD^G+
rrh6[JA;3arrh6[JA;3arrh6[JA;9crrhfkJA;9crrhfk!.Y1Mrrhfk!.Y=Qrrhfk!.Y=OrrR_$#Q+N&
J:In%rrR]N#Q+N&J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,W
rr[cO&-)S-!e:7]qu6_J!"\u,!e:7]qu6_J!"\u,!e:7]qu6_JJ-YuO!e>e+qu6_JJ-YuO!e>e+qu6_J
J-YuO!e>e'qu6_J^]XQ8"RlDA^]XQ8#2fK3^]XW:#64_]!._icrVm#Y!.`u.rVm#Y!.`u-rVm#9!J').
rVm&:!J'Y>J,]HO^]AuT!.Y"J"b6W(p]*PXrriB)JG9*drr4eT"+^:L&-)\/!!@cL!!iQ(qu?tPrW!'#
s7cR!JH#TLs8V!W%tOZ[!'gL6!"XV[J,fiP"TSNEJH*F_!!=<ns5<eT"$_>9nGE7gIt7Roqu?j!JH,QG
!!EE(JH,ZJ!!NW-JH,Y"rW!*4s+(.Li;N]a5Q?96s7cQo!WW1Mrr3-%!!iQ(JH#QLn,WIf!.]S~>

%%EndBinary
grestore
np
f
445.3 97.5 mo
452.3 97.5 li
452.3 105.7 li
445.3 105.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 445.3 286.5 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
457.5 94.7 mo
468.1 94.7 li
468.1 105.4 li
457.5 105.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[10.6 0 0 -10.7 457.5 289.3 ]ct
<<
/T 1
/W 106 
/H 107 
/M[106 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!rN$_rr3"L!<3!%qu?`p!'gJ_rrE&u"oJ?#quAt\s8N)urrr<#!;lg]rr5^n!.Y%Kqu?`p!'gM`rVuqJ
s8Vus!;lg]s8W&u!.Y%Kqu?`p!'gM`rVup_s8Vus!;lg]s8Vus!'gM`qu?`p!'gM`qu?^]s8Vus!;q9G
5QCc]!!",@s82isquAt]s7cQo+92B=!!)os5QCcY!!",@s82isquAt]s7cQo&-)\-!!)os5QCcQ!!!Q0
s82isquAt]s6p#=&-)\-!!)os5QCcQ!.Y=Ss82isquAt]s53p.#QOi%!!)os5QCcA!Pes?s82isquD11
s8Tk8^]XW:qu?`p!'gM`^]V@Ss8Vus!;lg]s8Tk:huj#Zqu?`p!'gM`J-4^1s8Vus!;lg]s8RTShuWlX
qu?`p!'gM`J-YQEs8Vus!;lg]s8N'(n,WLgqu?`p!'gM`!"\Q!s8Vus!;lg]s8N'0p]1?oqu?`p!'br4
rW!K(!.Y%H!!)os5QC]_+8>hcs82isquAt]rW"&8!'gM]!!)os5QCW]+8c+'s82isquAt]quAtZ!'gM]
!!)os5QCW]5PtL's82isquAt]p]*PX!$D7=!!)os5QCKYJ,TEis82isquAt]p],gC!"],-!!)os5Q?3%
!.Y"K&-)P-!;lg]s6p$grr<T0qu?`p!'gMQ!<<'!#QO]%!;lg]s53nWs*t@Squ?`p!'gMA!WW1M#QO]%
!;lg]s53qXs*t4Oqu?`p!'gM!!WW28"989!!;lg]s1ea:s1ea:qu?`p!'gM!"98D:!WW&t!;lg]s+#P#
s8V!Xs82isquAt]J-Z,ShuWlU!!)os5Q:]gs8V!Ws82isquAt]!!iQ(n,WLd!!)os5Q:]os8VQgs82is
quAt\!"],0n,Rt9!!)os5Q1Wns8VioJ,B9HquAt\!$D7@p],gA!!)os5PtL's8Vio5PtK]quAtZ!$>/>
s82j]qu?`p!'gA]5QCc]!'gA]!;lg]p]*PYs82j=qu?`p!'g5Y5QCc_!$D+=!;lg]p],gDs8E!?qu?`p
!'frQJ,fQJ!"\u-!;lg]n,Rt;rs8Z9qu?`p!'frQrVm0(&,ZD-quAt>!<)p*!!iE%!;lg]huWlX$ig6W
#Q+Q%quAt>!WE$)J-YuP!;lg]^]FE6$%N-U!!)os5JRC"rs?ICqu?`p!'e7$rVm2>"8i-!quAs3"9&6+
^]F?5!;lg]J-Z&Q$/bj^!!)os5Ca";rs@Taqu?`p!'^GgrVm2^!;lfsquAq]&,uS9s6p$d!!)os56)5m
rsA/pHiO0E!'UAnrVm2n!.4bHquAn\+8u3Gp],[A!;lg\!$D1>$2=K_!!)os49-K%rsAH#49,BZ!'C6G
rVm3%!'C5]quA\V5Q1Tgqu@]:!;lgV!'gG^$2acC!!)os2unI,rsAZ))up!:!&+D&rVm3'!"8i-quADN
J,TBQrW!?,!;lgN!;ld$!"8i-qu@i>qu6m$"98H"!$D:=rs&N,!!)os+9DB>#ClpW!;lfs!W2lsJGoNN
qu?]tqu6YHrW!&u!!!,urrBk6!!E-!!!E,u!5SR6"8i-!"8i)u_#=<9qu?^%qu6ZSrW!&u!!!9$rrD!V
!!E-!!!iE$!9!hV"8i-!&,ZA,nGWCiqu?^-qu6ZcrW!&u!!!Q,rrDQf!!E-!!$D+<!;QNn"8i-!+8c'<
q#16qqu?^=qu6ZkrW!&u!!#7\rrDur!!E-!!'gA\!;ufr"8i-!5PtH\r;HZuqu?_Hqu6ZqrW!&u!!%NG
rrE&t!.Y~>

%%EndBinary
grestore
np
f
469.7 94.5 mo
479.1 94.5 li
479.1 105.7 li
469.7 105.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[9.4 0 0 -11.2 469.7 289.5 ]ct
<<
/T 1
/W 94 
/H 112 
/M[94 0 0 -112 0 112 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
r;Qi6!'gJ_!;ufq!;QNnrr2urrVlkJrW!$Bs8W#rrrE&s!!<?'s8;lr!:]md!rr;urr2u6qu?d_s8;lr
!.atI"V:Y2s8W)q!!NW-r;ZfpqZ$d#s8;osq"asns8;osnGN@d!%NKrs8V!W!!iOS!!#7]s8Tk7!<<)o
!!",=s8RTL"98E#!!!Q-s8N'!&,uS7J,g,Xs8Duu5Q:ZfhuF#[s82isrVm,l!!E0!p](?nrs/H%!W;um
!!E3"#Q=](r;Z6d#Q4T+!!)rshuF;crrdiPr;Y[U!$D.=#(Q]$s1eV!r;Qu:!.=fs!.XqH"lKACs*t+H
rrq<\4T>B]qu6ih!'L8]!W2m#n,OI.!!E,u"o&';rW!&trrr/t*<#pCqu6ip!"Ac*#Q+N)qu@0'!"\u,
"oJ?/qu@9)rrr<#"S_s-qu6j!!!N&s+8c'ArW!)r!$D+<"o\K)n,OR-rrrB%"RlCUqu6j!!!)Kg5PkB_
!!)Kg5PkB_!!(pW5PkB_!!(pWJ,90K!!(pWJ,fBF"8q'WJ,0*Hr87R)q>UQphuJ9&rr`2W!.XhE!rTh6
q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En
^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6rVufq!rTh6q#:HohuJ9&rr`2W!.XhE"8q'WJ,0*H
r87R)q>UQphuJ9&rr`2W!.XhE"8qWg5Pb<]r9s\Nq>UQpn,P]KrrN&e!<>@[rr`2o!$D%:"8qoo+8Pp=
r:g76qu6it!"AW&&,ZA1qu@0'!"\u,"oJ?/qu@9)rrr/t*<#pCqu6ip!$(t<#Q+N)p])<5!!E,u"o&'[
rr<0!rs&Mm!'L8]!W2m#n,PTNJ-#QI"lKACs*t+Hrs%B]I/gt^J,K<N^]8c^^]8l^rs$7=r;Y[T5Q(Nc
J,oNIn,OR.rs!uSr;Z6d&,cG3!!3#tp](Qtrs/N'"8r2s!!E3"#5eH'r;ZZp!!)ut#l"B)r;Z`r!.Y"J
#iG[fr;Zcs!$D4?,(KY(r;ZeI!!iQ(rVup?r;Zf4!!*'!n,NGQr;ZfT!!!Q0rW!(Nr;Zfdq>^YJr;Zfl
q>^Zur;ZfpqZ$["s8;lrqZ$[&s8;lr!.atI!"T,1r;Q]ri;<QV5QCZ\rrDil!!<3#r;Q]rrqug!"98E!
rVll5rW!$2s8W#qrrDin!<2uur;?QrhuFkurrDtI~>

%%EndBinary
grestore
np
f
361.417 108.656 mo
381.26 108.656 li
381.26 91.611 li
361.417 91.611 li
cp
.0639048 0 .996094 0 cmyk
f
1.5 lw
361.417 91.611 mo
381.26 91.611 li
@
361.417 108.656 mo
381.26 108.656 li
381.26 91.611 li
@
361.417 108.656 mo
361.417 91.611 li
@
475.4 123.8 mo
482.7 123.8 li
482.7 127.4 li
475.4 127.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -3.6 475.4 260.2 ]ct
<<
/T 1
/W 73 
/H 36 
/M[73 0 0 -36 0 36 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!5SC1!Iqo\!!.Sbq#CGF_"ds2J&(j[!Iqo\!!.Sbq#CGF_"ds2J&(j[!Iqo\!!%N2s+::JrrBk1!!.Sb
q#CGF_"ds2J&(j[!Iqo\!!.Sbq#CGF_"ds2J&(j[!Iqo\!!.Sbq#CDEJ,~>

%%EndBinary
grestore
np
f
483.9 118.6 mo
491 118.6 li
491 129 li
483.9 129 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.1 0 0 -10.4 483.9 265.4 ]ct
<<
/T 1
/W 71 
/H 104 
/M[71 0 0 -104 0 104 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
"98?##Q=Z*rr;uu#Q=Z*rr;uu#Q=Z*rr;uu"9&6&rr;uu"9&6&rr<"K"9&6&rr<"K"9&6&rr<"K"9&6&
rr<"K!WE$$rr<#6!WE$$rr<#6!WE$$rr<#6!WE$$rr<#6!<)p#rr<#V!<)ourr3'"huN`U"TJH$huN`U
"oeQ%huJ9+rrrE%s6p#<rr30$s8VQgJ,]HOrr<#f!.Y"J"oeQ%p]*PXrrrE%s7cRYrr30$s8Vio5Q:Zd
rr<#r!$D4?"oeQ%qu@i<rrrE%s82j=rr30$s8W&u+9)9Drr<#t!"])/!ri6"!r`01rr2utrr3!!&,uS/
rr2ou!!iN'!<2ut!<<B(rrE&trrIWTrr2utrr3"L"9/<#rr2ou^]XT9!<2ut!Pea8rrE&trrKn9rr2ut
rr3#W!WN*!rr2ouhuNcV!<2ut!Up*grrE&trrqllJ,fQJrr3/s!.Y%Krr2p$p],gDs8N#t"o&'^s8W)t
rrr<#5QCc_rr30"!$D7@rr2p$rW"&?s8N#t"o\K4s8W)srr`<4s8W)srr`<4s8W)srrdiWs8W)srrdiW
s8W)srrg+>s8W)srrg+>s8W)srrh6\s8W)srrh6\s8W)srrhfks8W)srri)ss8W)srri)sJ,fNHrri6"
5QC`]rri6"5QC`]rri<$+92?=rri<$+92?<rrW63s8Mrr"+Up^rqucuJ-Z,Rr;Ql7#QOf$rr^%=s8Mrr
"5j4[rqucun,`Rgr;Qlg!<<&rrr`#rs8Mrr"8DkGrqucuquAt\r;Qlu!'gJ\rr`6#+9)0;!WWc1qu6_J
&,uJ+!e:OTqu6`5"9/2t!oO1[qu6`U!WMur!q63hqu6`m!<2lq!r)bEqu6`q!'^;[!r`0`qu6`s!$;":
!<<W+rrIWSqYpW4#/L'8!<U(4!!'h1!!'h1!!'h1!!'h1!!'h1!!'h3!!3-#_"ds1_"ds1_"ds1_"ds1
_"dt\~>

%%EndBinary
grestore
np
f
495.4 118.3 mo
504.4 118.3 li
504.4 129 li
495.4 129 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[9 0 0 -10.7 495.4 265.7 ]ct
<<
/T 1
/W 90 
/H 107 
/M[90 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
r;QeJ!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E
!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!W)iqrrIWNp\t8E!VcTpJ-#EE!It4F
rrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTrJ-#]Mq>UJG!VcTpJ-#EE!It4FrrIWNp\t8E!VcTp
J-#EE!It4FrrIWNp\t8E!VcTpJ-#HF!rmcOp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4F
rrIWNp\t8E!VcTpJ-#WKqu6\I!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTp
J-#EE!.Y%Mp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#QIrVlnK
!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!e:=Oq#:AF!VcTpJ-#EE
!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#KG"98CO!W;rtr:^0l5Q(6U!C-MV!!,=^
pAb4Yr:^0l5Q(6U!C-MV!!,=^pAb4Yr:^0l5Q(9V!WYI_pAb1XJ,~>

%%EndBinary
grestore
np
f
505.1 121.1 mo
512.1 121.1 li
512.1 129.3 li
505.1 129.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 505.1 262.9 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
513.3 118.3 mo
522.2 118.3 li
522.2 129 li
513.3 129 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[8.9 0 0 -10.7 513.3 265.7 ]ct
<<
/T 1
/W 89 
/H 107 
/M[89 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVlrs!!iK&!.b%J!r)a#rVlkJrVlro!!iK&!.b%J!r)`trVlkJrVlrg!!E3"!.b%J!q60lrVlkJrVlrW
!!3&u!.b%J!oO%ZrVlkJrVlrW!!3&u!.b%J!l+d9rVlkJrVlr7!!)ut!.b%J!l+d9rVlkJrVltM!!%NJ
rr@TJrr[cO!.Y"J!.b%J"+U@O5Q:Z_JGoNI!!#7_rr@TJs8Duu5Q:Z_JGoKM!!E9Drr2tKrr3-#!!E9D
rr2tKrr3-#!"8iLrr2tKrr3-!!"Ju>rr3%Ms8N9&qu@3,&,uS/JH#QOqu@c<&,uS/JH#QOp])B9#QF`'
JH#QOp])B9#QF`'JH#QOp]*MY#QF`'JH#QOn,P\'"9/<#JH#QOn,P\'"9/<#JH#QOn,Rrg"9/<#JH#QO
huJ8B!WN*!JH#QOhuJ8B!WN*!JH#QPhuNem!WN6$s+(+K"Mb$;huNcV!.b(K"Mb$;huNcV!.b(K"FpOQ
huNcV!.b(K#_2sUn,Rt<s+(+K#_3$Wn,Rt<s+(+K#QOu,n,Rt<s+(+K#QOu,p]*PYs+(+K,QJ)Lp]*PY
s+(.LrW!3'p])E9s+(.LrW!3'qu@i=s+(.LrW%BXs82j=s8RWLs82j-s82j-s8RWLs82j-s8E!/s8RWL
s7cR9s8E!/s8RWLs7cR9s8E!'s8RWLs7cR9s8N'(s8RWLs6p"Qs8N'(s8RWLs6p"Qs8N'$s8RWLs6p"Q
s8RTOs8RWLs53m,s8RTOs8RWLs53m,s8RTMs8NX\s8V!WJ,fPa!WW1Ms8Tk7rr38>!WW1Ms8Tk7rr38>
!<<(Ls8Tk7rr38^!<<(Ls8RTMrr38^!<<(Ls8RTMrr38^!.Y$!s8N'"rr38n!.Y$!s8N'$rr38n!.Y$!
s8N'$rr38n!'gL6s8E!'rr3?#!'gL6s8E!'s8NE*p]*PYJH,TK#QF`/p])E9JH,NI&,uS7p])E9JH,NI
&,uS7qu@9-JH,NI&,uS7qu@9-JH,BE+9)9Gqu@9-JH,BE+9)9GrW!3'JH,BE+9)9GrW!3'JH,*=5Q:Zg
rW!3'JH,*=5Q1Te!!E7Os53lArVm!#"93oO!oO'.rVm*&"93oOhuJ9*rs+&Ts+(-b!.XtI#(QaSJH*Cb
r;QtO!WR]M^]=<4#/C6=JH(-"r;Qu:!<7TLJ-#TJ#/C6=JH(-#r;QuZ!.TP!!!3#t#2fK2JH#TOr;QuZ
!.TOu!!E0!#4MUWJGoNNr;Quj!'c#5!!iH%#4MUWJG]BPr;Qur!$?ah!"]#-#5A0?JG]BXr;Qur!"XVT
!"]#-#5eH3JG9*dr;R!!!"XVT!$D.=#5eH+JFEO\r;R!#!!e&D!'gD]#6"T-JFEP'r;R!#!!@c0!'gA\
"TSXThuJ9(rriB)JA;/7qu6g"!J%rcJ,B6KJ,t29!;c]uJ,t1N!;c]uJ,k+M!;c]u^]8n8!W)g!^]8lb
!W)fr_#=<6!W)fri;N]V"8`$!huEb-~>

%%EndBinary
grestore
np
f
468.1 121.1 mo
474.3 121.1 li
474.3 129.3 li
468.1 129.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.2 0 0 -8.2 468.1 262.9 ]ct
<<
/T 1
/W 62 
/H 82 
/M[62 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
&c_n1!!E9$r;Zf4!!",@r;Zcq!!EE(r;Z9b!!E9!s5<hU"$c_`JGfHL&,cJ*!!3E'rql`t!W;lm!!3#m
qZ$YEnG<25I..+95PtK]4Q$2As8RTL*8gf-s8VQg*5DP=s8Vio%);jms8W&u!XsSZrVls""FpOOrrW6(
J-#WK"+UN)"9&6%J,k*%rVlu8!!!-"rr^%:!!E3""2Fm:#Q=Z)^]4?>rVlu8!!!9&rrKn8qu6\I!;lcs
J,oKHrrDus!r`0&r;Qir!!N6"!:U!h"T89$^]4N9rr`6#!"Ai+"5j.Z%0$8,rr)lt*<,s<_#=<94TGH\
r;ZqIs8V$U!!<)us8;p"!W;uqr;Zp%r;Z9b!!<c0s1nR5"$c_`JGoNN!WW)tr;Zp1s8;lp!!@`Nr;?No
":+u,r:p6k!<39's8;?d!"])/"8qWg!<)p"r87PWrVluthuFktrr`2W!'gG^"8oq7J,TBKr4i=1rrW,6
!W;s!r4i@2rrW,6"8r0#r4iF6rri6"*5D[Urri6"*5D[Urri6"*5D[Urri6"*5D[Urs&5u*5DUTrrrGt
!$'ntrr3,r!$'nsrr4M<!'K0>J,fQ,!'K`N5QCc!!'K`N+92@k!.=PA"98?#!.=PA!.XJ<!;ucl!!3#s
qu?d!r;ZZp!sAK$JGfHM#Q4V;r;Zp1r;Y^R!!=>@s7lNm"$c_`rqug"s8;osJ.qt`"98<!s6p!g+929=
s8E!#s8W"I~>

%%EndBinary
grestore
np
f
458.594 120.899 mo
464.295 129.859 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lw
464.295 129.859 mo
465.925 117.641 li
@
465.925 117.641 mo
474.885 117.641 li
@
386.6 118.3 mo
395.1 118.3 li
395.1 129 li
386.6 129 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[8.5 0 0 -10.7 386.6 265.7 ]ct
<<
/T 1
/W 85 
/H 107 
/M[85 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
qZ-Tp!;QEk!!iN'!;QBj"+U@Nq"asm+92B9q>^U&s8Vlj!!<9%s7lBi!e:7Fq#CI\s7lBi![%I;q#CI$
s7lBi"9\]!!!E6#!;H`u!!3,p!!E3"#/C3=s7cQrrVm)k!!%ND!!E3"#5eH$J+s!Gr;Qp#!'g5Y"8r0&
^]5JO!!E0!"lK@kp](Eorrqll&,6,,r;Qrq!!i9!"8r0&qu?io!!E0!"o\K(p](Eorri<$!VcWp"8i*$
!!2ip"8i*$J,o?E"8i*$J,o?E"8i*$^]=-0"8i*$^]8TZ"8i*$huJ!%"8i*$huJ!%"8i*$n,PEJ"8i*$
n,PEJ"8i*$n,PEJ"8i*$p])-2"8r0&s7cR2!!E,u"S_s6!!E,u"S_s6!!E,u"T/6*!!E,u"T/6*!!E,u
"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u
!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u
!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u
"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"oJ?+!!E9!rri6"#QOu(rri)s(]X[8
rri)s(]X[8rri)s(]X[8rrhfk(]X[8rrhfk2uj'Xrrhfk2uj'Xrrhfk2uj'Xrrh6[GQ7jCrrh6[GQ7jC
rrg+;GQ7jCrrBh:!;HNrqu6eL!;HNrqu6eL!;HNrqu6d!!VcWsr;Qs"!!2ip"8r0&rW!&q!!E0!"oJ?&
p](Eorrr/t#P\9$r;Qri!"\i)"8r0&huF;_!!E0!"i(*[p](Eors&N(5PP3\s8NB)s82is5PP3\rVm)k
!!%ND!!E3"#/C3=s7cQrrr3/s!!!'"q"Xmk"98/l!!3E*q"Xmk&-)G#!!5Cbq"XmkJ,f<?!!<9%s7lEj
!sel+q"asl+92?@q"asmJ,fQDqZ$U$rr2unqZ-Tp!;M'~>

%%EndBinary
grestore
np
f
396.4 121.1 mo
403.7 121.1 li
403.7 129.3 li
396.4 129.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 396.4 262.9 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
403.7 119.2 mo
407.7 119.2 li
407.7 129.3 li
403.7 129.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 403.7 264.8 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
408.6 121.1 mo
415.9 121.1 li
415.9 129.3 li
408.6 129.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 408.6 262.9 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
420.8 118.6 mo
427.8 118.6 li
427.8 129 li
420.8 129 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -10.4 420.8 265.4 ]ct
<<
/T 1
/W 70 
/H 104 
/M[70 0 0 -104 0 104 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
q#CBtq#CBtq#CBtq#CBtq#CBtq#CEuJGK6H"G$=K!<drL!!*4Qq>^O!JGK6H"G$=K!<drL!!3;=!W2lt
r4i:5qu6`q^]F?4!rTh7qu6`qhuNZS!rUsVqu6crhuJ9)rr`2g!.XqH"8qWg5Q(N`r:g7Vr;Qlsp])E6
rr`2s!"]#-"8r&s#Q4T(r;HZur;Qlsrr<)trrW,u!!!#srri9"J,hh4rri9"^]5JTrri9"huF#\rri9"
n,NRhrri9"p](<mrrr?#qu?^]rr30"s8Duu+9)9Dr;Zcs!!iN'"oSE#J,fWLs!7OBs53kWJ,fQHs8VQg
!$D7@r;Zfp!!!9(s8;osrVup!s8W#rrrmoQ!<<)srr3/;!!#7`r;Q^"n,NG!s8;lr"oJ?##QO`#rr`<%
!WW)rrrdiP!<;uqrrh6[!.XqFrri)s!'gD[rri<$!"]#*rr[cO#Q4N""2Fm=r;?Qsn,NRgr;Qls!!3#q
rr`6#!;ufq"TSK%!.=\D!e:8uqu6`5!'L/Y!oO%uqu6`e!$(n9!r)a8qu6`q!"Ac)!rN$,qu6`s!!N3!
!r`0&qYpQr"T&-#!!L(<r;Qj!!5JX5rr[cO^]FH7"onUQ!5JU4rr[cOhuN]T"+UC0!;uj!J,nL-r;QkL
!8mkTrr[cOhuN]T"FpL1!.XtI"FpL1!.XtI"98Gk!.XtI"98So!.XtI"98So!'gJ_"o\K)n,P]PrrrB%
"S_s=rr30"!"AW&+9)9Dqu@0#!"])/"o&'+qu@!$rrqll*;fd=rr3/[!$(t<!WN*&^]6Lr!!*#u*rl:'
rr<$`s8DuuI/e]s&-)D)!;ukI!!*%L!!3#t_#+07!W;uUqu?g$r;Z9a!!<K(s7lKl"!@I@r;6Ns5Q(Q]
qu?kLr;ZeIrW!*&s8;osi;N][#QO`%s8;ir![%I?rr3.P!!*'!r;Q^"qu@9-s87B~>

%%EndBinary
grestore
np
f
429 118.6 mo
435.9 118.6 li
435.9 129.3 li
429 129.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.9 0 0 -10.7 429 265.4 ]ct
<<
/T 1
/W 69 
/H 107 
/M[69 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!.Y%Kq#::!J,fiSs7lWor;H["s8Vlos7$!f"[E%^s8V$V!!OJEq#CAErW!'+s7lWor;Zs&s7lWn
r;Zs$s7lWlqu?j!q#C-e!!@`Gs7#pd*C'?!huElY!!",9s1eUFs1eUFq#A,05QC3Q&,?/EJ,k*!p](Qo
s*t.Ms8E!'q#:<ps8W&u"8Mlr"9/<(!!E#q!!iN'"b6XKrW!K.rrp1=q"t+&rr3/;!;QHl+9)9DhuNQI
!$D4?"lKB*p]*PXrrqllGk_8'rr3/k!-mu55Q:Zdn,PH;!.Y"J"o&'Wn,Rt;rri)s3:HnJJ,]HNp]*;3
!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@SL!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>
!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$%rVuqK"98?"!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L
!rr=O"8r0&!!%NOs8W)u!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!'e8rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rr30%rW!5>!WE$$
rW!5>!WE$$rW!5>!<)p#rW!5^!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p$qu@Sl!.Y"J"o&'7n,Rt;
rrr/t3:Hotrr3/s!''HJ5Q:Zdn,PHC!'gJ_"n2M:p]*PXrrqllGk_7\rr3/[!-nDA+9)9DhuNQM!"])/
"i(-5qu@9,rrp1<q#16urr3.P!VlWo"9/<]!!2lp!!3-"rW!&qrr<*"s8E!#q#>jEJ,f9D#Pe=L!'gMQ
!!i<!^]4oF^]4o?s53kXrVup?q#Bj]!!>I\s7#pd"$cS\q"t*oJ,''Aqu?j!q#CBm!!NK)q#CAErW!*,
s7lWo_#=<;&-)G)s7$!f"[E%^s8W#r!!<3#q#:9sJ,fiSs7lTn"o&(Is8VkE~>

%%EndBinary
grestore
np
f
437.9 118.6 mo
441.6 118.6 li
441.6 129 li
437.9 129 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.7 0 0 -10.4 437.9 265.4 ]ct
<<
/T 1
/W 37 
/H 104 
/M[37 0 0 -104 0 104 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L
#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3(N#QOf*
s*t@RrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFS
rrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrr@QL
#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(
J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrR]U_#=<7#Jg<=!=-F>
!!*>?rVus(_#=<7#Jg<=!=-F>!!*>?rVus(_#=<7#N5R],7"7a!!!9(qu?^%s8RTL#QOh^!!iQ(p](R!
s82j%s8W&u#QF`(!!iN'!<<B(rrIWTrr3"L#QF`(^^'l=!Pes>rrM$_rr3#W#QF`(i!98]!Up?nrrMTo
rr3#g#QF`(p]l<~>

%%EndBinary
grestore
np
f
445.3 118.6 mo
452.2 118.6 li
452.2 129.3 li
445.3 129.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.9 0 0 -10.7 445.3 265.4 ]ct
<<
/T 1
/W 69 
/H 107 
/M[69 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!.Y%Kq#::!J,fiSs7lWor;H["s8Vlos7$!f"[E%^s8V$V!!OJEq#CAErW!'+s7lWor;Zs&s7lWn
r;Zs$s7lWlqu?j!q#C-e!!@`Gs7#pd*C'?!huElY!!",9s1eUFs1eUFq#A,05QC3Q&,?/EJ,k*!p](Qo
s*t.Ms8E!'q#:<ps8W&u"8Mlr"9/<(!!E#q!!iN'"b6XKrW!K.rrp1=q"t+&rr3/;!;QHl+9)9DhuNQI
!$D4?"lKB*p]*PXrrqllGk_8'rr3/k!-mu55Q:Zdn,PH;!.Y"J"o&'Wn,Rt;rri)s3:HnJJ,]HNp]*;3
!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@SL!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>
!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$%rVuqK"98?"!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L
!rr=O"8r0&!!%NOs8W)u!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!'e8rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rr30%rW!5>!WE$$
rW!5>!WE$$rW!5>!<)p#rW!5^!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p$qu@Sl!.Y"J"o&'7n,Rt;
rrr/t3:Hotrr3/s!''HJ5Q:Zdn,PHC!'gJ_"n2M:p]*PXrrqllGk_7\rr3/[!-nDA+9)9DhuNQM!"])/
"i(-5qu@9,rrp1<q#16urr3.P!VlWo"9/<]!!2lp!!3-"rW!&qrr<*"s8E!#q#>jEJ,f9D#Pe=L!'gMQ
!!i<!^]4oF^]4o?s53kXrVup?q#Bj]!!>I\s7#pd"$cS\q"t*oJ,''Aqu?j!q#CBm!!NK)q#CAErW!*,
s7lWo_#=<;&-)G)s7$!f"[E%^s8W#r!!<3#q#:9sJ,fiSs7lTn"o&(Is8VkE~>

%%EndBinary
grestore
np
f
454.2 127.5 mo
455.7 127.5 li
455.7 131.2 li
454.2 131.2 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.5 0 0 -3.7 454.2 256.5 ]ct
<<
/T 1
/W 15 
/H 37 
/M[15 0 0 -37 0 37 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
8Ith%rr@NK56)c*&)[un#Q+i+"9/K'"9/K'!WN3#!WN3#JcC<$JcC<$JH,]N!<<-#!<<-#!<<-#!<<-#
!<<-#!<<-#!<<.N~>

%%EndBinary
grestore
np
f
1.5 lw
361.417 124.483 mo
381.26 124.483 li
1 /0 /CSD get_res sepcs
1 sep
@
371.339 131.788 mo
371.339 117.178 li
@
.75 lw
368.039 124.483 mo
368.039 120.083 374.639 120.083 374.639 124.483 cv
374.639 128.883 368.039 128.883 368.039 124.483 cv
cp
@
386.6 143.6 mo
388.2 143.6 li
388.2 154.3 li
386.6 154.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.6 0 0 -10.7 386.6 240.4 ]ct
<<
/T 1
/W 16 
/H 107 
/M[16 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
I_Ys!!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM
!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM
<WKo8^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M
^];.M^];.M^];.M^];.M^];.M^];.MJ,~>

%%EndBinary
grestore
np
f
389.9 146.4 mo
396.5 146.4 li
396.5 154.3 li
389.9 154.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.6 0 0 -7.9 389.9 237.6 ]ct
<<
/T 1
/W 66 
/H 79 
/M[66 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!r)bFrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#
p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HMqu?`l
!<@WKrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr3-!!!)co
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)co
J,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p]*PX
rrr<#!;HOYrr30"!!)co5Q:Zdqu?`l!'gJ_"oJ?#p])E8rrr<#!;HO9rr30"!!)co+9)9Equ?`l!"])7
s8Vus!;HO)rr3/s!!)co#QF`,p](<h!!E6#"o&&tp](Eqrrqll!;HNprr3/k!!)co!<3!RhuEcP!!%NK
s1eV"p](:9s8RTL5kk>0&-)Y0!'p;Z^]XW7!!'h0!5JSahuEbmp]07N!!E><p]0g^!!WJ>p]1'h!!WE'
"2O[3r;?Tu#Jg*7rqug"&&@r?s8;p$+2IXOs1nU6"[Bft!<;!V!"/bAp]1?h!!!-$_#F?>rVup/s1nC0
J,]HLqu?_I~>

%%EndBinary
grestore
np
f
398 149.7 mo
401.7 149.7 li
401.7 150.8 li
398 150.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.7 0 0 -1.1 398 234.3 ]ct
<<
/T 1
/W 37 
/H 11 
/M[37 0 0 -11 0 11 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~^]4?7#J^<>!!g:>!!!8>!!!!(^]4?7#J^<>!!g:>!!!8>!!!!(^]4?7#J^<>!!g:>!!!6~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
402.9 146.4 mo
409.1 146.4 li
409.1 154.6 li
402.9 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.2 0 0 -8.2 402.9 237.6 ]ct
<<
/T 1
/W 62 
/H 82 
/M[62 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
&c_n1!!E9$r;Zf4!!",@r;Zcq!!EE(r;Z9b!!E9!s5<hU"$c_`JGfHL&,cJ*!!3E'rql`t!W;lm!!3#m
qZ$YEnG<25I..+95PtK]4Q$2As8RTL*8gf-s8VQg*5DP=s8Vio%);jms8W&u!XsSZrVls""FpOOrrW6(
J-#WK"+UN)"9&6%J,k*%rVlu8!!!-"rr^%:!!E3""2Fm:#Q=Z)^]4?>rVlu8!!!9&rrKn8qu6\I!;lcs
J,oKHrrDus!r`0&r;Qir!!N6"!:U!h"T89$^]4N9rr`6#!"Ai+"5j.Z%0$8,rr)lt*<,s<_#=<94TGH\
r;ZqIs8V$U!!<)us8;p"!W;uqr;Zp%r;Z9b!!<c0s1nR5"$c_`JGoNN!WW)tr;Zp1s8;lp!!@`Nr;?No
":+u,r:p6k!<39's8;?d!"])/"8qWg!<)p"r87PWrVluthuFktrr`2W!'gG^"8oq7J,TBKr4i=1rrW,6
!W;s!r4i@2rrW,6"8r0#r4iF6rri6"*5D[Urri6"*5D[Urri6"*5D[Urri6"*5D[Urs&5u*5DUTrrrGt
!$'ntrr3,r!$'nsrr4M<!'K0>J,fQ,!'K`N5QCc!!'K`N+92@k!.=PA"98?#!.=PA!.XJ<!;ucl!!3#s
qu?d!r;ZZp!sAK$JGfHM#Q4V;r;Zp1r;Y^R!!=>@s7lNm"$c_`rqug"s8;osJ.qt`"98<!s6p!g+929=
s8E!#s8W"I~>

%%EndBinary
grestore
np
f
410.2 143.6 mo
411.9 143.6 li
411.9 154.3 li
410.2 154.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.7 0 0 -10.7 410.2 240.4 ]ct
<<
/T 1
/W 17 
/H 107 
/M[17 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnmp],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
B)mGV!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ*R(%s"F-IJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.TM~>

%%EndBinary
grestore
np
f
412.7 144.5 mo
416.7 144.5 li
416.7 154.6 li
412.7 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 412.7 239.5 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
417.6 146.6 mo
424.2 146.6 li
424.2 154.6 li
417.6 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.6 0 0 -8 417.6 237.4 ]ct
<<
/T 1
/W 66 
/H 80 
/M[66 0 0 -80 0 80 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
"TSN$!"])/"i10<huEcVrsQXBs*t(L5QCc!s8Mut"V:S4!<;in!!NK(!!*&grW!*&rVurui;EWYIK0BJ
_#4694obT_JGfHM*WQ3?qu?g/!!*&s!#c%A!<)ru&,ZD3!!)uu!.Y$!!WW5u!!3-"i;N]Vqud!%s8VTf
!!W9##QOi%rW!,s!"],0rr)m!p])E8s8E!"p])E8rrmoQ!;HOYrr3.P!!)co5Q:Zd^]4B0!'gJ_"lK@\
p],gCrrq<\!;HPDrr3/k!!)coJ,]HOn,NI`!.Y"J"n2Klp],gCrrr/t!;HPDrr3,r!!)co!.Y"J"o&&t
p],gCrrr/t!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)co
J,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HPqu?`l!.Y"Rs8Vus!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gC
rrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr36$!!)coJ,fNQs82isp],gC
rrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J
"oJ?#p],gCrrW)u!.Y~>

%%EndBinary
grestore
np
f
429.8 146.4 mo
436.3 146.4 li
436.3 154.6 li
429.8 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.5 0 0 -8.2 429.8 237.6 ]ct
<<
/T 1
/W 65 
/H 82 
/M[65 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3#g!<3!5JH,ZK!!!9(s+(.Lp](9ps8RWLs1nU6"[E$;s8RWK!!FDDJH,WI!!EQ,JH,QG!!EE(JH,-;
!!E?&JH+R*!!E7Os1nO4"+Pk$JG]Bf5Cica!!iE%!$?ak!!#7`^]4mqrVurus6p"!JGpMg"98Dr!!e&P
!!iQ(qu?tPp](j)s8E!#JG9*drr3-%"+]k@5Q:ZdJ,t2i!.Y"J"b6W(huJ9+rrg+<JD^G+rrg+;JD^G+
rrh6[JA;3arrh6[JA;3arrh6[JA;9crrhfkJA;9crrhfk!.Y1Mrrhfk!.Y=Qrrhfk!.Y=OrrR_$#Q+N&
J:In%rrR]N#Q+N&J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,W
rr[cO&-)S-!e:7]qu6_J!"\u,!e:7]qu6_J!"\u,!e:7]qu6_JJ-YuO!e>e+qu6_JJ-YuO!e>e+qu6_J
J-YuO!e>e'qu6_J^]XQ8"RlDA^]XQ8#2fK3^]XW:#64_]!._icrVm#Y!.`u.rVm#Y!.`u-rVm#9!J').
rVm&:!J'Y>J,]HO^]AuT!.Y"J"b6W(p]*PXrriB)JG9*drr4eT"+^:L&-)\/!!@cL!!iQ(qu?tPrW!'#
s7cR!JH#TLs8V!W%tOZ[!'gL6!"XV[J,fiP"TSNEJH*F_!!=<ns5<eT"$_>9nGE7gIt7Roqu?j!JH,QG
!!EE(JH,ZJ!!NW-JH,Y"rW!*4s+(.Li;N]a5Q?96s7cQo!WW1Mrr3-%!!iQ(JH#QLn,WIf!.]S~>

%%EndBinary
grestore
np
f
437.1 146.4 mo
444.4 146.4 li
444.4 154.6 li
437.1 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 437.1 237.6 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
445.3 143.6 mo
447 143.6 li
447 154.3 li
445.3 154.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.7 0 0 -10.7 445.3 240.4 ]ct
<<
/T 1
/W 17 
/H 107 
/M[17 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnmp],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
IK4lm!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbD
6@\b1J+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbD
J+s"nJ,~>

%%EndBinary
grestore
np
f
448.5 143.6 mo
450.2 143.6 li
450.2 154.3 li
448.5 154.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.7 0 0 -10.7 448.5 240.4 ]ct
<<
/T 1
/W 17 
/H 107 
/M[17 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnmp],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
B)mGV!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ*R(%s"F-IJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.TM~>

%%EndBinary
grestore
np
f
451.8 143.6 mo
458.9 143.6 li
458.9 154.6 li
451.8 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.1 0 0 -11 451.8 240.4 ]ct
<<
/T 1
/W 71 
/H 110 
/M[71 0 0 -110 0 110 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVm!#&-)\/rr3/k!!*'!rr2p'J,fQks8LpYrr)m$#QOe]"8r,u"U"f(huicQ!!N?$huhp9!!IfNhugdn
!!GOchueN.!!=>BhuilW!tYCh"8i->#QEW_!!*%L!!E5Y!!!9(n,NLghuEa!s82itrnn+`!.Y%K!!*#V
!!*#u"b6T%huEfWrrp1<Ic(2.rr3/[!']<@#QF`,n,PZ1!!iN'"o&'=huF;errr<#*oI#?rr30"!"Roe
+9)9DrW!Gd!'gJ_"o\K3huH"?rr`<+huH"?rr`<+huJ9*rrdiVhuJ9*rr[cUhuEb,rVltM!oO(Vrr^%<
huN]T"2Fur!;uj!^]NEor;Ql7!oO(Vrr^%<huWcU"5j1;!W;s"huM[9r;QlW!8mnUrr_0ZhuWcU"5j1;
!W;s"huM[9r;QlW!8mnUrrh6[huWlVrr_0ZhuWcU"5j1;!W;s"huM[9r;QlW!8mnUrr_0ZhuWcU"5j1;
!;uj!^]<9mr;Ql7!8mkTrr^%<huN]T"2Fur!;uj"^]NEoJ,TBMJ-+X/J,TBMJ-+X/J,TBNJ-+X/5QC`_
"98Ya!'gG^"98Ya!'gJ_"o\K+huFkurrrB%%c@=/rr30"!"Roe&,uS4qu@5b!!iN'"o&'=huF#]rrqll
*oI##rr3/[!']<@!WN*&^]6RV!!*#u,(KZBhuEb,s8N'!Ic(2++926=!<1mV!!iPn!!*#V!<<-""b6RR
rnmhT!!EE'huSB,!!EQ+huUXl!!Ei3huVd7!!FDChuW?G!!GOchuWWO!!IfNhuWiV!!NE'rnmhWrW"#F
s8LpWs1eU7+92>u!WVop!.Y%JhuWlX!!iQ(rnmhSrrW2X!W2lurnmhUrriB%rnmhSrrW2X!W2lurnmhS
rrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X
!W;s"s8LpWqu6`shuW`T!rh*Yqu6`shuW`T!rh*Yqu6`shuW`T!rh*Yqu6`shuW`T!rh*Yqu6`shuW`T
!rh*Yqu6ZqJ,~>

%%EndBinary
grestore
np
f
459.9 146.4 mo
464.1 146.4 li
464.1 154.3 li
459.9 154.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4.2 0 0 -7.9 459.9 237.6 ]ct
<<
/T 1
/W 42 
/H 79 
/M[42 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnms8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZ
s8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0
IK4lts1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gD
s1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0
IXhCt_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[mos8Tn0!'gM`_"[mos8Tn0!'gM`_"[mos8Tn0!$D7@
_"[mOs8Tn0!"],0_"[m?s8Tn0!!iQ(_"[m7s8Tn0!!E9$_"[m1s8Tn0!!*'!_"[m0J,d=Z!!#7`_"[m0
&J+oWp],gHs1nC0^]6U7p]/,/!!;oqi;N]Xp]0g_!!;oqq#16pp]1*g!!;oqr;HZtp]1<m!!;oqs8E!1
p]1>E!!)cos53kWp]1?`!!*#u!rN#urVlnK!.Y~>

%%EndBinary
grestore
np
f
464.8 146.4 mo
472.1 146.4 li
472.1 154.6 li
464.8 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 464.8 237.6 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
472.2 144.5 mo
476.2 144.5 li
476.2 154.6 li
472.2 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 472.2 239.5 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
477 146.4 mo
484 146.4 li
484 154.6 li
477 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 477 237.6 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
484.4 143.6 mo
491.9 143.6 li
491.9 154.6 li
484.4 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.5 0 0 -11 484.4 240.4 ]ct
<<
/T 1
/W 75 
/H 110 
/M[75 0 0 -110 0 110 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVlo6"9/<#i;W`\qu?^]s8V$Vrs%B]!"],0i;W`_J,fQOrr<'!s8Mrs"oeQ&s8W#q!!RiP!<<)gr;[!c
!!*'!i;EWZ%fcV0s1nR5"U>#-s8RWJ!!EN,!<<)s!##G7!<<'!!!iE%!<<-"rVup_s+((K#64T$!<<)W
rW!0&qu?j!s7lQn#64Gu#QOi%rW!0&n,O"!s8Mut"97ij+9)<>!!E8Z!'gJ_#(Q[Rs53m,rr3.P!!*&W
!<)p$^]4B7^]=?5"lK@\s1e[6rrq<\!<9h8rVm&j!!*%L"9&6(n,NIgJ-5iNrrqll!<7QSrVm&r!!*$!
#Q=Z+p](<o!!iK&"o&&trr<T.rrr<#!<3$0rVm'!!!*$!&,lM3qu?`s!"]&."oJ?#rW!K-rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rr`6#!<*!!+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW!K-
rrr<#!<)s/rVm'!!!*$!&,lM.qud!"rr<T.rrr<#!<3$0rVm'!!!*$!#Q=Z+p](<o!!iK&"o&&ts*t@Q
rrr/t!<7QOrVm&j!!*%L"9&6'n,NIgJ-#WK"n2Kls1e[6rrq<\!<9h7rVm&Z!!*&7!<)p%^]4B7huJ9+
rs+&S!<:sW5Q;#hs*t(Ls6p"1rr;rt#64/m&-)\/rW!0&p](R!s8;ir#64Gu"98DrrW!0&qu?`ss5<kV
#64Z&!'gL6rW!-%rr<$(r;?Wqs82j#!WW6#s+(%J"U4r,s8Tn5!!Ni4!<<)Wr;[!B!!*'!nGN=i4obT_
rrDuq!!RfO!<<)ur;Zou!!*#u#(Q[R"9&9#rr32\!!!Q/!!*#u#5eH$5Q1W_rVm&:"98?#!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]rrVuouqYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr
!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qu6curVurprrW0"!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]srVuqK~>

%%EndBinary
grestore
np
f
496.6 143.6 mo
504.1 143.6 li
504.1 154.6 li
496.6 154.6 li
cp
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.5 0 0 -11 496.6 240.4 ]ct
<<
/T 1
/W 75 
/H 110 
/M[75 0 0 -110 0 110 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVlo6"9/<#i;W`\qu?^]s8V$Vrs%B]!"],0i;W`_J,fQOrr<'!s8Mrs"oeQ&s8W#q!!RiP!<<)gr;[!c
!!*'!i;EWZ%fcV0s1nR5"U>#-s8RWJ!!EN,!<<)s!##G7!<<'!!!iE%!<<-"rVup_s+((K#64T$!<<)W
rW!0&qu?j!s7lQn#64Gu#QOi%rW!0&n,O"!s8Mut"97ij+9)<>!!E8Z!'gJ_#(Q[Rs53m,rr3.P!!*&W
!<)p$^]4B7^]=?5"lK@\s1e[6rrq<\!<9h8rVm&j!!*%L"9&6(n,NIgJ-5iNrrqll!<7QSrVm&r!!*$!
#Q=Z+p](<o!!iK&"o&&trr<T.rrr<#!<3$0rVm'!!!*$!&,lM3qu?`s!"]&."oJ?#rW!K-rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rr`6#!<*!!+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW!K-
rrr<#!<)s/rVm'!!!*$!&,lM.qud!"rr<T.rrr<#!<3$0rVm'!!!*$!#Q=Z+p](<o!!iK&"o&&ts*t@Q
rrr/t!<7QOrVm&j!!*%L"9&6'n,NIgJ-#WK"n2Kls1e[6rrq<\!<9h7rVm&Z!!*&7!<)p%^]4B7huJ9+
rs+&S!<:sW5Q;#hs*t(Ls6p"1rr;rt#64/m&-)\/rW!0&p](R!s8;ir#64Gu"98DrrW!0&qu?`ss5<kV
#64Z&!'gL6rW!-%rr<$(r;?Wqs82j#!WW6#s+(%J"U4r,s8Tn5!!Ni4!<<)Wr;[!B!!*'!nGN=i4obT_
rrDuq!!RfO!<<)ur;Zou!!*#u#(Q[R"9&9#rr32\!!!Q/!!*#u#5eH$5Q1W_rVm&:"98?#!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]rrVuouqYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr
!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qu6curVurprrW0"!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]srVuqK~>

%%EndBinary
grestore
np
f
505.6 146.4 mo
512.9 146.4 li
512.9 154.6 li
505.6 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 505.6 237.6 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
512.9 144.5 mo
516.9 144.5 li
516.9 154.6 li
512.9 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 512.9 239.5 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
517.8 146.4 mo
525.1 146.4 li
525.1 154.6 li
517.8 154.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 517.8 237.6 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
1.5 lw
361.417 148.833 mo
381.26 148.833 li
0 .990631 1 .000396735 cmyk
@
371.339 156.138 mo
371.339 141.528 li
@
368.039 148.833 mo
368.039 144.433 374.639 144.433 374.639 148.833 cv
374.639 153.233 368.039 153.233 368.039 148.833 cv
f
set_def_flat
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CAAAAA+MinionPro-Bold Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /CAAAAA+MinionPro-Bold def/FontInfo 7 dict dup begin/Notice (Copyright 1990, 1991, 1992, 1994, 1997, 1998, 2000, 2002, 2004 Adobe Systems Incorporated. All rights reserved. Minion is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Bold) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 49 /one putdup 71 /G putdup 86 /V putdup 91 /bracketleft putdup 93 /bracketright putdup 101 /e putdef/FontBBox {-319 -360 1684 1024} defendsystemdict begindup /Private16 dict dup begin/|- {def} def/| {put} def/BlueValues [-15 -0 442 458 475 488 623 636 650 665 691 703] def/OtherBlues [-244 -230] def/FamilyBlues [-15 -0 437 453 464 478 623 636 650 665 701 712] def/FamilyOtherBlues [-257 -240] def/BlueScale 0.046875 def/BlueFuzz 0 def/StdHW [41] def/StdVW [128] def/StemSnapH [41] def/StemSnapV [128] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/hyphen <1C60D8A8C9B8144F93554DDB887ED81074A6FC1D4FB31F8D15DFCCEAF8D83641> |-/one <1C60D8A8C9B7A73DC57EC15470A0BC9A3F0068C1DE983C4639F0DD89CAA1E95BDBDA4FABD03B28C187B731545DAE98DDB392C2DC50AAF388A70B4CE5EA0393062BB07AB1> |-/G <1C60D8A8C9B60AF0C9FFEAC580ACA2CBE7B22D83B382B81158DA8AFF6BD50F17CFB17967A399E0799E4F3DB51B612C0A37237070F73FC3B7740386932461B467456714D689CE14C7DDE5FE5790A5048FA929DB1CBBAB92B1222788B270471C6F4295EB262A865F9BB36EFDCAE0B12D190D17AAD6253FD1E6303689705328C81AC0D25097E7C087B9AFF935D4351556280A> |-/V <1C60D8A8C9B63ABFB316FBA7CD493601A83EF00093AE2598F4E841E95D4ADEC317AF79BD09BAC75540FCBA66283CC461E8D38A70659E865CD95A5E2ECB969618006AA92A16F957BD9B1806FC2F53BB3B7A62093FFAD2EE3C0803A48C6C044DC9AE91FC9E2A166282B898> |-/bracketleft <1C60D8A8C9B80D906E804558F54CA4921871819D27BB6722DD1E238D80B75597528666CC27BE1F183AA6C5646886CD03661D4060985F> |-/bracketright <1C60D8A8C9B80D906E804558F54CA49218564F07BB6AF5CDDBD1880A0470366220D7075D912CA4B5F143118EA69EC3E4142BAE73060E> |-/e <1C60D8A8C9B766CAB45806E230B95151A896C3DE55CE9E368FCDCDE807E52D8DD9EDA92AC0159F54C6467E5E1D72BC92E381289C22929422FA337E88486A787C76F380DD96D93FF26A42F9185453446FA86530210EBCF8F18CC3F2B669B65AE61FC989B6F44F1D508DF6822C81B0D051862A8D2EF6ABB14772E9B1518B6D1BC5D29C77BA9E3F28> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4A980A717C675DD749FCAD021C86E4A82A71450A60069401092D2766EC2A38FB4B27A723A2EF044B6549AE7BD225531C9BFBD9FDEC4C158C539EAA9E47425F43D2DE9C2FA717B7B8B00C9770334A66> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NEJEJY+MinionPro-Bold /CAAAAA+MinionPro-Bold findfont ct_VMDictPut/NEJEJY+MinionPro-Bold*1 [45{/.notdef}rp /hyphen 3{/.notdef}rp /one 21{/.notdef}rp /G 14{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 7{/.notdef}rp /e 154{/.notdef}rp]NEJEJY+MinionPro-Bold nfNEJEJY+MinionPro-Bold*1 [0 -17 -17 0 0 0 ]msf34.8316 73.7899 mo([GeV)[-5.96695 -12.3591 -7.42892 0 ]yshNEJEJY+MinionPro-Bold*1 [0 -11.22 -11.22 0 0 0 ]msf29.5616 35.9479 mo(-1)[-3.83719 0 ]yshNEJEJY+MinionPro-Bold*1 [0 -17 -17 0 0 0 ]msf34.8316 26.5009 mo(])shgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/NEJEJY+MinionPro-Bold*1 uf/NEJEJY+MinionPro-Bold uf/CAAAAA+MinionPro-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
