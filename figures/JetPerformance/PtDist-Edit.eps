%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: PtDist.pdf
%%Creator: (Adobe Acrobat 11.0.0)
%%For: gabrown
%%CreationDate: 16/01/2013, 12:54
%%BoundingBox: 0 0 567 384
%%HiResBoundingBox: 0 0 567 384
%%CropBox: 0 0 567 384
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 922 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="GPL Ghostscript 870 (epswrite)"
   xmp:CreateDate="2013-01-16T12:51:10Z"
   xmp:ModifyDate="2013-01-16T12:51:10Z"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 11.0 (Macintosh)"
   xmpMM:DocumentID="uuid:c27e5bc1-4a0e-7d41-92d3-dc716666c4a7"
   xmpMM:InstanceID="uuid:5e788ca6-e58c-eb40-823b-e0f0affbf205">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">untitled</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -384 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 384 li
567 384 li
567 0 li
cp
clp
.06 383.94 mo
566.929 383.94 li
566.929 0 li
.06 0 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
90.709 322.485 mo
538.583 322.485 li
538.583 18.754 li
90.709 18.754 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
90.709 322.485 mo
90.709 63.645 li
115.591 63.645 li
115.591 99.134 li
140.472 99.134 li
140.472 126.181 li
165.354 126.181 li
165.354 148.671 li
190.236 148.671 li
190.236 167.987 li
215.118 167.987 li
215.118 184.441 li
240 184.441 li
240 200.384 li
264.882 200.384 li
264.882 214.775 li
289.764 214.775 li
289.764 234.619 li
339.528 234.619 li
339.528 260.345 li
389.291 260.345 li
389.291 286.145 li
439.055 286.145 li
439.055 316.34 li
488.819 316.34 li
488.819 322.485 li
538.583 322.485 li
.0639048 0 .996094 0 cmyk
ef
1.5 lw
90.709 63.645 mo
115.591 63.645 li
115.591 99.134 li
140.472 99.134 li
140.472 126.181 li
165.354 126.181 li
165.354 148.671 li
190.236 148.671 li
190.236 167.987 li
215.118 167.987 li
215.118 184.441 li
240 184.441 li
240 200.384 li
264.882 200.384 li
264.882 214.775 li
289.764 214.775 li
289.764 234.619 li
339.528 234.619 li
339.528 260.345 li
389.291 260.345 li
389.291 286.145 li
439.055 286.145 li
439.055 316.34 li
488.819 316.34 li
488.819 322.485 li
538.583 322.485 li
@
.75 lw
90.709 322.485 mo
538.584 322.485 li
1 /0 /CSD get_res sepcs
1 sep
@
498.18 340.8 mo
494.8 340.8 li
494.8 357.7 li
498.18 357.7 li
498.18 356.399 li
496.301 356.399 li
496.301 342.1 li
498.18 342.1 li
f
511.401 347 mo
505.958 347 li
505.958 348.5 li
509.901 348.5 li
509.901 348.853 li
509.901 351.144 508.196 352.799 505.835 352.799 cv
504.521 352.799 503.332 352.318 502.568 351.48 cv
501.716 350.553 501.201 349.002 501.201 347.397 cv
501.201 344.206 503.02 342.1 505.767 342.1 cv
507.747 342.1 509.174 343.118 509.531 344.796 cv
511.227 344.796 li
510.761 342.131 508.756 340.6 505.766 340.6 cv
504.173 340.6 502.884 341.014 501.863 341.857 cv
500.359 343.112 499.5 345.138 499.5 347.487 cv
499.5 351.503 501.944 354.3 505.458 354.3 cv
507.224 354.3 508.633 353.641 509.901 352.234 cv
510.322 354 li
511.402 354 li
f
521.793 349.7 mo
521.793 348.257 521.685 347.392 521.419 346.688 cv
520.816 345.137 519.397 344.199 517.658 344.199 cv
515.068 344.199 513.4 346.213 513.4 349.304 cv
513.4 352.395 515.014 354.299 517.621 354.299 cv
519.749 354.299 521.221 353.085 521.596 351.05 cv
520.095 351.05 li
519.684 352.265 518.845 352.898 517.65 352.898 cv
516.704 352.898 515.9 352.472 515.401 351.69 cv
515.044 351.157 514.919 350.624 514.901 349.699 cv
cp
514.912 348.5 mo
515.037 346.742 516.095 345.6 517.6 345.6 cv
519.07 345.6 520.198 346.832 520.198 348.391 cv
520.198 348.427 520.198 348.463 520.18 348.5 cv
f
529.625 353.9 mo
534.159 340.8 li
532.385 340.8 li
528.765 351.893 li
524.93 340.8 li
523.138 340.8 li
527.833 353.9 li
f
535.012 357.7 mo
538.401 357.7 li
538.401 340.8 li
535.012 340.8 li
535.012 342.1 li
536.9 342.1 li
536.9 356.399 li
535.012 356.399 li
f
481.5 354.7 mo
488.6 354.7 li
488.6 363.6 li
481.5 363.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.1 0 0 -8.9 481.5 29.3 ]ct
<<
/T 1
/W 71 
/H 89 
/M[71 0 0 -89 0 89 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3'!!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s
!'gA\!r`0aqu6`s!'gA\!r`0arVm$#s8E!_qu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0a
qu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gD]"98?#5PtH^rW#1[rrW0"5PtH^
rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[
rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"
5PtH^rW#1[rrW0"5PtH^rW#1[rrE$!!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\
!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6`s!'gA\!r`0aqu6]r!!#7\rrW0"5PtH^rW#1[rrW0"
5PtH^rW#1[rrW0"5PtH^rW#1[rrW0"5PtH^rW#1^rrBk2!!*,9q>^Ns_"n$3!PnO3!<L"4!!*,9qu?g!
!!0n3!!*,9q>^Ns_"n$3!PnO3!!.T~>

%%EndBinary
grestore
np
f
449.1 340.8 mo
449.1 350.009 li
449.1 351.05 448.991 351.643 448.684 352.091 cv
448.358 352.593 447.743 352.898 447.073 352.898 cv
445.806 352.898 445.101 352.06 445.101 350.544 cv
445.101 349.705 li
443.4 349.705 li
443.4 350.849 li
443.4 352.958 444.811 354.299 447.073 354.299 cv
449.37 354.299 450.801 352.881 450.801 350.619 cv
450.801 340.799 li
1 /0 /CSD get_res sepcs
1 sep
f
461.293 349.7 mo
461.293 348.257 461.185 347.392 460.919 346.688 cv
460.316 345.137 458.897 344.199 457.158 344.199 cv
454.568 344.199 452.9 346.213 452.9 349.304 cv
452.9 352.395 454.514 354.299 457.121 354.299 cv
459.249 354.299 460.721 353.085 461.096 351.05 cv
459.595 351.05 li
459.184 352.265 458.345 352.898 457.15 352.898 cv
456.204 352.898 455.4 352.472 454.901 351.69 cv
454.544 351.157 454.419 350.624 454.401 349.699 cv
cp
454.412 348.5 mo
454.537 346.742 455.595 345.6 457.1 345.6 cv
458.57 345.6 459.698 346.832 459.698 348.391 cv
459.698 348.427 459.698 348.463 459.68 348.5 cv
f
466.552 344.5 mo
465.001 344.5 li
465.001 341.93 li
463.501 341.93 li
463.501 344.5 li
462.252 344.5 li
462.252 345.7 li
463.501 345.7 li
463.501 352.81 li
463.501 353.762 464.151 354.3 465.325 354.3 cv
465.686 354.3 466.047 354.264 466.553 354.176 cv
466.553 352.933 li
466.355 352.983 466.12 353 465.832 353 cv
465.183 353 465.002 352.82 465.002 352.155 cv
465.002 345.7 li
466.553 345.7 li
f
472.999 357.807 mo
474.499 357.807 li
474.499 352.9 li
475.276 353.87 476.142 354.301 477.342 354.301 cv
479.726 354.301 481.299 352.342 481.299 349.342 cv
481.299 346.179 479.784 344.201 477.337 344.201 cv
476.087 344.201 475.084 344.789 474.398 345.927 cv
474.398 344.501 li
472.998 344.501 li
cp
477.096 345.6 mo
478.732 345.6 479.8 347.057 479.8 349.304 cv
479.8 351.443 478.715 352.899 477.096 352.899 cv
475.531 352.899 474.5 351.461 474.5 349.25 cv
474.5 347.039 475.531 345.6 477.096 345.6 cv
f
90.709 313.373 mo
90.709 322.485 li
@
103.15 317.929 mo
103.15 322.485 li
@
115.591 317.929 mo
115.591 322.485 li
@
128.031 317.929 mo
128.031 322.485 li
@
140.472 313.373 mo
140.472 322.485 li
@
152.913 317.929 mo
152.913 322.485 li
@
165.354 317.929 mo
165.354 322.485 li
@
177.795 317.929 mo
177.795 322.485 li
@
190.236 313.373 mo
190.236 322.485 li
@
202.677 317.929 mo
202.677 322.485 li
@
215.118 317.929 mo
215.118 322.485 li
@
227.559 317.929 mo
227.559 322.485 li
@
240 313.373 mo
240 322.485 li
@
252.441 317.929 mo
252.441 322.485 li
@
264.882 317.929 mo
264.882 322.485 li
@
277.323 317.929 mo
277.323 322.485 li
@
289.764 313.373 mo
289.764 322.485 li
@
302.205 317.929 mo
302.205 322.485 li
@
314.646 317.929 mo
314.646 322.485 li
@
327.087 317.929 mo
327.087 322.485 li
@
339.528 313.373 mo
339.528 322.485 li
@
351.969 317.929 mo
351.969 322.485 li
@
364.409 317.929 mo
364.409 322.485 li
@
376.85 317.929 mo
376.85 322.485 li
@
389.291 313.373 mo
389.291 322.485 li
@
401.732 317.929 mo
401.732 322.485 li
@
414.173 317.929 mo
414.173 322.485 li
@
426.614 317.929 mo
426.614 322.485 li
@
439.055 313.373 mo
439.055 322.485 li
@
451.496 317.929 mo
451.496 322.485 li
@
463.937 317.929 mo
463.937 322.485 li
@
476.378 317.929 mo
476.378 322.485 li
@
488.819 313.373 mo
488.819 322.485 li
@
501.26 317.929 mo
501.26 322.485 li
@
513.701 317.929 mo
513.701 322.485 li
@
526.142 317.929 mo
526.142 322.485 li
@
538.583 313.373 mo
538.583 322.485 li
@
89.709 337.6 mo
82.992 337.6 li
83.154 336.565 83.73 335.905 85.297 334.995 cv
87.098 334.032 li
88.881 333.069 89.8 331.766 89.8 330.214 cv
89.8 329.161 89.368 328.18 88.611 327.502 cv
87.854 326.824 86.918 326.501 85.711 326.501 cv
84.09 326.501 82.883 327.075 82.181 328.148 cv
81.731 328.828 81.533 329.615 81.497 330.904 cv
83.086 330.904 li
83.14 330.051 83.249 329.536 83.465 329.127 cv
83.881 328.363 84.711 327.901 85.669 327.901 cv
87.114 327.901 88.199 328.921 88.199 330.28 cv
88.199 331.281 87.603 332.139 86.465 332.783 cv
84.803 333.713 li
82.13 335.215 81.354 336.412 81.209 339.201 cv
89.709 339.201 li
f
95.549 326.5 mo
94.369 326.5 93.295 327.021 92.633 327.901 cv
91.81 329.012 91.399 330.711 91.399 333.054 cv
91.399 337.329 92.83 339.6 95.549 339.6 cv
98.232 339.6 99.7 337.329 99.7 333.161 cv
99.7 330.693 99.305 329.047 98.464 327.9 cv
97.802 327.002 96.747 326.499 95.549 326.499 cv
cp
95.55 327.901 mo
97.255 327.901 98.1 329.621 98.1 333.021 cv
98.1 336.618 97.274 338.3 95.514 338.3 cv
93.844 338.3 93 336.546 93 333.075 cv
93 329.604 93.844 327.901 95.55 327.901 cv
f
136.2 336.1 mo
136.2 339.2 li
137.7 339.2 li
137.7 336.1 li
139.618 336.1 li
139.618 334.699 li
137.7 334.699 li
137.7 326.499 li
136.541 326.499 li
130.802 334.443 li
130.802 336.1 li
cp
136.2 334.7 mo
132.182 334.7 li
136.2 329.183 li
f
145.249 326.5 mo
144.069 326.5 142.995 327.021 142.333 327.901 cv
141.51 329.012 141.099 330.711 141.099 333.054 cv
141.099 337.329 142.53 339.6 145.249 339.6 cv
147.932 339.6 149.4 337.329 149.4 333.161 cv
149.4 330.693 149.005 329.047 148.164 327.9 cv
147.502 327.002 146.447 326.499 145.249 326.499 cv
cp
145.25 327.901 mo
146.955 327.901 147.8 329.621 147.8 333.021 cv
147.8 336.618 146.974 338.3 145.214 338.3 cv
143.544 338.3 142.7 336.546 142.7 333.075 cv
142.7 329.604 143.544 327.901 145.25 327.901 cv
f
188.924 329.8 mo
188.62 327.732 187.263 326.5 185.335 326.5 cv
183.942 326.5 182.692 327.182 181.943 328.309 cv
181.157 329.544 180.8 331.101 180.8 333.409 cv
180.8 335.538 181.122 336.898 181.872 338.025 cv
182.551 339.045 183.66 339.6 185.053 339.6 cv
187.466 339.6 189.199 337.811 189.199 335.325 cv
189.199 332.964 187.588 331.299 185.315 331.299 cv
184.063 331.299 183.079 331.778 182.399 332.699 cv
182.417 329.613 183.418 327.9 185.223 327.9 cv
186.331 327.9 187.1 328.592 187.35 329.799 cv
cp
185.117 332.7 mo
186.646 332.7 187.599 333.754 187.599 335.45 cv
187.599 337.039 186.52 338.199 185.063 338.199 cv
183.588 338.199 182.473 336.985 182.473 335.36 cv
182.473 333.789 183.552 332.699 185.117 332.699 cv
f
194.949 326.5 mo
193.769 326.5 192.695 327.021 192.033 327.901 cv
191.21 329.012 190.799 330.711 190.799 333.054 cv
190.799 337.329 192.23 339.6 194.949 339.6 cv
197.632 339.6 199.1 337.329 199.1 333.161 cv
199.1 330.693 198.705 329.047 197.864 327.9 cv
197.202 327.002 196.147 326.499 194.949 326.499 cv
cp
194.95 327.901 mo
196.655 327.901 197.5 329.621 197.5 333.021 cv
197.5 336.618 196.674 338.3 194.914 338.3 cv
193.244 338.3 192.4 336.546 192.4 333.075 cv
192.4 329.604 193.244 327.901 194.95 327.901 cv
f
236.707 332.514 mo
237.982 331.726 238.401 331.082 238.401 329.884 cv
238.401 327.898 236.847 326.5 234.6 326.5 cv
232.37 326.5 230.801 327.897 230.801 329.884 cv
230.801 331.065 231.234 331.709 232.532 332.514 cv
231.105 333.212 230.401 334.268 230.401 335.663 cv
230.401 337.989 232.151 339.6 234.65 339.6 cv
237.15 339.6 238.9 337.989 238.9 335.681 cv
238.9 334.267 238.181 333.211 236.707 332.514 cv
cp
234.6 327.901 mo
235.941 327.901 236.8 328.69 236.8 329.927 cv
236.8 331.111 235.923 331.9 234.6 331.9 cv
233.277 331.9 232.401 331.111 232.401 329.91 cv
232.401 328.69 233.277 327.901 234.6 327.901 cv
cp
234.649 333.2 mo
236.224 333.2 237.299 334.204 237.299 335.691 cv
237.299 337.196 236.224 338.199 234.613 338.199 cv
233.074 338.199 232 337.178 232 335.691 cv
232 334.204 233.074 333.2 234.649 333.2 cv
f
244.649 326.5 mo
243.469 326.5 242.395 327.021 241.733 327.901 cv
240.91 329.012 240.499 330.711 240.499 333.054 cv
240.499 337.329 241.93 339.6 244.649 339.6 cv
247.332 339.6 248.8 337.329 248.8 333.161 cv
248.8 330.693 248.405 329.047 247.564 327.9 cv
246.902 327.002 245.847 326.499 244.649 326.499 cv
cp
244.65 327.901 mo
246.355 327.901 247.2 329.621 247.2 333.021 cv
247.2 336.618 246.374 338.3 244.614 338.3 cv
242.944 338.3 242.1 336.546 242.1 333.075 cv
242.1 329.604 242.944 327.901 244.65 327.901 cv
f
279.2 330.155 mo
279.2 339.2 li
280.7 339.2 li
280.7 326.5 li
279.664 326.5 li
279.111 328.453 278.754 328.722 276.327 329.026 cv
276.327 330.155 li
f
289.449 326.5 mo
288.269 326.5 287.195 327.021 286.533 327.901 cv
285.71 329.012 285.299 330.711 285.299 333.054 cv
285.299 337.329 286.73 339.6 289.449 339.6 cv
292.132 339.6 293.6 337.329 293.6 333.161 cv
293.6 330.693 293.205 329.047 292.364 327.9 cv
291.702 327.002 290.647 326.499 289.449 326.499 cv
cp
289.45 327.901 mo
291.155 327.901 292 329.621 292 333.021 cv
292 336.618 291.174 338.3 289.414 338.3 cv
287.744 338.3 286.9 336.546 286.9 333.075 cv
286.9 329.604 287.744 327.901 289.45 327.901 cv
f
299.349 326.5 mo
298.169 326.5 297.095 327.021 296.433 327.901 cv
295.61 329.012 295.199 330.711 295.199 333.054 cv
295.199 337.329 296.63 339.6 299.349 339.6 cv
302.032 339.6 303.5 337.329 303.5 333.161 cv
303.5 330.693 303.105 329.047 302.264 327.9 cv
301.602 327.002 300.547 326.499 299.349 326.499 cv
cp
299.35 327.901 mo
301.055 327.901 301.9 329.621 301.9 333.021 cv
301.9 336.618 301.074 338.3 299.314 338.3 cv
297.644 338.3 296.8 336.546 296.8 333.075 cv
296.8 329.604 297.644 327.901 299.35 327.901 cv
f
328.9 330.155 mo
328.9 339.2 li
330.4 339.2 li
330.4 326.5 li
329.364 326.5 li
328.811 328.453 328.454 328.722 326.027 329.026 cv
326.027 330.155 li
f
343.309 337.6 mo
336.592 337.6 li
336.754 336.565 337.33 335.905 338.897 334.995 cv
340.698 334.032 li
342.481 333.069 343.4 331.766 343.4 330.214 cv
343.4 329.161 342.968 328.18 342.211 327.502 cv
341.454 326.824 340.518 326.501 339.311 326.501 cv
337.69 326.501 336.483 327.075 335.781 328.148 cv
335.331 328.828 335.133 329.615 335.097 330.904 cv
336.686 330.904 li
336.74 330.051 336.849 329.536 337.065 329.127 cv
337.481 328.363 338.311 327.901 339.269 327.901 cv
340.714 327.901 341.799 328.921 341.799 330.28 cv
341.799 331.281 341.203 332.139 340.065 332.783 cv
338.403 333.713 li
335.73 335.215 334.954 336.412 334.809 339.201 cv
343.309 339.201 li
f
349.049 326.5 mo
347.869 326.5 346.795 327.021 346.133 327.901 cv
345.31 329.012 344.899 330.711 344.899 333.054 cv
344.899 337.329 346.33 339.6 349.049 339.6 cv
351.732 339.6 353.2 337.329 353.2 333.161 cv
353.2 330.693 352.805 329.047 351.964 327.9 cv
351.302 327.002 350.247 326.499 349.049 326.499 cv
cp
349.05 327.901 mo
350.755 327.901 351.6 329.621 351.6 333.021 cv
351.6 336.618 350.774 338.3 349.014 338.3 cv
347.344 338.3 346.5 336.546 346.5 333.075 cv
346.5 329.604 347.344 327.901 349.05 327.901 cv
f
378.6 330.155 mo
378.6 339.2 li
380.1 339.2 li
380.1 326.5 li
379.064 326.5 li
378.511 328.453 378.154 328.722 375.727 329.026 cv
375.727 330.155 li
f
389.7 336.1 mo
389.7 339.2 li
391.2 339.2 li
391.2 336.1 li
393.118 336.1 li
393.118 334.699 li
391.2 334.699 li
391.2 326.499 li
390.041 326.499 li
384.302 334.443 li
384.302 336.1 li
cp
389.7 334.7 mo
385.682 334.7 li
389.7 329.183 li
f
398.749 326.5 mo
397.569 326.5 396.495 327.021 395.833 327.901 cv
395.01 329.012 394.599 330.711 394.599 333.054 cv
394.599 337.329 396.03 339.6 398.749 339.6 cv
401.432 339.6 402.9 337.329 402.9 333.161 cv
402.9 330.693 402.505 329.047 401.664 327.9 cv
401.002 327.002 399.947 326.499 398.749 326.499 cv
cp
398.75 327.901 mo
400.455 327.901 401.3 329.621 401.3 333.021 cv
401.3 336.618 400.474 338.3 398.714 338.3 cv
397.044 338.3 396.2 336.546 396.2 333.075 cv
396.2 329.604 397.044 327.901 398.75 327.901 cv
f
429.1 330.155 mo
429.1 339.2 li
430.6 339.2 li
430.6 326.5 li
429.564 326.5 li
429.011 328.453 428.654 328.722 426.227 329.026 cv
426.227 330.155 li
f
443.224 329.8 mo
442.92 327.732 441.563 326.5 439.635 326.5 cv
438.242 326.5 436.992 327.182 436.243 328.309 cv
435.457 329.544 435.1 331.101 435.1 333.409 cv
435.1 335.538 435.422 336.898 436.172 338.025 cv
436.851 339.045 437.96 339.6 439.353 339.6 cv
441.766 339.6 443.499 337.811 443.499 335.325 cv
443.499 332.964 441.888 331.299 439.615 331.299 cv
438.363 331.299 437.379 331.778 436.699 332.699 cv
436.717 329.613 437.718 327.9 439.523 327.9 cv
440.631 327.9 441.4 328.592 441.65 329.799 cv
cp
439.417 332.7 mo
440.946 332.7 441.899 333.754 441.899 335.45 cv
441.899 337.039 440.82 338.199 439.363 338.199 cv
437.888 338.199 436.773 336.985 436.773 335.36 cv
436.773 333.789 437.852 332.699 439.417 332.699 cv
f
449.249 326.5 mo
448.069 326.5 446.995 327.021 446.333 327.901 cv
445.51 329.012 445.099 330.711 445.099 333.054 cv
445.099 337.329 446.53 339.6 449.249 339.6 cv
451.932 339.6 453.4 337.329 453.4 333.161 cv
453.4 330.693 453.005 329.047 452.164 327.9 cv
451.502 327.002 450.447 326.499 449.249 326.499 cv
cp
449.25 327.901 mo
450.955 327.901 451.8 329.621 451.8 333.021 cv
451.8 336.618 450.974 338.3 449.214 338.3 cv
447.544 338.3 446.7 336.546 446.7 333.075 cv
446.7 329.604 447.544 327.901 449.25 327.901 cv
f
478.8 330.155 mo
478.8 339.2 li
480.3 339.2 li
480.3 326.5 li
479.264 326.5 li
478.711 328.453 478.354 328.722 475.927 329.026 cv
475.927 330.155 li
f
491.007 332.514 mo
492.282 331.726 492.701 331.082 492.701 329.884 cv
492.701 327.898 491.147 326.5 488.9 326.5 cv
486.67 326.5 485.101 327.897 485.101 329.884 cv
485.101 331.065 485.534 331.709 486.832 332.514 cv
485.405 333.212 484.701 334.268 484.701 335.663 cv
484.701 337.989 486.451 339.6 488.95 339.6 cv
491.45 339.6 493.2 337.989 493.2 335.681 cv
493.2 334.267 492.481 333.211 491.007 332.514 cv
cp
488.9 327.901 mo
490.241 327.901 491.1 328.69 491.1 329.927 cv
491.1 331.111 490.223 331.9 488.9 331.9 cv
487.577 331.9 486.701 331.111 486.701 329.91 cv
486.701 328.69 487.577 327.901 488.9 327.901 cv
cp
488.949 333.2 mo
490.524 333.2 491.599 334.204 491.599 335.691 cv
491.599 337.196 490.524 338.199 488.913 338.199 cv
487.374 338.199 486.3 337.178 486.3 335.691 cv
486.3 334.204 487.374 333.2 488.949 333.2 cv
f
498.949 326.5 mo
497.769 326.5 496.695 327.021 496.033 327.901 cv
495.21 329.012 494.799 330.711 494.799 333.054 cv
494.799 337.329 496.23 339.6 498.949 339.6 cv
501.632 339.6 503.1 337.329 503.1 333.161 cv
503.1 330.693 502.705 329.047 501.864 327.9 cv
501.202 327.002 500.147 326.499 498.949 326.499 cv
cp
498.95 327.901 mo
500.655 327.901 501.5 329.621 501.5 333.021 cv
501.5 336.618 500.674 338.3 498.914 338.3 cv
497.244 338.3 496.4 336.546 496.4 333.075 cv
496.4 329.604 497.244 327.901 498.95 327.901 cv
f
532.909 337.6 mo
526.192 337.6 li
526.354 336.565 526.93 335.905 528.497 334.995 cv
530.298 334.032 li
532.081 333.069 533 331.766 533 330.214 cv
533 329.161 532.568 328.18 531.811 327.502 cv
531.054 326.824 530.118 326.501 528.911 326.501 cv
527.29 326.501 526.083 327.075 525.381 328.148 cv
524.931 328.828 524.733 329.615 524.697 330.904 cv
526.286 330.904 li
526.34 330.051 526.449 329.536 526.665 329.127 cv
527.081 328.363 527.911 327.901 528.869 327.901 cv
530.314 327.901 531.399 328.921 531.399 330.28 cv
531.399 331.281 530.803 332.139 529.665 332.783 cv
528.003 333.713 li
525.33 335.215 524.554 336.412 524.409 339.201 cv
532.909 339.201 li
f
538.649 326.5 mo
537.469 326.5 536.395 327.021 535.733 327.901 cv
534.91 329.012 534.499 330.711 534.499 333.054 cv
534.499 337.329 535.93 339.6 538.649 339.6 cv
541.332 339.6 542.8 337.329 542.8 333.161 cv
542.8 330.693 542.405 329.047 541.564 327.9 cv
540.902 327.002 539.847 326.499 538.649 326.499 cv
cp
538.65 327.901 mo
540.355 327.901 541.2 329.621 541.2 333.021 cv
541.2 336.618 540.374 338.3 538.614 338.3 cv
536.944 338.3 536.1 336.546 536.1 333.075 cv
536.1 329.604 536.944 327.901 538.65 327.901 cv
f
548.649 326.5 mo
547.469 326.5 546.395 327.021 545.733 327.901 cv
544.91 329.012 544.499 330.711 544.499 333.054 cv
544.499 337.329 545.93 339.6 548.649 339.6 cv
551.332 339.6 552.8 337.329 552.8 333.161 cv
552.8 330.693 552.405 329.047 551.564 327.9 cv
550.902 327.002 549.847 326.499 548.649 326.499 cv
cp
548.65 327.901 mo
550.355 327.901 551.2 329.621 551.2 333.021 cv
551.2 336.618 550.374 338.3 548.614 338.3 cv
546.944 338.3 546.1 336.546 546.1 333.075 cv
546.1 329.604 546.944 327.901 548.65 327.901 cv
f
90.709 18.754 mo
538.584 18.754 li
@
90.709 27.866 mo
90.709 18.754 li
@
103.15 23.31 mo
103.15 18.754 li
@
115.591 23.31 mo
115.591 18.754 li
@
128.031 23.31 mo
128.031 18.754 li
@
140.472 27.866 mo
140.472 18.754 li
@
152.913 23.31 mo
152.913 18.754 li
@
165.354 23.31 mo
165.354 18.754 li
@
177.795 23.31 mo
177.795 18.754 li
@
190.236 27.866 mo
190.236 18.754 li
@
202.677 23.31 mo
202.677 18.754 li
@
215.118 23.31 mo
215.118 18.754 li
@
227.559 23.31 mo
227.559 18.754 li
@
240 27.866 mo
240 18.754 li
@
252.441 23.31 mo
252.441 18.754 li
@
264.882 23.31 mo
264.882 18.754 li
@
277.323 23.31 mo
277.323 18.754 li
@
289.764 27.866 mo
289.764 18.754 li
@
302.205 23.31 mo
302.205 18.754 li
@
314.646 23.31 mo
314.646 18.754 li
@
327.087 23.31 mo
327.087 18.754 li
@
339.528 27.866 mo
339.528 18.754 li
@
351.969 23.31 mo
351.969 18.754 li
@
364.409 23.31 mo
364.409 18.754 li
@
376.85 23.31 mo
376.85 18.754 li
@
389.291 27.866 mo
389.291 18.754 li
@
401.732 23.31 mo
401.732 18.754 li
@
414.173 23.31 mo
414.173 18.754 li
@
426.614 23.31 mo
426.614 18.754 li
@
439.055 27.866 mo
439.055 18.754 li
@
451.496 23.31 mo
451.496 18.754 li
@
463.937 23.31 mo
463.937 18.754 li
@
476.378 23.31 mo
476.378 18.754 li
@
488.819 27.866 mo
488.819 18.754 li
@
501.26 23.31 mo
501.26 18.754 li
@
513.701 23.31 mo
513.701 18.754 li
@
526.142 23.31 mo
526.142 18.754 li
@
538.583 27.866 mo
538.583 18.754 li
@
90.709 322.485 mo
90.709 18.754 li
@
49.886 75.1446 mo
59.286 75.1446 li
59.286 82.0446 li
49.886 82.0446 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[9.39999 0 0 -6.89999 49.886 308.855 ]ct
<<
/T 1
/W 94 
/H 69 
/M[94 0 0 -69 0 69 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!Vc]irrMlqp\t9h!VcTpp]:-h!Vc]irrMlqp\t9h!VcTpp]:-h!Vc]irrMlqp\t9h!W;uqrrMlqp\t9h
!VcTpp]:-h!Vc]irrMlqp\t9h!VcTpp]:-h!Vc]irrMlqp\t9h!VcTpp]:-h!Vc]irrMlqp\t9h!VcTp
p]:-h!Vc]irrMlqp\t9h!VcToq"Fah"8MTj!<`,m!!<3$"8MTj!<`,k!!*2spAb3rq"Fah"8MTj!<`,k
!!*2spAb3rq"Fai"8DokrrMlqp\t?j!WW2qrrMlqp\t9h!VcTpp]:-h!Vc]irrMlqp\t9h!VcTpp]:-h
!Vc]irrMlqp\t9h!VlZrs7cWhrrMlqp\t9h!VcTpp]:-h!Vc]irrMlqp\t9h!VcTpp]:-h!Vc]irrMlq
p\t9h!WE&qrrMlqp\t9h!VcTpp]:-h!Vc]irrMlqp]#a~>

%%EndBinary
grestore
np
f
36.486 92.9446 mo
36.486 94.4446 li
41.378 94.4446 li
40.401 95.0716 39.885 96.0726 39.885 97.3236 cv
39.885 99.7536 41.846 101.345 44.846 101.345 cv
48.026 101.345 49.985 99.7866 49.985 97.2606 cv
49.985 95.9706 49.505 95.0756 48.349 94.2696 cv
49.585 94.2696 li
49.585 92.9446 li
cp
41.286 97.0996 mo
41.286 95.4746 42.725 94.4446 44.972 94.4446 cv
47.147 94.4446 48.585 95.4926 48.585 97.0816 cv
48.585 98.7426 47.129 99.8436 44.936 99.8436 cv
42.743 99.8436 41.286 98.7426 41.286 97.0986 cv
1 /0 /CSD get_res sepcs
1 sep
f
53.493 90.9446 mo
53.493 89.4436 li
48.586 89.4436 li
49.556 88.6666 49.987 87.8016 49.987 86.6006 cv
49.987 84.2166 48.028 82.6436 45.028 82.6436 cv
41.866 82.6436 39.887 84.1576 39.887 86.6046 cv
39.887 87.8546 40.475 88.8576 41.613 89.5436 cv
40.187 89.5436 li
40.187 90.9446 li
cp
41.286 86.8486 mo
41.286 85.2126 42.743 84.1456 44.99 84.1456 cv
47.129 84.1456 48.585 85.2306 48.585 86.8486 cv
48.585 88.4126 47.147 89.4446 44.936 89.4446 cv
42.725 89.4446 41.286 88.4136 41.286 86.8486 cv
f
19.786 76.3446 mo
31.886 76.3446 li
31.886 78.4446 li
19.786 78.4446 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[12.1 0 0 -2.10001 19.786 307.655 ]ct
<<
/T 1
/W 121 
/H 21 
/M[121 0 0 -21 0 21 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
oD\gkJ+N[@!.XV?!<@W@rrE+LoD\gkJ+N[@!.XV?!<@WArrN*!!.XY@!r`1Lo`"si!;$3pn,WL`!'gDT
!!N>s!'gDT!!N>s!'gDU!!NE'p]*PVpAb?ts7cRYr:^0p"98,r5Q(6U"U"f"!'gDU!!NW-p]*PVpAb@-
s7cRYr:^0p5QCKY5Q(6Us8RT~>

%%EndBinary
grestore
np
f
9.586 91.3446 mo
9.586 92.8446 li
14.478 92.8446 li
13.501 93.4716 12.985 94.4726 12.985 95.7236 cv
12.985 98.1536 14.946 99.7446 17.946 99.7446 cv
21.126 99.7446 23.085 98.1866 23.085 95.6606 cv
23.085 94.3706 22.605 93.4756 21.449 92.6696 cv
22.685 92.6696 li
22.685 91.3446 li
cp
14.386 95.4996 mo
14.386 93.8746 15.825 92.8446 18.072 92.8446 cv
20.247 92.8446 21.685 93.8926 21.685 95.4816 cv
21.685 97.1426 20.229 98.2436 18.036 98.2436 cv
15.843 98.2436 14.386 97.1426 14.386 95.4986 cv
1 /0 /CSD get_res sepcs
1 sep
f
9.586 78.7446 mo
9.586 80.2446 li
20.302 80.2446 li
9.586 87.0426 li
9.586 88.8446 li
22.686 88.8446 li
22.686 87.3446 li
12.095 87.3446 li
22.686 80.6196 li
22.686 78.7446 li
f
1.5 lw
34.066 101.878 mo
34.066 74.9977 li
@
45.886 108.145 mo
57.986 108.145 li
57.986 110.245 li
45.886 110.245 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[12.1 0 0 -2.10001 45.886 275.855 ]ct
<<
/T 1
/W 121 
/H 21 
/M[121 0 0 -21 0 21 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
oD\gkJ+N[@!.XV?!<@W@rrE+LoD\gkJ+N[@!.XV?!<@WArrN*!!.XY@!r`1Lo`"si!;$3pn,WL`!'gDT
!!N>s!'gDT!!N>s!'gDU!!NE'p]*PVpAb?ts7cRYr:^0p"98,r5Q(6U"U"f"!'gDU!!NW-p]*PVpAb@-
s7cRYr:^0p5QCKY5Q(6Us8RT~>

%%EndBinary
grestore
np
f
36.486 110.745 mo
36.486 112.245 li
47.202 112.245 li
36.486 119.043 li
36.486 120.845 li
49.586 120.845 li
49.586 119.345 li
38.995 119.345 li
49.586 112.62 li
49.586 110.745 li
1 /0 /CSD get_res sepcs
1 sep
f
23.441 112.645 mo
32.486 112.645 li
32.486 111.145 li
19.786 111.145 li
19.786 112.181 li
21.739 112.734 22.007 113.091 22.312 115.518 cv
23.441 115.518 li
f
34.066 122.242 mo
34.066 106.765 li
@
.75 lw
104.145 322.485 mo
90.709 322.485 li
@
80 319.8 mo
81.9 319.8 li
81.9 320.3 li
80 320.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 64.2 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 316.9 mo
86 316.9 li
86 322.3 li
82.5 322.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.4 82.5 67.1 ]ct
<<
/T 1
/W 35 
/H 54 
/M[35 0 0 -54 0 54 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfK0Ds5<pm!'fEA!!!PfrVup'i;<QT"5rqS!!2$I"8i/Wi",hf@,O9L^gOs-s55$8J,eFL_#OH(+FsLl
n,S%>s7cSFs8VioJcGcF!.k1Mp],mFs7cSFs8VioJH,Z=!5SX7n0#Mrs55$8J,eFLi'77W@.4^,!9!>K
If'3(qu?]ti;N]V#N5U^!"\#fJ,g\Lrr<$0i;N]V"5s(Xp]9=J&,u[gn/q[\i:&u2^u4-8s1i%#J,eG7
i.(db@,QP7i*bJms57;CJ,eG7i.(db@,O9L^gQXrs1mR^+9-lLn.5O!i:m?J!T<kU!!D0Y!!!8^rr<$0
&)dJ<!$C/!huJ8bs83!!i.(~>

%%EndBinary
grestore
np
f
68.8 320.3 mo
72.1 320.3 li
72.1 327.8 li
68.8 327.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 63.7 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 320.3 mo
79.7 320.3 li
79.7 328 li
74.7 328 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 63.7 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 311.262 mo
90.709 311.262 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 304.697 mo
90.709 304.697 li
@
97.427 300.039 mo
90.709 300.039 li
@
97.427 296.427 mo
90.709 296.427 li
@
97.427 293.475 mo
90.709 293.475 li
@
97.427 290.979 mo
90.709 290.979 li
@
97.427 288.817 mo
90.709 288.817 li
@
97.427 286.91 mo
90.709 286.91 li
@
104.145 285.204 mo
90.709 285.204 li
@
80 283.1 mo
81.9 283.1 li
81.9 283.6 li
80 283.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 100.9 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 280.2 mo
86.1 280.2 li
86.1 285.4 li
82.5 285.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.6 0 0 -5.2 82.5 103.8 ]ct
<<
/T 1
/W 36 
/H 52 
/M[36 0 0 -52 0 52 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfBHKs7$$hs8VTgJcGc>s+(.LnGe%=s7$&=s8VTg_#OH(s1j-anGg:Rs7$'HJ,f$<i.(drs56-AnGhuB
s7$'X5QC6Qn/q]"s7d]9nGi8*s7$'`&-)/!r"&hss83E-nGiIms7$'f#QO;nrWE2is8N3$nGiLhs7$'g
3J%5"s8RWLnGiO(s7$'g^jkkRs58Crs8VRQnGiOX5Oe^Qp`K#*s7d]*s8W!-nGiOf#OqcnrWhrlrrE5k
rr3!$nG`FgJai[=!Pn4(rrKq)rr3#WE;ok<n1akA!Up["rrVs,JGfHJJGfHJJGfHJJGfHJJGoNL!.b"J
J,~>

%%EndBinary
grestore
np
f
68.8 282.8 mo
72.1 282.8 li
72.1 290.3 li
68.8 290.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 101.2 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 282.8 mo
79.7 282.8 li
79.7 290.5 li
74.7 290.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 101.2 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 273.981 mo
90.709 273.981 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 267.416 mo
90.709 267.416 li
@
97.427 262.758 mo
90.709 262.758 li
@
97.427 259.145 mo
90.709 259.145 li
@
97.427 256.193 mo
90.709 256.193 li
@
97.427 253.697 mo
90.709 253.697 li
@
97.427 251.535 mo
90.709 251.535 li
@
97.427 249.628 mo
90.709 249.628 li
@
104.145 247.923 mo
90.709 247.923 li
@
80 244.9 mo
81.9 244.9 li
81.9 245.4 li
80 245.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 139.1 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 242 mo
86 242 li
86 247.4 li
82.5 247.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.4 82.5 142 ]ct
<<
/T 1
/W 35 
/H 54 
/M[35 0 0 -54 0 54 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfK<Hs5<q8!.Wr,J,g\Lrr<$(i;N]V"5s(W!!2$Q!W2rUp]pg!i:%9WJ7.jgs1i%#5QBXai'782+Q.bL
n0#Mrs7cT0s8Vio_#OH0!5SX7p],jEs7cSEs8VioJH,ZE!.]S!p],hos6p#=J,f!\J3X(l+FkR6i#mO\
/-!CmJ-Z+)@"8:U!8rA-!!2#/!!!,ZJUd_*i.8ZD&)`$.!'fCmrW3&W_>aH8i5#?l!T:cmrrM&nrr3#W
_#F?qi8B+bs5;gbs6q/hJ,eFLn3?s2+RgKQi#qe:s1i%;&-%/fqucs!i;<TQ!9!hV!!2$X!!!,Zs*t(S
&)dKG!"\#fp]*P:s8N*!i.(~>

%%EndBinary
grestore
np
f
68.8 245.4 mo
72.1 245.4 li
72.1 252.9 li
68.8 252.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 138.6 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 245.4 mo
79.7 245.4 li
79.7 253.1 li
74.7 253.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 138.6 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 236.7 mo
90.709 236.7 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 230.135 mo
90.709 230.135 li
@
97.427 225.477 mo
90.709 225.477 li
@
97.427 221.864 mo
90.709 221.864 li
@
97.427 218.912 mo
90.709 218.912 li
@
97.427 216.416 mo
90.709 216.416 li
@
97.427 214.254 mo
90.709 214.254 li
@
97.427 212.347 mo
90.709 212.347 li
@
104.145 210.641 mo
90.709 210.641 li
@
80 208.2 mo
81.9 208.2 li
81.9 208.7 li
80 208.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 175.8 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 205.3 mo
86 205.3 li
86 210.7 li
82.5 210.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.4 82.5 178.7 ]ct
<<
/T 1
/W 35 
/H 54 
/M[35 0 0 -54 0 54 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
9)nYgs5<pm!.Wr,!!",!qu?^-i:m9P#N5(O!!D0K"8DoTi",hfi4qSWJ7-0Bs1i$XJ,eG7JH,Z=+FsLl
n0!;^s6q.^s8Viorr3#o!<3!!p]1<n!VcZorrMlprr3#o!<3!!p]1<n!VcZorrMThrr3#g+TDBCi#r("
EW=r>^jlC"@),#,J7.:WrrD!8"8DlShuE`Xi8=S8"5r);!!hH?5QD>Qi,AZ\i:)*ps5<B2s8V$H5QCcA
n3?sQi:&u2s5<B2s8V$H5QCcAn3?sQi:oP:s5<Yos8V$P+92B!p`KP9i:nDos5<\O!!2$QrVuuWr;HZs
i;EQS!T<nT!!2$UrVurVJ,~>

%%EndBinary
grestore
np
f
68.8 208.7 mo
72.1 208.7 li
72.1 216.2 li
68.8 216.2 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 175.3 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 208.7 mo
79.7 208.7 li
79.7 216.4 li
74.7 216.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 175.3 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 199.419 mo
90.709 199.419 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 192.854 mo
90.709 192.854 li
@
97.427 188.196 mo
90.709 188.196 li
@
97.427 184.583 mo
90.709 184.583 li
@
97.427 181.631 mo
90.709 181.631 li
@
97.427 179.135 mo
90.709 179.135 li
@
97.427 176.973 mo
90.709 176.973 li
@
97.427 175.066 mo
90.709 175.066 li
@
104.145 173.36 mo
90.709 173.36 li
@
80 171.5 mo
81.9 171.5 li
81.9 172 li
80 172 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 212.5 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 168.6 mo
86.1 168.6 li
86.1 173.8 li
82.5 173.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.6 0 0 -5.2 82.5 215.4 ]ct
<<
/T 1
/W 36 
/H 52 
/M[36 0 0 -52 0 52 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
49,?Y&+KW!r"&;ss83Dss8W!-nGiOd&+KW!r"&;ss83Dss8W!-nGiOd&+KW!r"&;ss83Dss8W!-nDaKo
"9890n,`Re&+G/Mr"&;4s83Dsi.(Y8nDHP/&+K'Qr"&;l++F+unG!Ol&+KK-r"&;r#Q,,%rWE'/nG`Oe
&+KUMr"&;s_#+`4s1j!mnGhEo&+KVg4:gr]n/Mu.s7d!5nGiCp&+KVu":t#%rW!Jus8N'0nGiN=&+KW!
J.M/Ls1f07s8V!fnGiOH&+KW!n.5$gs7d,os8W!-nGiOd%gDJ&s8EPuJ,~>

%%EndBinary
grestore
np
f
68.8 171.2 mo
72.1 171.2 li
72.1 178.7 li
68.8 178.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 212.8 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 171.2 mo
79.7 171.2 li
79.7 178.9 li
74.7 178.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 212.8 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 162.137 mo
90.709 162.137 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 155.573 mo
90.709 155.573 li
@
97.427 150.915 mo
90.709 150.915 li
@
97.427 147.302 mo
90.709 147.302 li
@
97.427 144.35 mo
90.709 144.35 li
@
97.427 141.854 mo
90.709 141.854 li
@
97.427 139.692 mo
90.709 139.692 li
@
97.427 137.785 mo
90.709 137.785 li
@
104.145 136.079 mo
90.709 136.079 li
@
80 133.3 mo
81.9 133.3 li
81.9 133.8 li
80 133.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 250.7 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 130.4 mo
86 130.4 li
86 135.8 li
82.5 135.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.4 82.5 253.6 ]ct
<<
/T 1
/W 35 
/H 54 
/M[35 0 0 -54 0 54 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
<<)Fis5<p-!'fE@!!!Pfqu?^%i:m9P"5rYK!!2$9"8i/Wi",hf@),#,^gOs-s55#MJ,eFLJH,Z=+FsLl
n,S%>s7cSFs8Vio!WW2p!!3-"p]1<n!VcZorrMlprr3#o!<3!!n,WIf!Uq62rrM%#rr3#7@/g0.J7/EW
-2[c$s82iti;`]T#N5X[!$C/!qu@8cs82j%i;`]T"5s4Zp]9=PrrE,Xrr3"Li;W`W^u54l7_iEIs8V"b
_#OGm@)2gBi*aA#s57;#s8V"bi.(db@,QP7^gQ(bs1mRN+9-lLn.5O!i:$jD!T<_Q!!D0W!!!,ZrVup'
&)dHf!$C/!^]8lBs7c]ri.(~>

%%EndBinary
grestore
np
f
68.8 133.8 mo
72.1 133.8 li
72.1 141.3 li
68.8 141.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 250.2 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 133.8 mo
79.7 133.8 li
79.7 141.5 li
74.7 141.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 250.2 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 124.856 mo
90.709 124.856 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 118.291 mo
90.709 118.291 li
@
97.427 113.634 mo
90.709 113.634 li
@
97.427 110.021 mo
90.709 110.021 li
@
97.427 107.069 mo
90.709 107.069 li
@
97.427 104.573 mo
90.709 104.573 li
@
97.427 102.411 mo
90.709 102.411 li
@
97.427 100.504 mo
90.709 100.504 li
@
104.145 98.798 mo
90.709 98.798 li
@
80 96.6 mo
81.9 96.6 li
81.9 97.1 li
80 97.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80 287.4 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
82.5 93.7 mo
86 93.7 li
86 98.9 li
82.5 98.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.5 0 0 -5.2 82.5 290.3 ]ct
<<
/T 1
/W 35 
/H 52 
/M[35 0 0 -52 0 52 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!.b"J!.b"J!.b"J!.b"J!.b"J!.b"J!.b(K!T:cmrrM&nrr5mS^jlCai8B+bs5;g"s8V$H+92B!n.5R!
i:mQWs5<eUs8V$V!<<)Wrr>:`i;\<<s5<q8"97<Zn,WLHs82kHi;`cV+5m2!J.LT<s54.?s8N?!"5s4Z
rW1sVrrE,Xrr3"L@/g0,^gR0A!T5+"rrMU3rr3#g+TDC)p]/,0s7cT0s8Vio_#OH0!5O*ap]/*Zs7cT0
J,f!<^jlCR!8p*Ai#pr"s55$X&-'FQn-Asn@/'d#!9!YO!#+;g!!!&XrVup'i;\<-&)dKG!'^YFs82ot
i.(~>

%%EndBinary
grestore
np
f
68.8 96.3 mo
72.1 96.3 li
72.1 103.8 li
68.8 103.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 68.8 287.7 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
74.7 96.3 mo
79.7 96.3 li
79.7 104 li
74.7 104 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 74.7 287.7 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 87.575 mo
90.709 87.575 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 81.01 mo
90.709 81.01 li
@
97.427 76.352 mo
90.709 76.352 li
@
97.427 72.74 mo
90.709 72.74 li
@
97.427 69.788 mo
90.709 69.788 li
@
97.427 67.292 mo
90.709 67.292 li
@
97.427 65.13 mo
90.709 65.13 li
@
97.427 63.223 mo
90.709 63.223 li
@
104.145 61.517 mo
90.709 61.517 li
@
80.8 60 mo
82.7 60 li
82.7 60.5 li
80.8 60.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.9 0 0 -.5 80.8 324 ]ct
<<
/T 1
/W 19 
/H 5 
/M[19 0 0 -5 0 5 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J,g[A!$?^k++O>5J,gY~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
83.3 57.1 mo
85.6 57.1 li
85.6 62.3 li
83.3 62.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[2.3 0 0 -5.2 83.3 326.9 ]ct
<<
/T 1
/W 23 
/H 52 
/M[23 0 0 -52 0 52 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfKG!s8RZMs+14MJcGb$s8RZMs+14MJcGb$s8RZMs+14MJcGb$s8RZMs+14MJcGb$s8RZMs+14MJcGb$
s8RZMs+14MJcGb$s8RZMs+14MJcGb$s8RZMs+14MJcGb$s8RZMs+14MJcGb$p](?i!!2ip!VcWqp](?p
*8gktquQis!WW0#s8RZMs+14M_>jPOs8Tq8s5AJ~>

%%EndBinary
grestore
np
f
69.6 59.6 mo
72.9 59.6 li
72.9 67.1 li
69.6 67.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 69.6 324.4 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
75.5 59.6 mo
80.5 59.6 li
80.5 67.3 li
75.5 67.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[5 0 0 -7.7 75.5 324.4 ]ct
<<
/T 1
/W 50 
/H 77 
/M[50 0 0 -77 0 77 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
,ldo6"98D:s8N'!5QAP!qu?^-s1n[(!!!9(_#N<m!!3,8s1nU6"961:JGoNMJ&)*_!(]>irW!2u!$B#U
!$D1?+2IdS5Q:]o_"[nZs*t?ip]1?o^^%[E!WW2X"2OC.s8VQj_!hI+s6p-+i!9;^p]81g#QOi!!PlK?
#QOi!!5QA\s8Vus^q^K\s82l4^^pJFquFN_+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+92B?!'l&V
s8W&u5_))us8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^
!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_s8Duu5Q:]^!!#7_
s!Ie3J04gkrW#36+92B?!'l&Vs8W&u5_'sVs8E!`J04gkrW#36+9,sQrW#4!&-)\-!5QA\s8Vus^q^K\
s82l4^^'o>p]/+f#QOi!!PmUus8Vip^u,=ps6p')n,r^jn,pJq!WW2X"2O[3s8Tk>_"[p0s*t?iquAt]
!"ZmC!$D1?&&A/E#P\9@_#O?5"$aU$JGoNNJ&)*"rW!-%_#N<m!$21@_#Nm(!!E8:s82is&-'HFs*t)6
s1n[7n,r^j^jl~>

%%EndBinary
grestore
np
f
97.427 50.294 mo
90.709 50.294 li
1 /0 /CSD get_res sepcs
1 sep
@
97.427 43.729 mo
90.709 43.729 li
@
97.427 39.071 mo
90.709 39.071 li
@
97.427 35.458 mo
90.709 35.458 li
@
97.427 32.506 mo
90.709 32.506 li
@
97.427 30.011 mo
90.709 30.011 li
@
97.427 27.849 mo
90.709 27.849 li
@
97.427 25.941 mo
90.709 25.941 li
@
104.145 24.236 mo
90.709 24.236 li
@
82.8 21.3 mo
86.1 21.3 li
86.1 28.8 li
82.8 28.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.3 0 0 -7.5 82.8 362.7 ]ct
<<
/T 1
/W 33 
/H 75 
/M[33 0 0 -75 0 75 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!
J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3'#J,fNM
rr@QJrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WK
rrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrrE+Lrr3!!J,]HK!.Y"J!<@WKrr<$!
J,]HK!.Y"J!W[`LrVutKrr)luJ,]EI!It+J!!.TKrVutKrr)luJ,]EI,Cfa/!!%NKrVuqJs8V!WJ,fQ<
!.Y%KquD6Hs8E"Js8W&uJ,]HK!.Y"J!J#\!rrIY"rr3"LJ,]HK^jl@`!Pj3arrKobrr3#WIt.~>

%%EndBinary
grestore
np
f
538.583 322.485 mo
538.583 18.754 li
1 /0 /CSD get_res sepcs
1 sep
@
525.146 322.485 mo
538.583 322.485 li
@
531.865 311.262 mo
538.583 311.262 li
@
531.865 304.697 mo
538.583 304.697 li
@
531.865 300.039 mo
538.583 300.039 li
@
531.865 296.427 mo
538.583 296.427 li
@
531.865 293.475 mo
538.583 293.475 li
@
531.865 290.979 mo
538.583 290.979 li
@
531.865 288.817 mo
538.583 288.817 li
@
531.865 286.91 mo
538.583 286.91 li
@
525.146 285.204 mo
538.583 285.204 li
@
531.865 273.981 mo
538.583 273.981 li
@
531.865 267.416 mo
538.583 267.416 li
@
531.865 262.758 mo
538.583 262.758 li
@
531.865 259.145 mo
538.583 259.145 li
@
531.865 256.193 mo
538.583 256.193 li
@
531.865 253.697 mo
538.583 253.697 li
@
531.865 251.535 mo
538.583 251.535 li
@
531.865 249.628 mo
538.583 249.628 li
@
525.146 247.923 mo
538.583 247.923 li
@
531.865 236.7 mo
538.583 236.7 li
@
531.865 230.135 mo
538.583 230.135 li
@
531.865 225.477 mo
538.583 225.477 li
@
531.865 221.864 mo
538.583 221.864 li
@
531.865 218.912 mo
538.583 218.912 li
@
531.865 216.416 mo
538.583 216.416 li
@
531.865 214.254 mo
538.583 214.254 li
@
531.865 212.347 mo
538.583 212.347 li
@
525.146 210.641 mo
538.583 210.641 li
@
531.865 199.419 mo
538.583 199.419 li
@
531.865 192.854 mo
538.583 192.854 li
@
531.865 188.196 mo
538.583 188.196 li
@
531.865 184.583 mo
538.583 184.583 li
@
531.865 181.631 mo
538.583 181.631 li
@
531.865 179.135 mo
538.583 179.135 li
@
531.865 176.973 mo
538.583 176.973 li
@
531.865 175.066 mo
538.583 175.066 li
@
525.146 173.36 mo
538.583 173.36 li
@
531.865 162.137 mo
538.583 162.137 li
@
531.865 155.573 mo
538.583 155.573 li
@
531.865 150.915 mo
538.583 150.915 li
@
531.865 147.302 mo
538.583 147.302 li
@
531.865 144.35 mo
538.583 144.35 li
@
531.865 141.854 mo
538.583 141.854 li
@
531.865 139.692 mo
538.583 139.692 li
@
531.865 137.785 mo
538.583 137.785 li
@
525.146 136.079 mo
538.583 136.079 li
@
531.865 124.856 mo
538.583 124.856 li
@
531.865 118.291 mo
538.583 118.291 li
@
531.865 113.634 mo
538.583 113.634 li
@
531.865 110.021 mo
538.583 110.021 li
@
531.865 107.069 mo
538.583 107.069 li
@
531.865 104.573 mo
538.583 104.573 li
@
531.865 102.411 mo
538.583 102.411 li
@
531.865 100.504 mo
538.583 100.504 li
@
525.146 98.798 mo
538.583 98.798 li
@
531.865 87.575 mo
538.583 87.575 li
@
531.865 81.01 mo
538.583 81.01 li
@
531.865 76.352 mo
538.583 76.352 li
@
531.865 72.74 mo
538.583 72.74 li
@
531.865 69.788 mo
538.583 69.788 li
@
531.865 67.292 mo
538.583 67.292 li
@
531.865 65.13 mo
538.583 65.13 li
@
531.865 63.223 mo
538.583 63.223 li
@
525.146 61.517 mo
538.583 61.517 li
@
531.865 50.294 mo
538.583 50.294 li
@
531.865 43.729 mo
538.583 43.729 li
@
531.865 39.071 mo
538.583 39.071 li
@
531.865 35.458 mo
538.583 35.458 li
@
531.865 32.506 mo
538.583 32.506 li
@
531.865 30.011 mo
538.583 30.011 li
@
531.865 27.849 mo
538.583 27.849 li
@
531.865 25.941 mo
538.583 25.941 li
@
525.146 24.236 mo
538.583 24.236 li
@
1.5 lw
90.709 64.13 mo
99.892 64.13 li
@
106.408 64.13 mo
115.591 64.13 li
@
.75 lw
99.85 64.13 mo
99.85 59.73 106.45 59.73 106.45 64.13 cv
106.45 68.53 99.85 68.53 99.85 64.13 cv
cp
@
1.5 lw
115.591 96.873 mo
124.773 96.873 li
@
131.29 96.873 mo
140.472 96.873 li
@
.75 lw
124.731 96.873 mo
124.731 92.473 131.331 92.473 131.331 96.873 cv
131.331 101.273 124.731 101.273 124.731 96.873 cv
cp
@
1.5 lw
140.472 121.142 mo
149.655 121.142 li
@
156.172 121.142 mo
165.354 121.142 li
@
.75 lw
149.613 121.142 mo
149.613 116.742 156.213 116.742 156.213 121.142 cv
156.213 125.542 149.613 125.542 149.613 121.142 cv
cp
@
1.5 lw
165.354 140.861 mo
174.537 140.861 li
@
181.053 140.861 mo
190.236 140.861 li
@
.75 lw
174.495 140.861 mo
174.495 136.461 181.095 136.461 181.095 140.861 cv
181.095 145.261 174.495 145.261 174.495 140.861 cv
cp
@
1.5 lw
190.236 159.405 mo
199.419 159.405 li
@
205.935 159.405 mo
215.118 159.405 li
@
.75 lw
199.377 159.405 mo
199.377 155.005 205.977 155.005 205.977 159.405 cv
205.977 163.805 199.377 163.805 199.377 159.405 cv
cp
@
1.5 lw
215.118 174.971 mo
224.301 174.971 li
@
230.817 174.971 mo
240 174.971 li
@
.75 lw
224.259 174.971 mo
224.259 170.571 230.859 170.571 230.859 174.971 cv
230.859 179.371 224.259 179.371 224.259 174.971 cv
cp
@
1.5 lw
240 194.569 mo
249.183 194.569 li
@
255.699 194.569 mo
264.882 194.569 li
@
.75 lw
249.141 194.569 mo
249.141 190.169 255.741 190.169 255.741 194.569 cv
255.741 198.969 249.141 198.969 249.141 194.569 cv
cp
@
1.5 lw
277.323 208.793 mo
277.323 207.554 li
@
277.323 201.038 mo
277.323 200.78 li
@
264.882 204.296 mo
274.065 204.296 li
@
280.581 204.296 mo
289.764 204.296 li
@
.75 lw
274.023 204.296 mo
274.023 199.896 280.623 199.896 280.623 204.296 cv
280.623 208.696 274.023 208.696 274.023 204.296 cv
cp
@
1.5 lw
314.646 226.673 mo
314.646 224.416 li
@
314.646 217.9 mo
314.646 217.052 li
@
289.764 221.158 mo
311.387 221.158 li
@
317.904 221.158 mo
339.528 221.158 li
@
.75 lw
311.346 221.158 mo
311.346 216.758 317.946 216.758 317.946 221.158 cv
317.946 225.558 311.346 225.558 311.346 221.158 cv
cp
@
1.5 lw
364.409 250.168 mo
364.409 242.204 li
@
364.409 235.687 mo
364.409 232.381 li
@
339.528 238.946 mo
361.151 238.946 li
@
367.668 238.946 mo
389.291 238.946 li
@
.75 lw
361.109 238.946 mo
361.109 234.546 367.709 234.546 367.709 238.946 cv
367.709 243.346 361.109 243.346 361.109 238.946 cv
cp
@
1.5 lw
414.173 322.485 mo
414.173 264.649 li
@
414.173 258.133 mo
414.173 250.168 li
@
389.291 261.391 mo
410.915 261.391 li
@
417.431 261.391 mo
439.055 261.391 li
@
.75 lw
410.873 261.391 mo
410.873 256.991 417.473 256.991 417.473 261.391 cv
417.473 265.791 410.873 265.791 410.873 261.391 cv
cp
@
1.5 lw
90.709 64.056 mo
99.892 64.056 li
0 .990631 1 .000396735 cmyk
@
106.408 64.056 mo
115.591 64.056 li
@
99.85 64.056 mo
99.85 59.656 106.45 59.656 106.45 64.056 cv
106.45 68.456 99.85 68.456 99.85 64.056 cv
f
115.591 97.087 mo
124.773 97.087 li
@
131.29 97.087 mo
140.472 97.087 li
@
124.731 97.087 mo
124.731 92.687 131.331 92.687 131.331 97.087 cv
131.331 101.487 124.731 101.487 124.731 97.087 cv
f
140.472 121.774 mo
149.655 121.774 li
@
156.172 121.774 mo
165.354 121.774 li
@
149.613 121.774 mo
149.613 117.374 156.213 117.374 156.213 121.774 cv
156.213 126.174 149.613 126.174 149.613 121.774 cv
f
165.354 142.538 mo
174.537 142.538 li
@
181.053 142.538 mo
190.236 142.538 li
@
174.495 142.538 mo
174.495 138.138 181.095 138.138 181.095 142.538 cv
181.095 146.938 174.495 146.938 174.495 142.538 cv
f
190.236 162.498 mo
199.419 162.498 li
@
205.935 162.498 mo
215.118 162.498 li
@
199.377 162.498 mo
199.377 158.098 205.977 158.098 205.977 162.498 cv
205.977 166.898 199.377 166.898 199.377 162.498 cv
f
215.118 180.411 mo
224.301 180.411 li
@
230.817 180.411 mo
240 180.411 li
@
224.259 180.411 mo
224.259 176.011 230.859 176.011 230.859 180.411 cv
230.859 184.811 224.259 184.811 224.259 180.411 cv
f
252.441 201.075 mo
252.441 199.676 li
@
252.441 193.159 mo
252.441 192.805 li
@
240 196.417 mo
249.183 196.417 li
@
255.699 196.417 mo
264.882 196.417 li
@
249.141 196.417 mo
249.141 192.017 255.741 192.017 255.741 196.417 cv
255.741 200.817 249.141 200.817 249.141 196.417 cv
f
277.323 214.704 mo
277.323 210.898 li
@
277.323 204.382 mo
277.323 202.739 li
@
264.882 207.64 mo
274.065 207.64 li
@
280.581 207.64 mo
289.764 207.64 li
@
274.023 207.64 mo
274.023 203.24 280.623 203.24 280.623 207.64 cv
280.623 212.04 274.023 212.04 274.023 207.64 cv
f
314.646 225.926 mo
314.646 222.121 li
@
314.646 215.605 mo
314.646 213.961 li
@
289.764 218.863 mo
311.387 218.863 li
@
317.904 218.863 mo
339.528 218.863 li
@
311.346 218.863 mo
311.346 214.463 317.946 214.463 317.946 218.863 cv
317.946 223.263 311.346 223.263 311.346 218.863 cv
f
364.409 322.485 mo
364.409 255.789 li
@
364.409 249.273 mo
364.409 241.308 li
@
339.528 252.531 mo
361.151 252.531 li
@
367.668 252.531 mo
389.291 252.531 li
@
361.109 252.531 mo
361.109 248.131 367.709 248.131 367.709 252.531 cv
367.709 256.931 361.109 256.931 361.109 252.531 cv
f
90.709 64.13 mo
99.892 64.13 li
1 /0 /CSD get_res sepcs
1 sep
@
106.408 64.13 mo
115.591 64.13 li
@
.75 lw
99.85 64.13 mo
99.85 59.73 106.45 59.73 106.45 64.13 cv
106.45 68.53 99.85 68.53 99.85 64.13 cv
cp
@
1.5 lw
115.591 96.873 mo
124.773 96.873 li
@
131.29 96.873 mo
140.472 96.873 li
@
.75 lw
124.731 96.873 mo
124.731 92.473 131.331 92.473 131.331 96.873 cv
131.331 101.273 124.731 101.273 124.731 96.873 cv
cp
@
1.5 lw
140.472 121.142 mo
149.655 121.142 li
@
156.172 121.142 mo
165.354 121.142 li
@
.75 lw
149.613 121.142 mo
149.613 116.742 156.213 116.742 156.213 121.142 cv
156.213 125.542 149.613 125.542 149.613 121.142 cv
cp
@
1.5 lw
165.354 140.861 mo
174.537 140.861 li
@
181.053 140.861 mo
190.236 140.861 li
@
.75 lw
174.495 140.861 mo
174.495 136.461 181.095 136.461 181.095 140.861 cv
181.095 145.261 174.495 145.261 174.495 140.861 cv
cp
@
1.5 lw
190.236 159.405 mo
199.419 159.405 li
@
205.935 159.405 mo
215.118 159.405 li
@
.75 lw
199.377 159.405 mo
199.377 155.005 205.977 155.005 205.977 159.405 cv
205.977 163.805 199.377 163.805 199.377 159.405 cv
cp
@
1.5 lw
215.118 174.971 mo
224.301 174.971 li
@
230.817 174.971 mo
240 174.971 li
@
.75 lw
224.259 174.971 mo
224.259 170.571 230.859 170.571 230.859 174.971 cv
230.859 179.371 224.259 179.371 224.259 174.971 cv
cp
@
1.5 lw
240 194.569 mo
249.183 194.569 li
@
255.699 194.569 mo
264.882 194.569 li
@
.75 lw
249.141 194.569 mo
249.141 190.169 255.741 190.169 255.741 194.569 cv
255.741 198.969 249.141 198.969 249.141 194.569 cv
cp
@
1.5 lw
277.323 208.793 mo
277.323 207.554 li
@
277.323 201.038 mo
277.323 200.78 li
@
264.882 204.296 mo
274.065 204.296 li
@
280.581 204.296 mo
289.764 204.296 li
@
.75 lw
274.023 204.296 mo
274.023 199.896 280.623 199.896 280.623 204.296 cv
280.623 208.696 274.023 208.696 274.023 204.296 cv
cp
@
1.5 lw
314.646 226.673 mo
314.646 224.416 li
@
314.646 217.9 mo
314.646 217.052 li
@
289.764 221.158 mo
311.387 221.158 li
@
317.904 221.158 mo
339.528 221.158 li
@
.75 lw
311.346 221.158 mo
311.346 216.758 317.946 216.758 317.946 221.158 cv
317.946 225.558 311.346 225.558 311.346 221.158 cv
cp
@
1.5 lw
364.409 250.168 mo
364.409 242.204 li
@
364.409 235.687 mo
364.409 232.381 li
@
339.528 238.946 mo
361.151 238.946 li
@
367.668 238.946 mo
389.291 238.946 li
@
.75 lw
361.109 238.946 mo
361.109 234.546 367.709 234.546 367.709 238.946 cv
367.709 243.346 361.109 243.346 361.109 238.946 cv
cp
@
1.5 lw
414.173 322.485 mo
414.173 264.649 li
@
414.173 258.133 mo
414.173 250.168 li
@
389.291 261.391 mo
410.915 261.391 li
@
417.431 261.391 mo
439.055 261.391 li
@
.75 lw
410.873 261.391 mo
410.873 256.991 417.473 256.991 417.473 261.391 cv
417.473 265.791 410.873 265.791 410.873 261.391 cv
cp
@
140.7 46.301 mo
141.052 49.2 li
144.043 49.2 li
142.147 34.9 li
138.765 34.9 li
130.808 49.2 li
133.799 49.2 li
135.383 46.301 li
cp
140.427 43.9 mo
136.732 43.9 li
139.743 38.35 li
f
154.448 37.3 mo
158.593 37.3 li
159.121 34.899 li
147.704 34.899 li
147.176 37.3 li
151.516 37.3 li
148.994 49.2 li
151.926 49.2 li
f
163.927 34.9 mo
160.995 34.9 li
157.965 49.2 li
167.72 49.2 li
168.248 46.799 li
161.425 46.799 li
f
178.7 46.301 mo
179.052 49.2 li
182.043 49.2 li
180.147 34.9 li
176.765 34.9 li
168.808 49.2 li
171.799 49.2 li
173.383 46.301 li
cp
178.427 43.9 mo
174.732 43.9 li
177.743 38.35 li
f
196.348 39.289 mo
196.462 38.74 196.5 38.466 196.5 38.073 cv
196.5 35.955 194.701 34.7 191.626 34.7 cv
189.75 34.7 188.281 35.169 187.178 36.144 cv
186.075 37.099 185.399 38.561 185.399 39.945 cv
185.399 41.563 186.368 42.421 188.674 42.888 cv
190.574 43.278 li
192.338 43.629 192.9 44.019 192.9 44.935 cv
192.9 46.241 191.577 47.098 189.524 47.098 cv
187.728 47.098 186.701 46.468 186.701 45.378 cv
186.701 45.283 186.759 45.11 186.817 44.938 cv
183.977 44.938 li
183.919 45.325 183.899 45.519 183.899 45.79 cv
183.899 46.815 184.288 47.704 184.99 48.343 cv
185.925 49.194 187.269 49.6 189.139 49.6 cv
191.515 49.6 193.327 48.918 194.457 47.612 cv
195.275 46.696 195.801 45.273 195.801 43.987 cv
195.801 42.486 194.735 41.473 192.758 41.083 cv
190.645 40.654 li
188.823 40.284 188.3 39.972 188.3 39.231 cv
188.3 37.984 189.383 37.203 191.144 37.203 cv
192.789 37.203 193.699 37.774 193.699 38.837 cv
193.699 38.935 193.689 39.113 193.679 39.29 cv
f
207.2 43.2 mo
211.643 43.2 li
212.749 43.2 213.622 42.864 214.379 42.173 cv
215.233 41.382 215.601 40.454 215.601 39.13 cv
215.601 36.423 214.029 34.9 211.237 34.9 cv
205.4 34.9 li
205.4 49.2 li
207.201 49.2 li
cp
207.2 41.599 mo
207.2 36.501 li
211.01 36.501 li
212.758 36.501 213.8 37.457 213.8 39.05 cv
213.8 40.643 212.758 41.599 211.01 41.599 cv
f
218.099 39 mo
218.099 49.2 li
219.8 49.2 li
219.8 43.893 li
219.8 42.43 220.159 41.473 220.915 40.908 cv
221.406 40.537 221.879 40.42 222.976 40.401 cv
222.976 38.758 li
222.705 38.72 222.57 38.7 222.358 38.7 cv
221.317 38.7 220.526 39.315 219.6 40.814 cv
219.6 39.001 li
f
233.229 44.6 mo
233.229 43.052 233.111 42.124 232.818 41.37 cv
232.155 39.706 230.594 38.7 228.682 38.7 cv
225.834 38.7 224 40.874 224 44.209 cv
224 47.545 225.775 49.6 228.643 49.6 cv
230.984 49.6 232.604 48.289 233.014 46.092 cv
231.375 46.092 li
230.927 47.411 230.01 48.099 228.703 48.099 cv
227.669 48.099 226.792 47.633 226.246 46.778 cv
225.856 46.195 225.719 45.612 225.7 44.601 cv
cp
225.722 43.3 mo
225.859 41.421 227.012 40.2 228.654 40.2 cv
230.257 40.2 231.489 41.518 231.489 43.184 cv
231.489 43.223 231.489 43.261 231.469 43.3 cv
f
235.4 49.2 mo
237.101 49.2 li
237.101 34.9 li
235.4 34.9 li
cp
f
241.301 39 mo
239.7 39 li
239.7 49.2 li
241.301 49.2 li
cp
241.301 34.9 mo
239.7 34.9 li
239.7 37.002 li
241.301 37.002 li
f
243.999 39 mo
243.999 49.2 li
245.7 49.2 li
245.7 42.776 li
245.7 41.292 246.775 40.1 248.104 40.1 cv
249.315 40.1 250 40.843 250 42.151 cv
250 49.2 li
251.701 49.2 li
251.701 42.776 li
251.701 41.292 252.751 40.1 254.049 40.1 cv
255.213 40.1 255.901 40.862 255.901 42.151 cv
255.901 49.2 li
257.602 49.2 li
257.602 41.545 li
257.602 39.714 256.54 38.699 254.614 38.699 cv
253.238 38.699 252.413 39.1 251.45 40.226 cv
250.841 39.157 250.015 38.699 248.679 38.699 cv
247.303 38.699 246.399 39.197 245.515 40.402 cv
245.515 38.999 li
f
261.901 39 mo
260.3 39 li
260.3 49.2 li
261.901 49.2 li
cp
261.901 34.9 mo
260.3 34.9 li
260.3 37.002 li
261.901 37.002 li
f
264.799 39 mo
264.799 49.2 li
266.5 49.2 li
266.5 43.557 li
266.5 41.468 267.575 40.1 269.227 40.1 cv
270.494 40.1 271.301 40.882 271.301 42.112 cv
271.301 49.2 li
272.901 49.2 li
272.901 41.487 li
272.901 39.792 271.639 38.7 269.678 38.7 cv
268.164 38.7 267.193 39.276 266.3 40.677 cv
266.3 39 li
f
284.659 48.199 mo
284.479 48.199 284.399 48.199 284.299 48.199 cv
283.72 48.199 283.4 47.91 283.4 47.408 cv
283.4 41.462 li
283.4 39.666 282.075 38.7 279.562 38.7 cv
278.081 38.7 276.854 39.126 276.172 39.88 cv
275.704 40.402 275.51 40.982 275.471 41.987 cv
277.112 41.987 li
277.249 40.758 277.991 40.201 279.514 40.201 cv
280.979 40.201 281.8 40.745 281.8 41.714 cv
281.8 42.141 li
281.8 42.819 281.388 43.11 280.095 43.265 cv
277.783 43.556 277.43 43.633 276.803 43.885 cv
275.608 44.369 275.001 45.28 275.001 46.598 cv
275.001 48.439 276.294 49.602 278.37 49.602 cv
279.663 49.602 280.701 49.167 281.857 48.147 cv
281.974 49.149 282.484 49.602 283.541 49.602 cv
283.874 49.602 284.129 49.563 284.659 49.427 cv
cp
281.8 45.964 mo
281.8 46.508 281.642 46.839 281.152 47.285 cv
280.485 47.887 279.681 48.198 278.721 48.198 cv
277.446 48.198 276.701 47.596 276.701 46.566 cv
276.701 45.497 277.426 44.953 279.171 44.7 cv
280.896 44.467 281.25 44.389 281.799 44.136 cv
f
286.499 39 mo
286.499 49.2 li
288.2 49.2 li
288.2 43.893 li
288.2 42.43 288.559 41.473 289.315 40.908 cv
289.806 40.537 290.279 40.42 291.376 40.401 cv
291.376 38.758 li
291.105 38.72 290.97 38.7 290.758 38.7 cv
289.717 38.7 288.926 39.315 288 40.814 cv
288 39.001 li
f
299.185 39 mo
296.35 46.932 li
293.73 39 li
291.99 39 li
295.45 49.281 li
294.825 50.903 li
294.571 51.626 294.199 51.899 293.515 51.899 cv
293.28 51.899 293.006 51.846 292.654 51.741 cv
292.654 53.239 li
292.986 53.419 293.319 53.499 293.749 53.499 cv
294.277 53.499 294.844 53.323 295.274 53.011 cv
295.782 52.64 296.076 52.21 296.388 51.389 cv
300.943 39 li
f
387.9 44.1 mo
391.833 44.1 li
393.193 44.1 393.8 44.75 393.8 46.212 cv
393.8 47.267 li
393.8 47.998 393.929 48.712 394.139 49.199 cv
395.962 49.199 li
395.962 48.824 li
395.435 48.432 395.33 48.008 395.3 46.424 cv
395.283 44.465 394.963 43.878 393.632 43.323 cv
394.964 42.67 395.5 41.837 395.5 40.483 cv
395.5 38.426 394.211 37.3 391.88 37.3 cv
386.401 37.3 li
386.401 49.2 li
387.901 49.2 li
cp
387.9 42.8 mo
387.9 38.6 li
391.629 38.6 li
392.491 38.6 392.988 38.734 393.369 39.069 cv
393.783 39.421 394 39.973 394 40.709 cv
394 42.148 393.27 42.801 391.629 42.801 cv
f
405.4 43.5 mo
397.515 43.5 li
397.515 44.6 li
405.4 44.6 li
cp
405.4 46.3 mo
397.515 46.3 li
397.515 47.4 li
405.4 47.4 li
f
410.698 37.6 mo
409.617 37.6 408.635 38.084 408.029 38.9 cv
407.276 39.916 406.899 41.471 406.899 43.614 cv
406.899 47.524 408.209 49.601 410.698 49.601 cv
413.154 49.601 414.499 47.524 414.499 43.712 cv
414.499 41.455 414.137 39.949 413.367 38.9 cv
412.761 38.067 411.795 37.6 410.698 37.6 cv
cp
410.699 38.899 mo
412.238 38.899 413 40.47 413 43.577 cv
413 46.864 412.254 48.4 410.667 48.4 cv
409.161 48.4 408.4 46.798 408.4 43.626 cv
408.4 40.454 409.161 38.899 410.7 38.899 cv
f
416.701 49.2 mo
418.401 49.2 li
418.401 47.5 li
416.701 47.5 li
cp
f
427.913 40.7 mo
427.635 38.756 426.397 37.6 424.638 37.6 cv
423.367 37.6 422.227 38.225 421.543 39.258 cv
420.826 40.389 420.5 41.815 420.5 43.929 cv
420.5 45.88 420.795 47.125 421.483 48.158 cv
422.106 49.092 423.121 49.6 424.399 49.6 cv
426.611 49.6 428.201 47.962 428.201 45.686 cv
428.201 43.524 426.708 42 424.602 42 cv
423.441 42 422.53 42.444 421.9 43.3 cv
421.916 40.471 422.839 38.9 424.503 38.9 cv
425.524 38.9 426.233 39.557 426.464 40.701 cv
cp
424.448 43.3 mo
425.836 43.3 426.701 44.258 426.701 45.801 cv
426.701 47.246 425.721 48.301 424.399 48.301 cv
423.06 48.301 422.048 47.197 422.048 45.72 cv
422.048 44.291 423.028 43.3 424.448 43.3 cv
f
444.185 41.005 mo
443.711 38.38 442.215 37.099 439.614 37.099 cv
438.021 37.099 436.736 37.609 435.858 38.59 cv
434.785 39.768 434.2 41.469 434.2 43.4 cv
434.2 45.363 434.802 47.048 435.924 48.209 cv
436.835 49.158 438.006 49.599 439.551 49.599 cv
442.446 49.599 444.072 48.027 444.43 44.865 cv
442.866 44.865 li
442.736 45.695 442.573 46.259 442.329 46.74 cv
441.841 47.735 440.831 48.299 439.56 48.299 cv
437.199 48.299 435.7 46.385 435.7 43.383 cv
435.7 40.298 437.133 38.399 439.43 38.399 cv
440.391 38.399 441.287 38.7 441.775 39.167 cv
442.215 39.585 442.459 40.103 442.638 41.004 cv
f
446.2 49.2 mo
447.6 49.2 li
447.6 37.3 li
446.2 37.3 li
cp
f
456.7 49.2 mo
456.7 40.7 li
455.3 40.7 li
455.3 45.525 li
455.3 47.263 454.385 48.4 452.964 48.4 cv
451.886 48.4 451.2 47.75 451.2 46.727 cv
451.2 40.7 li
449.8 40.7 li
449.8 47.274 li
449.8 48.689 450.875 49.6 452.563 49.6 cv
453.837 49.6 454.648 49.153 455.459 48.011 cv
455.459 49.2 li
f
464.936 43.042 mo
464.92 41.352 463.818 40.4 461.857 40.4 cv
459.88 40.4 458.6 41.428 458.6 43.007 cv
458.6 44.343 459.285 44.978 461.307 45.466 cv
462.579 45.776 li
463.525 46.004 463.901 46.346 463.901 46.965 cv
463.901 47.763 463.096 48.301 461.898 48.301 cv
461.16 48.301 460.536 48.092 460.192 47.738 cv
459.979 47.497 459.88 47.255 459.798 46.659 cv
458.354 46.659 li
458.419 48.648 459.531 49.6 461.77 49.6 cv
463.927 49.6 465.3 48.541 465.3 46.896 cv
465.3 45.626 464.582 44.925 462.886 44.518 cv
461.582 44.208 li
460.473 43.947 460 43.589 460 42.987 cv
460 42.205 460.698 41.699 461.802 41.699 cv
462.89 41.699 463.474 42.162 463.507 43.041 cv
f
470.138 40.7 mo
468.8 40.7 li
468.8 38.318 li
467.4 38.318 li
467.4 40.7 li
466.228 40.7 li
466.228 41.8 li
467.4 41.8 li
467.4 48.249 li
467.4 49.112 467.983 49.6 469.036 49.6 cv
469.36 49.6 469.684 49.567 470.138 49.484 cv
470.138 48.32 li
469.967 48.38 469.765 48.4 469.515 48.4 cv
468.955 48.4 468.799 48.237 468.799 47.636 cv
468.799 41.8 li
470.137 41.8 li
f
478.857 45.4 mo
478.857 44.089 478.759 43.302 478.516 42.662 cv
477.966 41.252 476.67 40.399 475.084 40.399 cv
472.721 40.399 471.199 42.233 471.199 45.049 cv
471.199 47.865 472.672 49.6 475.051 49.6 cv
476.993 49.6 478.336 48.483 478.678 46.61 cv
477.316 46.61 li
476.943 47.721 476.181 48.301 475.095 48.301 cv
474.236 48.301 473.507 47.914 473.053 47.206 cv
472.729 46.722 472.616 46.239 472.599 45.401 cv
cp
472.602 44.3 mo
472.716 42.723 473.677 41.699 475.046 41.699 cv
476.382 41.699 477.408 42.804 477.408 44.202 cv
477.408 44.235 477.408 44.267 477.392 44.3 cv
f
480.601 40.7 mo
480.601 49.2 li
482.001 49.2 li
482.001 44.737 li
482.001 43.507 482.31 42.703 482.959 42.227 cv
483.381 41.915 483.788 41.817 484.73 41.799 cv
484.73 40.447 li
484.503 40.415 484.39 40.399 484.212 40.399 cv
483.339 40.399 482.676 40.926 481.901 42.21 cv
481.901 40.699 li
f
494.9 37.3 mo
494.9 45.673 li
494.9 46.619 494.802 47.158 494.525 47.566 cv
494.232 48.023 493.678 48.3 493.075 48.3 cv
491.934 48.3 491.299 47.536 491.299 46.152 cv
491.299 45.387 li
489.799 45.387 li
489.799 46.437 li
489.799 48.371 491.058 49.599 493.074 49.599 cv
495.124 49.599 496.398 48.307 496.398 46.246 cv
496.398 37.299 li
f
505.957 45.4 mo
505.957 44.089 505.859 43.302 505.616 42.662 cv
505.066 41.252 503.77 40.399 502.184 40.399 cv
499.821 40.399 498.299 42.233 498.299 45.049 cv
498.299 47.865 499.772 49.6 502.151 49.6 cv
504.093 49.6 505.436 48.483 505.778 46.61 cv
504.416 46.61 li
504.043 47.721 503.281 48.301 502.195 48.301 cv
501.336 48.301 500.607 47.914 500.153 47.206 cv
499.829 46.722 499.716 46.239 499.699 45.401 cv
cp
499.702 44.3 mo
499.816 42.723 500.777 41.699 502.146 41.699 cv
503.482 41.699 504.508 42.804 504.508 44.202 cv
504.508 44.235 504.508 44.267 504.492 44.3 cv
f
510.838 40.7 mo
509.5 40.7 li
509.5 38.318 li
508.1 38.318 li
508.1 40.7 li
506.928 40.7 li
506.928 41.8 li
508.1 41.8 li
508.1 48.249 li
508.1 49.112 508.683 49.6 509.736 49.6 cv
510.06 49.6 510.384 49.567 510.838 49.484 cv
510.838 48.32 li
510.667 48.38 510.465 48.4 510.215 48.4 cv
509.655 48.4 509.499 48.237 509.499 47.636 cv
509.499 41.8 li
510.837 41.8 li
f
518.336 43.042 mo
518.32 41.352 517.218 40.4 515.257 40.4 cv
513.28 40.4 512 41.428 512 43.007 cv
512 44.343 512.685 44.978 514.707 45.466 cv
515.979 45.776 li
516.925 46.004 517.301 46.346 517.301 46.965 cv
517.301 47.763 516.496 48.301 515.298 48.301 cv
514.56 48.301 513.936 48.092 513.592 47.738 cv
513.379 47.497 513.28 47.255 513.198 46.659 cv
511.754 46.659 li
511.819 48.648 512.931 49.6 515.17 49.6 cv
517.327 49.6 518.7 48.541 518.7 46.896 cv
518.7 45.626 517.982 44.925 516.286 44.518 cv
514.982 44.208 li
513.873 43.947 513.4 43.589 513.4 42.987 cv
513.4 42.205 514.098 41.699 515.202 41.699 cv
516.29 41.699 516.874 42.162 516.907 43.041 cv
f
376.7 47.8 mo
379.8 47.8 li
379.8 55.1 li
376.7 55.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.1 0 0 -7.3 376.7 336.2 ]ct
<<
/T 1
/W 31 
/H 73 
/M[31 0 0 -73 0 73 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IfKH+"98CO!WW-!!WW-!!WW&t!WVop!WVop!WVop!WVops8Vips8Virs8Virs8Virs8Virs8Virs8Vir
s8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Virs8Vir
IfKHC"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr
"98Dr"98Dr"98,r!!2ip!!2ip!!2ip!!2ip!!2ip!!2ip!!3,p"98Dr"98Dr"98Dr"98Dr"98Dr"98Dr
,m42Ip]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LQrp]LPH~>

%%EndBinary
grestore
np
f
341.722 45.6 mo
342.944 49.2 li
344.638 49.2 li
340.468 37.3 li
338.513 37.3 li
334.277 49.2 li
335.89 49.2 li
337.144 45.6 li
cp
341.298 44.3 mo
337.518 44.3 li
339.473 38.953 li
1 /0 /CSD get_res sepcs
1 sep
f
345.901 40.7 mo
345.901 49.2 li
347.301 49.2 li
347.301 44.487 li
347.301 42.742 348.219 41.599 349.63 41.599 cv
350.712 41.599 351.401 42.253 351.401 43.28 cv
351.401 49.2 li
352.801 49.2 li
352.801 42.735 li
352.801 41.314 351.73 40.4 350.067 40.4 cv
348.783 40.4 347.96 40.895 347.202 42.098 cv
347.202 40.701 li
f
358.038 40.7 mo
356.7 40.7 li
356.7 38.318 li
355.3 38.318 li
355.3 40.7 li
354.128 40.7 li
354.128 41.8 li
355.3 41.8 li
355.3 48.249 li
355.3 49.112 355.883 49.6 356.936 49.6 cv
357.26 49.6 357.584 49.567 358.038 49.484 cv
358.038 48.32 li
357.867 48.38 357.665 48.4 357.415 48.4 cv
356.855 48.4 356.699 48.237 356.699 47.636 cv
356.699 41.8 li
358.037 41.8 li
f
360.899 40.7 mo
359.499 40.7 li
359.499 49.2 li
360.899 49.2 li
cp
360.899 37.3 mo
359.499 37.3 li
359.499 39.034 li
360.899 39.034 li
f
362.749 45.3 mo
366.626 45.3 li
366.626 44.1 li
362.749 44.1 li
cp
f
369.8 37.3 mo
368.4 37.3 li
368.4 49.2 li
369.8 49.2 li
369.8 45.877 li
371.119 44.574 li
374 49.201 li
375.678 49.201 li
372.193 43.638 li
375.156 40.701 li
373.414 40.701 li
369.8 44.281 li
f
474.901 80.354 mo
475.9 80.354 li
475.9 65 li
474.901 65 li
cp
f
478.233 73.674 mo
486.199 77.046 li
486.199 75.759 li
479.78 73.087 li
486.199 70.464 li
486.199 69.177 li
478.233 72.549 li
f
492.3 74.1 mo
492.3 76.9 li
493.7 76.9 li
493.7 74.1 li
495.472 74.1 li
495.472 72.8 li
493.7 72.8 li
493.7 65.299 li
492.652 65.299 li
487.457 72.581 li
487.457 74.099 li
cp
492.3 72.8 mo
488.711 72.8 li
492.3 67.793 li
f
497.501 76.9 mo
499.201 76.9 li
499.201 75.2 li
497.501 75.2 li
cp
f
508.393 65.3 mo
502.397 65.3 li
501.529 71.638 li
502.85 71.638 li
503.519 70.868 504.074 70.6 504.971 70.6 cv
506.521 70.6 507.5 71.652 507.5 73.349 cv
507.5 74.998 506.536 76.001 504.97 76.001 cv
503.714 76.001 502.947 75.367 502.605 74.066 cv
501.17 74.066 li
501.366 75.019 501.53 75.478 501.874 75.905 cv
502.529 76.791 503.708 77.3 505.019 77.3 cv
507.361 77.3 509 75.603 509 73.154 cv
509 70.868 507.475 69.3 505.247 69.3 cv
504.428 69.3 503.773 69.509 503.101 69.992 cv
503.56 66.699 li
508.393 66.699 li
f
466.225 76.9 mo
467.649 76.9 li
467.649 70.984 li
468.231 70.107 468.798 69.7 469.51 69.7 cv
470.432 69.7 471 70.334 471 71.373 cv
471 78.502 li
471 79.054 471.1 79.672 471.334 80.5 cv
472.886 80.5 li
472.605 79.707 472.5 79.286 472.5 78.881 cv
472.5 70.933 li
472.5 69.589 471.525 68.6 470.178 68.6 cv
469.22 68.6 468.538 69.025 467.661 70.204 cv
467.58 69.724 467.499 69.516 467.353 69.292 cv
467.077 68.924 466.606 68.7 466.119 68.7 cv
465.47 68.7 464.853 69.103 464.544 69.747 cv
464.365 70.133 464.301 70.472 464.301 71.067 cv
464.689 71.067 li
464.786 70.067 465.012 69.599 465.401 69.599 cv
465.886 69.599 466.242 70.234 466.242 71.112 cv
f
432.7 71.599 mo
433.487 71.599 li
435.078 71.599 435.899 72.314 435.899 73.694 cv
435.899 75.139 434.999 76 433.495 76 cv
431.926 76 431.158 75.219 431.059 73.544 cv
429.621 73.544 li
429.687 74.48 429.851 75.086 430.13 75.611 cv
430.721 76.726 431.869 77.3 433.46 77.3 cv
435.855 77.3 437.399 75.874 437.399 73.678 cv
437.399 72.203 436.812 71.383 435.388 70.908 cv
436.463 70.482 437 69.662 437 68.499 cv
437 66.499 435.686 65.3 433.498 65.3 cv
431.18 65.3 429.949 66.588 429.9 69.081 cv
431.3 69.081 li
431.316 68.379 431.381 67.988 431.559 67.629 cv
431.882 66.992 432.593 66.6 433.482 66.6 cv
434.742 66.6 435.502 67.354 435.502 68.582 cv
435.502 69.401 435.212 69.892 434.585 70.154 cv
434.199 70.318 433.7 70.383 432.702 70.4 cv
f
439.501 76.9 mo
441.201 76.9 li
441.201 75.2 li
439.501 75.2 li
cp
f
450.919 75.5 mo
444.862 75.5 li
445.008 74.549 445.528 73.942 446.941 73.106 cv
448.565 72.22 li
450.173 71.334 451.001 70.138 451.001 68.711 cv
451.001 67.743 450.61 66.841 449.928 66.218 cv
449.246 65.595 448.402 65.299 447.314 65.299 cv
445.853 65.299 444.765 65.828 444.132 66.817 cv
443.726 67.444 443.547 68.169 443.515 69.356 cv
444.935 69.356 li
444.983 68.573 445.08 68.1 445.274 67.725 cv
445.645 67.023 446.387 66.598 447.242 66.598 cv
448.533 66.598 449.502 67.529 449.502 68.768 cv
449.502 69.68 448.969 70.463 447.952 71.049 cv
446.467 71.896 li
444.078 73.265 443.385 74.357 443.255 76.899 cv
450.92 76.899 li
f
452.433 73.674 mo
460.399 77.046 li
460.399 75.759 li
453.98 73.087 li
460.399 70.464 li
460.399 69.177 li
452.433 72.549 li
f
462.801 80.354 mo
463.8 80.354 li
463.8 65 li
462.801 65 li
cp
f
357.165 168.697 mo
470.551 168.697 li
470.551 95.648 li
357.165 95.648 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
362.053 168.697 mo
362.053 171.955 li
473.809 171.955 li
473.809 100.535 li
470.551 100.535 li
470.551 168.697 li
ef
357.165 168.697 mo
470.551 168.697 li
470.551 95.648 li
357.165 95.648 li
cp
@
386.6 102.1 mo
395.3 102.1 li
395.3 112.8 li
386.6 112.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[8.7 0 0 -10.7 386.6 281.9 ]ct
<<
/T 1
/W 87 
/H 107 
/M[87 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!<<6!rrDur!!!,urrDin!!!,urrDin!!!,urri)s!WW?"rri)s"onc&rrhfk%KHV.rrhfk*WQ<>rrhfk
*WQ<>rrhfk4ob]^rrhfk4ob]^rrh6[IK0KKrs&N'huJ3+"8i*$huJ3+"8i*$huJ3+"8i*$huJ3+"8i*$
huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*$huN`V"8i*#huN`V!!E,u
"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E,u
"Q0:Z!!E,u"Q0:Z!!E,u"Q0:Z!!E0!"ol@<rW!&trrg+<rW!&trrg+<rW!&trrg+<rW!&trrdiQrW!&t
rrdiQrW!&trr`<(rW!&urrrB%"9&9&r;Qs"!!E3#"8r0&qu@!$!!E0!"n2KsrW!&urrp1<&,lP2rVm$"
!!",?p](=ZrqHHoJ,]3C!WW/p!!39&rqQNq&-)Y)!!5CbrqQNq+92?9!!3E*rqQNq"98Aq!!3-!q#CNt
J,TEMrVm*"!!#7_!!E0!"i(*[rW!&urrqll&,lP2r;Qru!!iK'"8r0&rW!'"!!E,u"98Q'!!E,u"FpOP
!!E,u"FpOP!!E,u"Mb$:!!E,u"Mb$:!!E,u"lKB0!!E9!rrh6[IK0KIrrh6[IK0KIrrhfkIK0KIrrhfk
4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrhfk4ob]^rrDNj
!'UAbqu6fg!'UAbqu6fW!'UAbqu6fW!'UAbqu6fW!'UAbqu6fW!.FnMqu6f7!.FnMqu6f7!.FnMqu6eL
!.FnMqu6d!!<)s#qu6d!!<)s#r;R$$!!3'!"98E#rrr<#!WE'$r;Qri!!3'!"8r0&^]4K9!!E3""T/6"
#QFJu!=/W!!!*W0p](=:rqHHo5Q:EX!WW/p!!33$rqQNq#QOf!!!*W1!<2co!e:7Lq>^U"s8W)p!!@`N
s8IN~>

%%EndBinary
grestore
np
f
396.4 104.9 mo
403.4 104.9 li
403.4 113.1 li
396.4 113.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 396.4 279.1 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
403.7 102.1 mo
407.8 102.1 li
407.8 112.8 li
403.7 112.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4.1 0 0 -10.7 403.7 281.9 ]ct
<<
/T 1
/W 41 
/H 107 
/M[41 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
"98B$&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu
&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,uS1rr<T.rrE*1rVllu&,lM/!"]&.
!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/
rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1
rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVlit
!"]&.!<<Z/rrE*1rVm!#&-)\-r;ZkJr;?TrJ,K6F!It%G!!.TIr;ZkJr;?TrJ,K6F!It%G!!.TIr;ZkJ
r;?TuJ,fNK&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1rVllu&,lM/!"]&.!<<Z/rrE*1
rVllu&,lM/!"]&.!<<Z/rrE*)rVllu"9&6#!!3&u!e:9#rr4d)!!%NKs*t(LJ,fPa!!%NKs1eU7J,fQ,
!!%NKs6p!gJ,fQD!!%NKs82isJ,fQJ!!%NJrrKn8!.Y"J!r)cqJ,~>

%%EndBinary
grestore
np
f
408.6 104.9 mo
415.6 104.9 li
415.6 113.1 li
408.6 113.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 408.6 279.1 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
416.7 104.9 mo
420.9 104.9 li
420.9 112.8 li
416.7 112.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4.2 0 0 -7.9 416.7 279.1 ]ct
<<
/T 1
/W 42 
/H 79 
/M[42 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnms8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZ
s8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0
IK4lts1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gD
s1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0
IXhCt_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[mos8Tn0!'gM`_"[mos8Tn0!'gM`_"[mos8Tn0!$D7@
_"[mOs8Tn0!"],0_"[m?s8Tn0!!iQ(_"[m7s8Tn0!!E9$_"[m1s8Tn0!!*'!_"[m0J,d=Z!!#7`_"[m0
&J+oWp],gHs1nC0^]6U7p]/,/!!;oqi;N]Xp]0g_!!;oqq#16pp]1*g!!;oqr;HZtp]1<m!!;oqs8E!1
p]1>E!!)cos53kWp]1?`!!*#u!rN#urVlnK!.Y~>

%%EndBinary
grestore
np
f
421.6 104.9 mo
428.6 104.9 li
428.6 113.1 li
421.6 113.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 421.6 279.1 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
429.8 104.9 mo
436.4 104.9 li
436.4 112.8 li
429.8 112.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.6 0 0 -7.9 429.8 279.1 ]ct
<<
/T 1
/W 66 
/H 79 
/M[66 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!r)bFrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#
p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HMqu?`l
!<@WKrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr3-!!!)co
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)co
J,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p]*PX
rrr<#!;HOYrr30"!!)co5Q:Zdqu?`l!'gJ_"oJ?#p])E8rrr<#!;HO9rr30"!!)co+9)9Equ?`l!"])7
s8Vus!;HO)rr3/s!!)co#QF`,p](<h!!E6#"o&&tp](Eqrrqll!;HNprr3/k!!)co!<3!RhuEcP!!%NK
s1eV"p](:9s8RTL5kk>0&-)Y0!'p;Z^]XW7!!'h0!5JSahuEbmp]07N!!E><p]0g^!!WJ>p]1'h!!WE'
"2O[3r;?Tu#Jg*7rqug"&&@r?s8;p$+2IXOs1nU6"[Bft!<;!V!"/bAp]1?h!!!-$_#F?>rVup/s1nC0
J,]HLqu?_I~>

%%EndBinary
grestore
np
f
437.9 104.9 mo
444.4 104.9 li
444.4 113.1 li
437.9 113.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.5 0 0 -8.2 437.9 279.1 ]ct
<<
/T 1
/W 65 
/H 82 
/M[65 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3#g!<3!5JH,ZK!!!9(s+(.Lp](9ps8RWLs1nU6"[E$;s8RWK!!FDDJH,WI!!EQ,JH,QG!!EE(JH,-;
!!E?&JH+R*!!E7Os1nO4"+Pk$JG]Bf5Cica!!iE%!$?ak!!#7`^]4mqrVurus6p"!JGpMg"98Dr!!e&P
!!iQ(qu?tPp](j)s8E!#JG9*drr3-%"+]k@5Q:ZdJ,t2i!.Y"J"b6W(huJ9+rrg+<JD^G+rrg+;JD^G+
rrh6[JA;3arrh6[JA;3arrh6[JA;9crrhfkJA;9crrhfk!.Y1Mrrhfk!.Y=Qrrhfk!.Y=OrrR_$#Q+N&
J:In%rrR]N#Q+N&J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,W
rr[cO&-)S-!e:7]qu6_J!"\u,!e:7]qu6_J!"\u,!e:7]qu6_JJ-YuO!e>e+qu6_JJ-YuO!e>e+qu6_J
J-YuO!e>e'qu6_J^]XQ8"RlDA^]XQ8#2fK3^]XW:#64_]!._icrVm#Y!.`u.rVm#Y!.`u-rVm#9!J').
rVm&:!J'Y>J,]HO^]AuT!.Y"J"b6W(p]*PXrriB)JG9*drr4eT"+^:L&-)\/!!@cL!!iQ(qu?tPrW!'#
s7cR!JH#TLs8V!W%tOZ[!'gL6!"XV[J,fiP"TSNEJH*F_!!=<ns5<eT"$_>9nGE7gIt7Roqu?j!JH,QG
!!EE(JH,ZJ!!NW-JH,Y"rW!*4s+(.Li;N]a5Q?96s7cQo!WW1Mrr3-%!!iQ(JH#QLn,WIf!.]S~>

%%EndBinary
grestore
np
f
445.3 104.9 mo
452.3 104.9 li
452.3 113.1 li
445.3 113.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 445.3 279.1 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
457.5 102.1 mo
468.1 102.1 li
468.1 112.8 li
457.5 112.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[10.6 0 0 -10.7 457.5 281.9 ]ct
<<
/T 1
/W 106 
/H 107 
/M[106 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!rN$_rr3"L!<3!%qu?`p!'gJ_rrE&u"oJ?#quAt\s8N)urrr<#!;lg]rr5^n!.Y%Kqu?`p!'gM`rVuqJ
s8Vus!;lg]s8W&u!.Y%Kqu?`p!'gM`rVup_s8Vus!;lg]s8Vus!'gM`qu?`p!'gM`qu?^]s8Vus!;q9G
5QCc]!!",@s82isquAt]s7cQo+92B=!!)os5QCcY!!",@s82isquAt]s7cQo&-)\-!!)os5QCcQ!!!Q0
s82isquAt]s6p#=&-)\-!!)os5QCcQ!.Y=Ss82isquAt]s53p.#QOi%!!)os5QCcA!Pes?s82isquD11
s8Tk8^]XW:qu?`p!'gM`^]V@Ss8Vus!;lg]s8Tk:huj#Zqu?`p!'gM`J-4^1s8Vus!;lg]s8RTShuWlX
qu?`p!'gM`J-YQEs8Vus!;lg]s8N'(n,WLgqu?`p!'gM`!"\Q!s8Vus!;lg]s8N'0p]1?oqu?`p!'br4
rW!K(!.Y%H!!)os5QC]_+8>hcs82isquAt]rW"&8!'gM]!!)os5QCW]+8c+'s82isquAt]quAtZ!'gM]
!!)os5QCW]5PtL's82isquAt]p]*PX!$D7=!!)os5QCKYJ,TEis82isquAt]p],gC!"],-!!)os5Q?3%
!.Y"K&-)P-!;lg]s6p$grr<T0qu?`p!'gMQ!<<'!#QO]%!;lg]s53nWs*t@Squ?`p!'gMA!WW1M#QO]%
!;lg]s53qXs*t4Oqu?`p!'gM!!WW28"989!!;lg]s1ea:s1ea:qu?`p!'gM!"98D:!WW&t!;lg]s+#P#
s8V!Xs82isquAt]J-Z,ShuWlU!!)os5Q:]gs8V!Ws82isquAt]!!iQ(n,WLd!!)os5Q:]os8VQgs82is
quAt\!"],0n,Rt9!!)os5Q1Wns8VioJ,B9HquAt\!$D7@p],gA!!)os5PtL's8Vio5PtK]quAtZ!$>/>
s82j]qu?`p!'gA]5QCc]!'gA]!;lg]p]*PYs82j=qu?`p!'g5Y5QCc_!$D+=!;lg]p],gDs8E!?qu?`p
!'frQJ,fQJ!"\u-!;lg]n,Rt;rs8Z9qu?`p!'frQrVm0(&,ZD-quAt>!<)p*!!iE%!;lg]huWlX$ig6W
#Q+Q%quAt>!WE$)J-YuP!;lg]^]FE6$%N-U!!)os5JRC"rs?ICqu?`p!'e7$rVm2>"8i-!quAs3"9&6+
^]F?5!;lg]J-Z&Q$/bj^!!)os5Ca";rs@Taqu?`p!'^GgrVm2^!;lfsquAq]&,uS9s6p$d!!)os56)5m
rsA/pHiO0E!'UAnrVm2n!.4bHquAn\+8u3Gp],[A!;lg\!$D1>$2=K_!!)os49-K%rsAH#49,BZ!'C6G
rVm3%!'C5]quA\V5Q1Tgqu@]:!;lgV!'gG^$2acC!!)os2unI,rsAZ))up!:!&+D&rVm3'!"8i-quADN
J,TBQrW!?,!;lgN!;ld$!"8i-qu@i>qu6m$"98H"!$D:=rs&N,!!)os+9DB>#ClpW!;lfs!W2lsJGoNN
qu?]tqu6YHrW!&u!!!,urrBk6!!E-!!!E,u!5SR6"8i-!"8i)u_#=<9qu?^%qu6ZSrW!&u!!!9$rrD!V
!!E-!!!iE$!9!hV"8i-!&,ZA,nGWCiqu?^-qu6ZcrW!&u!!!Q,rrDQf!!E-!!$D+<!;QNn"8i-!+8c'<
q#16qqu?^=qu6ZkrW!&u!!#7\rrDur!!E-!!'gA\!;ufr"8i-!5PtH\r;HZuqu?_Hqu6ZqrW!&u!!%NG
rrE&t!.Y~>

%%EndBinary
grestore
np
f
469.7 101.9 mo
479.1 101.9 li
479.1 113.1 li
469.7 113.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[9.4 0 0 -11.2 469.7 282.1 ]ct
<<
/T 1
/W 94 
/H 112 
/M[94 0 0 -112 0 112 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
r;Qi6!'gJ_!;ufq!;QNnrr2urrVlkJrW!$Bs8W#rrrE&s!!<?'s8;lr!:]md!rr;urr2u6qu?d_s8;lr
!.atI"V:Y2s8W)q!!NW-r;ZfpqZ$d#s8;osq"asns8;osnGN@d!%NKrs8V!W!!iOS!!#7]s8Tk7!<<)o
!!",=s8RTL"98E#!!!Q-s8N'!&,uS7J,g,Xs8Duu5Q:ZfhuF#[s82isrVm,l!!E0!p](?nrs/H%!W;um
!!E3"#Q=](r;Z6d#Q4T+!!)rshuF;crrdiPr;Y[U!$D.=#(Q]$s1eV!r;Qu:!.=fs!.XqH"lKACs*t+H
rrq<\4T>B]qu6ih!'L8]!W2m#n,OI.!!E,u"o&';rW!&trrr/t*<#pCqu6ip!"Ac*#Q+N)qu@0'!"\u,
"oJ?/qu@9)rrr<#"S_s-qu6j!!!N&s+8c'ArW!)r!$D+<"o\K)n,OR-rrrB%"RlCUqu6j!!!)Kg5PkB_
!!)Kg5PkB_!!(pW5PkB_!!(pWJ,90K!!(pWJ,fBF"8q'WJ,0*Hr87R)q>UQphuJ9&rr`2W!.XhE!rTh6
q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6q#:En
^]=00!rTh6q#:En^]=00!rTh6q#:En^]=00!rTh6rVufq!rTh6q#:HohuJ9&rr`2W!.XhE"8q'WJ,0*H
r87R)q>UQphuJ9&rr`2W!.XhE"8qWg5Pb<]r9s\Nq>UQpn,P]KrrN&e!<>@[rr`2o!$D%:"8qoo+8Pp=
r:g76qu6it!"AW&&,ZA1qu@0'!"\u,"oJ?/qu@9)rrr/t*<#pCqu6ip!$(t<#Q+N)p])<5!!E,u"o&'[
rr<0!rs&Mm!'L8]!W2m#n,PTNJ-#QI"lKACs*t+Hrs%B]I/gt^J,K<N^]8c^^]8l^rs$7=r;Y[T5Q(Nc
J,oNIn,OR.rs!uSr;Z6d&,cG3!!3#tp](Qtrs/N'"8r2s!!E3"#5eH'r;ZZp!!)ut#l"B)r;Z`r!.Y"J
#iG[fr;Zcs!$D4?,(KY(r;ZeI!!iQ(rVup?r;Zf4!!*'!n,NGQr;ZfT!!!Q0rW!(Nr;Zfdq>^YJr;Zfl
q>^Zur;ZfpqZ$["s8;lrqZ$[&s8;lr!.atI!"T,1r;Q]ri;<QV5QCZ\rrDil!!<3#r;Q]rrqug!"98E!
rVll5rW!$2s8W#qrrDin!<2uur;?QrhuFkurrDtI~>

%%EndBinary
grestore
np
f
361.417 116.345 mo
381.26 116.345 li
381.26 99.301 li
361.417 99.301 li
cp
.0639048 0 .996094 0 cmyk
f
1.5 lw
361.417 99.301 mo
381.26 99.301 li
@
361.417 116.345 mo
381.26 116.345 li
381.26 99.301 li
@
361.417 116.345 mo
361.417 99.301 li
@
475.4 131.2 mo
482.7 131.2 li
482.7 134.8 li
475.4 134.8 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -3.6 475.4 252.8 ]ct
<<
/T 1
/W 73 
/H 36 
/M[73 0 0 -36 0 36 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!5SC1!Iqo\!!.Sbq#CGF_"ds2J&(j[!Iqo\!!.Sbq#CGF_"ds2J&(j[!Iqo\!!%N2s+::JrrBk1!!.Sb
q#CGF_"ds2J&(j[!Iqo\!!.Sbq#CGF_"ds2J&(j[!Iqo\!!.Sbq#CDEJ,~>

%%EndBinary
grestore
np
f
483.9 126 mo
491 126 li
491 136.4 li
483.9 136.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.1 0 0 -10.4 483.9 258 ]ct
<<
/T 1
/W 71 
/H 104 
/M[71 0 0 -104 0 104 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
"98?##Q=Z*rr;uu#Q=Z*rr;uu#Q=Z*rr;uu"9&6&rr;uu"9&6&rr<"K"9&6&rr<"K"9&6&rr<"K"9&6&
rr<"K!WE$$rr<#6!WE$$rr<#6!WE$$rr<#6!WE$$rr<#6!<)p#rr<#V!<)ourr3'"huN`U"TJH$huN`U
"oeQ%huJ9+rrrE%s6p#<rr30$s8VQgJ,]HOrr<#f!.Y"J"oeQ%p]*PXrrrE%s7cRYrr30$s8Vio5Q:Zd
rr<#r!$D4?"oeQ%qu@i<rrrE%s82j=rr30$s8W&u+9)9Drr<#t!"])/!ri6"!r`01rr2utrr3!!&,uS/
rr2ou!!iN'!<2ut!<<B(rrE&trrIWTrr2utrr3"L"9/<#rr2ou^]XT9!<2ut!Pea8rrE&trrKn9rr2ut
rr3#W!WN*!rr2ouhuNcV!<2ut!Up*grrE&trrqllJ,fQJrr3/s!.Y%Krr2p$p],gDs8N#t"o&'^s8W)t
rrr<#5QCc_rr30"!$D7@rr2p$rW"&?s8N#t"o\K4s8W)srr`<4s8W)srr`<4s8W)srrdiWs8W)srrdiW
s8W)srrg+>s8W)srrg+>s8W)srrh6\s8W)srrh6\s8W)srrhfks8W)srri)ss8W)srri)sJ,fNHrri6"
5QC`]rri6"5QC`]rri<$+92?=rri<$+92?<rrW63s8Mrr"+Up^rqucuJ-Z,Rr;Ql7#QOf$rr^%=s8Mrr
"5j4[rqucun,`Rgr;Qlg!<<&rrr`#rs8Mrr"8DkGrqucuquAt\r;Qlu!'gJ\rr`6#+9)0;!WWc1qu6_J
&,uJ+!e:OTqu6`5"9/2t!oO1[qu6`U!WMur!q63hqu6`m!<2lq!r)bEqu6`q!'^;[!r`0`qu6`s!$;":
!<<W+rrIWSqYpW4#/L'8!<U(4!!'h1!!'h1!!'h1!!'h1!!'h1!!'h3!!3-#_"ds1_"ds1_"ds1_"ds1
_"dt\~>

%%EndBinary
grestore
np
f
495.4 125.7 mo
504.4 125.7 li
504.4 136.4 li
495.4 136.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[9 0 0 -10.7 495.4 258.3 ]ct
<<
/T 1
/W 90 
/H 107 
/M[90 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
r;QeJ!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E
!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!W)iqrrIWNp\t8E!VcTpJ-#EE!It4F
rrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTrJ-#]Mq>UJG!VcTpJ-#EE!It4FrrIWNp\t8E!VcTp
J-#EE!It4FrrIWNp\t8E!VcTpJ-#HF!rmcOp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4F
rrIWNp\t8E!VcTpJ-#WKqu6\I!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTp
J-#EE!.Y%Mp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#QIrVlnK
!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#EE!e:=Oq#:AF!VcTpJ-#EE
!It4FrrIWNp\t8E!VcTpJ-#EE!It4FrrIWNp\t8E!VcTpJ-#KG"98CO!W;rtr:^0l5Q(6U!C-MV!!,=^
pAb4Yr:^0l5Q(6U!C-MV!!,=^pAb4Yr:^0l5Q(9V!WYI_pAb1XJ,~>

%%EndBinary
grestore
np
f
505.1 128.5 mo
512.1 128.5 li
512.1 136.7 li
505.1 136.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 505.1 255.5 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
513.3 125.7 mo
522.2 125.7 li
522.2 136.4 li
513.3 136.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[8.9 0 0 -10.7 513.3 258.3 ]ct
<<
/T 1
/W 89 
/H 107 
/M[89 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVlrs!!iK&!.b%J!r)a#rVlkJrVlro!!iK&!.b%J!r)`trVlkJrVlrg!!E3"!.b%J!q60lrVlkJrVlrW
!!3&u!.b%J!oO%ZrVlkJrVlrW!!3&u!.b%J!l+d9rVlkJrVlr7!!)ut!.b%J!l+d9rVlkJrVltM!!%NJ
rr@TJrr[cO!.Y"J!.b%J"+U@O5Q:Z_JGoNI!!#7_rr@TJs8Duu5Q:Z_JGoKM!!E9Drr2tKrr3-#!!E9D
rr2tKrr3-#!"8iLrr2tKrr3-!!"Ju>rr3%Ms8N9&qu@3,&,uS/JH#QOqu@c<&,uS/JH#QOp])B9#QF`'
JH#QOp])B9#QF`'JH#QOp]*MY#QF`'JH#QOn,P\'"9/<#JH#QOn,P\'"9/<#JH#QOn,Rrg"9/<#JH#QO
huJ8B!WN*!JH#QOhuJ8B!WN*!JH#QPhuNem!WN6$s+(+K"Mb$;huNcV!.b(K"Mb$;huNcV!.b(K"FpOQ
huNcV!.b(K#_2sUn,Rt<s+(+K#_3$Wn,Rt<s+(+K#QOu,n,Rt<s+(+K#QOu,p]*PYs+(+K,QJ)Lp]*PY
s+(.LrW!3'p])E9s+(.LrW!3'qu@i=s+(.LrW%BXs82j=s8RWLs82j-s82j-s8RWLs82j-s8E!/s8RWL
s7cR9s8E!/s8RWLs7cR9s8E!'s8RWLs7cR9s8N'(s8RWLs6p"Qs8N'(s8RWLs6p"Qs8N'$s8RWLs6p"Q
s8RTOs8RWLs53m,s8RTOs8RWLs53m,s8RTMs8NX\s8V!WJ,fPa!WW1Ms8Tk7rr38>!WW1Ms8Tk7rr38>
!<<(Ls8Tk7rr38^!<<(Ls8RTMrr38^!<<(Ls8RTMrr38^!.Y$!s8N'"rr38n!.Y$!s8N'$rr38n!.Y$!
s8N'$rr38n!'gL6s8E!'rr3?#!'gL6s8E!'s8NE*p]*PYJH,TK#QF`/p])E9JH,NI&,uS7p])E9JH,NI
&,uS7qu@9-JH,NI&,uS7qu@9-JH,BE+9)9Gqu@9-JH,BE+9)9GrW!3'JH,BE+9)9GrW!3'JH,*=5Q:Zg
rW!3'JH,*=5Q1Te!!E7Os53lArVm!#"93oO!oO'.rVm*&"93oOhuJ9*rs+&Ts+(-b!.XtI#(QaSJH*Cb
r;QtO!WR]M^]=<4#/C6=JH(-"r;Qu:!<7TLJ-#TJ#/C6=JH(-#r;QuZ!.TP!!!3#t#2fK2JH#TOr;QuZ
!.TOu!!E0!#4MUWJGoNNr;Quj!'c#5!!iH%#4MUWJG]BPr;Qur!$?ah!"]#-#5A0?JG]BXr;Qur!"XVT
!"]#-#5eH3JG9*dr;R!!!"XVT!$D.=#5eH+JFEO\r;R!#!!e&D!'gD]#6"T-JFEP'r;R!#!!@c0!'gA\
"TSXThuJ9(rriB)JA;/7qu6g"!J%rcJ,B6KJ,t29!;c]uJ,t1N!;c]uJ,k+M!;c]u^]8n8!W)g!^]8lb
!W)fr_#=<6!W)fri;N]V"8`$!huEb-~>

%%EndBinary
grestore
np
f
468.1 128.5 mo
474.3 128.5 li
474.3 136.7 li
468.1 136.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.2 0 0 -8.2 468.1 255.5 ]ct
<<
/T 1
/W 62 
/H 82 
/M[62 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
&c_n1!!E9$r;Zf4!!",@r;Zcq!!EE(r;Z9b!!E9!s5<hU"$c_`JGfHL&,cJ*!!3E'rql`t!W;lm!!3#m
qZ$YEnG<25I..+95PtK]4Q$2As8RTL*8gf-s8VQg*5DP=s8Vio%);jms8W&u!XsSZrVls""FpOOrrW6(
J-#WK"+UN)"9&6%J,k*%rVlu8!!!-"rr^%:!!E3""2Fm:#Q=Z)^]4?>rVlu8!!!9&rrKn8qu6\I!;lcs
J,oKHrrDus!r`0&r;Qir!!N6"!:U!h"T89$^]4N9rr`6#!"Ai+"5j.Z%0$8,rr)lt*<,s<_#=<94TGH\
r;ZqIs8V$U!!<)us8;p"!W;uqr;Zp%r;Z9b!!<c0s1nR5"$c_`JGoNN!WW)tr;Zp1s8;lp!!@`Nr;?No
":+u,r:p6k!<39's8;?d!"])/"8qWg!<)p"r87PWrVluthuFktrr`2W!'gG^"8oq7J,TBKr4i=1rrW,6
!W;s!r4i@2rrW,6"8r0#r4iF6rri6"*5D[Urri6"*5D[Urri6"*5D[Urri6"*5D[Urs&5u*5DUTrrrGt
!$'ntrr3,r!$'nsrr4M<!'K0>J,fQ,!'K`N5QCc!!'K`N+92@k!.=PA"98?#!.=PA!.XJ<!;ucl!!3#s
qu?d!r;ZZp!sAK$JGfHM#Q4V;r;Zp1r;Y^R!!=>@s7lNm"$c_`rqug"s8;osJ.qt`"98<!s6p!g+929=
s8E!#s8W"I~>

%%EndBinary
grestore
np
f
458.594 128.23 mo
464.295 137.19 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lw
464.295 137.19 mo
465.925 124.972 li
@
465.925 124.972 mo
474.885 124.972 li
@
386.6 125.7 mo
395.1 125.7 li
395.1 136.4 li
386.6 136.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[8.5 0 0 -10.7 386.6 258.3 ]ct
<<
/T 1
/W 85 
/H 107 
/M[85 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
qZ-Tp!;QEk!!iN'!;QBj"+U@Nq"asm+92B9q>^U&s8Vlj!!<9%s7lBi!e:7Fq#CI\s7lBi![%I;q#CI$
s7lBi"9\]!!!E6#!;H`u!!3,p!!E3"#/C3=s7cQrrVm)k!!%ND!!E3"#5eH$J+s!Gr;Qp#!'g5Y"8r0&
^]5JO!!E0!"lK@kp](Eorrqll&,6,,r;Qrq!!i9!"8r0&qu?io!!E0!"o\K(p](Eorri<$!VcWp"8i*$
!!2ip"8i*$J,o?E"8i*$J,o?E"8i*$^]=-0"8i*$^]8TZ"8i*$huJ!%"8i*$huJ!%"8i*$n,PEJ"8i*$
n,PEJ"8i*$n,PEJ"8i*$p])-2"8r0&s7cR2!!E,u"S_s6!!E,u"S_s6!!E,u"T/6*!!E,u"T/6*!!E,u
"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u
!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u
!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u!<2rt!!E,u
"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"T/6*!!E,u"oJ?+!!E9!rri6"#QOu(rri)s(]X[8
rri)s(]X[8rri)s(]X[8rrhfk(]X[8rrhfk2uj'Xrrhfk2uj'Xrrhfk2uj'Xrrh6[GQ7jCrrh6[GQ7jC
rrg+;GQ7jCrrBh:!;HNrqu6eL!;HNrqu6eL!;HNrqu6d!!VcWsr;Qs"!!2ip"8r0&rW!&q!!E0!"oJ?&
p](Eorrr/t#P\9$r;Qri!"\i)"8r0&huF;_!!E0!"i(*[p](Eors&N(5PP3\s8NB)s82is5PP3\rVm)k
!!%ND!!E3"#/C3=s7cQrrr3/s!!!'"q"Xmk"98/l!!3E*q"Xmk&-)G#!!5Cbq"XmkJ,f<?!!<9%s7lEj
!sel+q"asl+92?@q"asmJ,fQDqZ$U$rr2unqZ-Tp!;M'~>

%%EndBinary
grestore
np
f
396.4 128.5 mo
403.7 128.5 li
403.7 136.7 li
396.4 136.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 396.4 255.5 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
403.7 126.6 mo
407.7 126.6 li
407.7 136.7 li
403.7 136.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 403.7 257.4 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
408.6 128.5 mo
415.9 128.5 li
415.9 136.7 li
408.6 136.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 408.6 255.5 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
420.8 126 mo
427.8 126 li
427.8 136.4 li
420.8 136.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -10.4 420.8 258 ]ct
<<
/T 1
/W 70 
/H 104 
/M[70 0 0 -104 0 104 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
q#CBtq#CBtq#CBtq#CBtq#CBtq#CEuJGK6H"G$=K!<drL!!*4Qq>^O!JGK6H"G$=K!<drL!!3;=!W2lt
r4i:5qu6`q^]F?4!rTh7qu6`qhuNZS!rUsVqu6crhuJ9)rr`2g!.XqH"8qWg5Q(N`r:g7Vr;Qlsp])E6
rr`2s!"]#-"8r&s#Q4T(r;HZur;Qlsrr<)trrW,u!!!#srri9"J,hh4rri9"^]5JTrri9"huF#\rri9"
n,NRhrri9"p](<mrrr?#qu?^]rr30"s8Duu+9)9Dr;Zcs!!iN'"oSE#J,fWLs!7OBs53kWJ,fQHs8VQg
!$D7@r;Zfp!!!9(s8;osrVup!s8W#rrrmoQ!<<)srr3/;!!#7`r;Q^"n,NG!s8;lr"oJ?##QO`#rr`<%
!WW)rrrdiP!<;uqrrh6[!.XqFrri)s!'gD[rri<$!"]#*rr[cO#Q4N""2Fm=r;?Qsn,NRgr;Qls!!3#q
rr`6#!;ufq"TSK%!.=\D!e:8uqu6`5!'L/Y!oO%uqu6`e!$(n9!r)a8qu6`q!"Ac)!rN$,qu6`s!!N3!
!r`0&qYpQr"T&-#!!L(<r;Qj!!5JX5rr[cO^]FH7"onUQ!5JU4rr[cOhuN]T"+UC0!;uj!J,nL-r;QkL
!8mkTrr[cOhuN]T"FpL1!.XtI"FpL1!.XtI"98Gk!.XtI"98So!.XtI"98So!'gJ_"o\K)n,P]PrrrB%
"S_s=rr30"!"AW&+9)9Dqu@0#!"])/"o&'+qu@!$rrqll*;fd=rr3/[!$(t<!WN*&^]6Lr!!*#u*rl:'
rr<$`s8DuuI/e]s&-)D)!;ukI!!*%L!!3#t_#+07!W;uUqu?g$r;Z9a!!<K(s7lKl"!@I@r;6Ns5Q(Q]
qu?kLr;ZeIrW!*&s8;osi;N][#QO`%s8;ir![%I?rr3.P!!*'!r;Q^"qu@9-s87B~>

%%EndBinary
grestore
np
f
429 126 mo
435.9 126 li
435.9 136.7 li
429 136.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.9 0 0 -10.7 429 258 ]ct
<<
/T 1
/W 69 
/H 107 
/M[69 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!.Y%Kq#::!J,fiSs7lWor;H["s8Vlos7$!f"[E%^s8V$V!!OJEq#CAErW!'+s7lWor;Zs&s7lWn
r;Zs$s7lWlqu?j!q#C-e!!@`Gs7#pd*C'?!huElY!!",9s1eUFs1eUFq#A,05QC3Q&,?/EJ,k*!p](Qo
s*t.Ms8E!'q#:<ps8W&u"8Mlr"9/<(!!E#q!!iN'"b6XKrW!K.rrp1=q"t+&rr3/;!;QHl+9)9DhuNQI
!$D4?"lKB*p]*PXrrqllGk_8'rr3/k!-mu55Q:Zdn,PH;!.Y"J"o&'Wn,Rt;rri)s3:HnJJ,]HNp]*;3
!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@SL!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>
!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$%rVuqK"98?"!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L
!rr=O"8r0&!!%NOs8W)u!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!'e8rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rr30%rW!5>!WE$$
rW!5>!WE$$rW!5>!<)p#rW!5^!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p$qu@Sl!.Y"J"o&'7n,Rt;
rrr/t3:Hotrr3/s!''HJ5Q:Zdn,PHC!'gJ_"n2M:p]*PXrrqllGk_7\rr3/[!-nDA+9)9DhuNQM!"])/
"i(-5qu@9,rrp1<q#16urr3.P!VlWo"9/<]!!2lp!!3-"rW!&qrr<*"s8E!#q#>jEJ,f9D#Pe=L!'gMQ
!!i<!^]4oF^]4o?s53kXrVup?q#Bj]!!>I\s7#pd"$cS\q"t*oJ,''Aqu?j!q#CBm!!NK)q#CAErW!*,
s7lWo_#=<;&-)G)s7$!f"[E%^s8W#r!!<3#q#:9sJ,fiSs7lTn"o&(Is8VkE~>

%%EndBinary
grestore
np
f
437.9 126 mo
441.6 126 li
441.6 136.4 li
437.9 136.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.7 0 0 -10.4 437.9 258 ]ct
<<
/T 1
/W 37 
/H 104 
/M[37 0 0 -104 0 104 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L
#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3(N#QOf*
s*t@RrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFS
rrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrr@QL
#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(
J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrIWTrr3"L#QF`(J-Z)R!ItFSrrR]U_#=<7#Jg<=!=-F>
!!*>?rVus(_#=<7#Jg<=!=-F>!!*>?rVus(_#=<7#N5R],7"7a!!!9(qu?^%s8RTL#QOh^!!iQ(p](R!
s82j%s8W&u#QF`(!!iN'!<<B(rrIWTrr3"L#QF`(^^'l=!Pes>rrM$_rr3#W#QF`(i!98]!Up?nrrMTo
rr3#g#QF`(p]l<~>

%%EndBinary
grestore
np
f
445.3 126 mo
452.2 126 li
452.2 136.7 li
445.3 136.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.9 0 0 -10.7 445.3 258 ]ct
<<
/T 1
/W 69 
/H 107 
/M[69 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!.Y%Kq#::!J,fiSs7lWor;H["s8Vlos7$!f"[E%^s8V$V!!OJEq#CAErW!'+s7lWor;Zs&s7lWn
r;Zs$s7lWlqu?j!q#C-e!!@`Gs7#pd*C'?!huElY!!",9s1eUFs1eUFq#A,05QC3Q&,?/EJ,k*!p](Qo
s*t.Ms8E!'q#:<ps8W&u"8Mlr"9/<(!!E#q!!iN'"b6XKrW!K.rrp1=q"t+&rr3/;!;QHl+9)9DhuNQI
!$D4?"lKB*p]*PXrrqllGk_8'rr3/k!-mu55Q:Zdn,PH;!.Y"J"o&'Wn,Rt;rri)s3:HnJJ,]HNp]*;3
!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@SL!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>
!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$$rW!5>!WE$%rVuqK"98?"!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L
!rr=O"8r0&!!%NOs8W)u!rr=O"8r0$!!%NOr;Qj!!.Y1LrrW6$J-5`L!rr=O"8r0$!!%NOr;Qj!!.Y1L
rrW6$J-5`L!rr=O"8r0$!!'e8rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rVm$"!!p@@rr30%rW!5>!WE$$
rW!5>!WE$$rW!5>!<)p#rW!5^!<)p#qu@Sl!<)p#qu@Sl!<)p#qu@Sl!<)p$qu@Sl!.Y"J"o&'7n,Rt;
rrr/t3:Hotrr3/s!''HJ5Q:Zdn,PHC!'gJ_"n2M:p]*PXrrqllGk_7\rr3/[!-nDA+9)9DhuNQM!"])/
"i(-5qu@9,rrp1<q#16urr3.P!VlWo"9/<]!!2lp!!3-"rW!&qrr<*"s8E!#q#>jEJ,f9D#Pe=L!'gMQ
!!i<!^]4oF^]4o?s53kXrVup?q#Bj]!!>I\s7#pd"$cS\q"t*oJ,''Aqu?j!q#CBm!!NK)q#CAErW!*,
s7lWo_#=<;&-)G)s7$!f"[E%^s8W#r!!<3#q#:9sJ,fiSs7lTn"o&(Is8VkE~>

%%EndBinary
grestore
np
f
454.2 134.9 mo
455.7 134.9 li
455.7 138.6 li
454.2 138.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.5 0 0 -3.7 454.2 249.1 ]ct
<<
/T 1
/W 15 
/H 37 
/M[15 0 0 -37 0 37 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
8Ith%rr@NK56)c*&)[un#Q+i+"9/K'"9/K'!WN3#!WN3#JcC<$JcC<$JH,]N!<<-#!<<-#!<<-#!<<-#
!<<-#!<<-#!<<.N~>

%%EndBinary
grestore
np
f
1.5 lw
361.417 132.173 mo
381.26 132.173 li
1 /0 /CSD get_res sepcs
1 sep
@
371.339 139.478 mo
371.339 124.868 li
@
.75 lw
368.039 132.173 mo
368.039 127.773 374.639 127.773 374.639 132.173 cv
374.639 136.573 368.039 136.573 368.039 132.173 cv
cp
@
386.6 150.9 mo
388.2 150.9 li
388.2 161.6 li
386.6 161.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.6 0 0 -10.7 386.6 233.1 ]ct
<<
/T 1
/W 16 
/H 107 
/M[16 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
I_Ys!!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM
!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM!5JTM
<WKo8^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M^];.M
^];.M^];.M^];.M^];.M^];.M^];.MJ,~>

%%EndBinary
grestore
np
f
389.9 153.7 mo
396.5 153.7 li
396.5 161.6 li
389.9 161.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.6 0 0 -7.9 389.9 230.3 ]ct
<<
/T 1
/W 66 
/H 79 
/M[66 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!r)bFrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#
p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HMqu?`l
!<@WKrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr3-!!!)co
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)co
J,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p]*PX
rrr<#!;HOYrr30"!!)co5Q:Zdqu?`l!'gJ_"oJ?#p])E8rrr<#!;HO9rr30"!!)co+9)9Equ?`l!"])7
s8Vus!;HO)rr3/s!!)co#QF`,p](<h!!E6#"o&&tp](Eqrrqll!;HNprr3/k!!)co!<3!RhuEcP!!%NK
s1eV"p](:9s8RTL5kk>0&-)Y0!'p;Z^]XW7!!'h0!5JSahuEbmp]07N!!E><p]0g^!!WJ>p]1'h!!WE'
"2O[3r;?Tu#Jg*7rqug"&&@r?s8;p$+2IXOs1nU6"[Bft!<;!V!"/bAp]1?h!!!-$_#F?>rVup/s1nC0
J,]HLqu?_I~>

%%EndBinary
grestore
np
f
398 157 mo
401.7 157 li
401.7 158.1 li
398 158.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[3.7 0 0 -1.1 398 227 ]ct
<<
/T 1
/W 37 
/H 11 
/M[37 0 0 -11 0 11 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~^]4?7#J^<>!!g:>!!!8>!!!!(^]4?7#J^<>!!g:>!!!8>!!!!(^]4?7#J^<>!!g:>!!!6~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
402.9 153.7 mo
409.1 153.7 li
409.1 161.9 li
402.9 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.2 0 0 -8.2 402.9 230.3 ]ct
<<
/T 1
/W 62 
/H 82 
/M[62 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
&c_n1!!E9$r;Zf4!!",@r;Zcq!!EE(r;Z9b!!E9!s5<hU"$c_`JGfHL&,cJ*!!3E'rql`t!W;lm!!3#m
qZ$YEnG<25I..+95PtK]4Q$2As8RTL*8gf-s8VQg*5DP=s8Vio%);jms8W&u!XsSZrVls""FpOOrrW6(
J-#WK"+UN)"9&6%J,k*%rVlu8!!!-"rr^%:!!E3""2Fm:#Q=Z)^]4?>rVlu8!!!9&rrKn8qu6\I!;lcs
J,oKHrrDus!r`0&r;Qir!!N6"!:U!h"T89$^]4N9rr`6#!"Ai+"5j.Z%0$8,rr)lt*<,s<_#=<94TGH\
r;ZqIs8V$U!!<)us8;p"!W;uqr;Zp%r;Z9b!!<c0s1nR5"$c_`JGoNN!WW)tr;Zp1s8;lp!!@`Nr;?No
":+u,r:p6k!<39's8;?d!"])/"8qWg!<)p"r87PWrVluthuFktrr`2W!'gG^"8oq7J,TBKr4i=1rrW,6
!W;s!r4i@2rrW,6"8r0#r4iF6rri6"*5D[Urri6"*5D[Urri6"*5D[Urri6"*5D[Urs&5u*5DUTrrrGt
!$'ntrr3,r!$'nsrr4M<!'K0>J,fQ,!'K`N5QCc!!'K`N+92@k!.=PA"98?#!.=PA!.XJ<!;ucl!!3#s
qu?d!r;ZZp!sAK$JGfHM#Q4V;r;Zp1r;Y^R!!=>@s7lNm"$c_`rqug"s8;osJ.qt`"98<!s6p!g+929=
s8E!#s8W"I~>

%%EndBinary
grestore
np
f
410.2 150.9 mo
411.9 150.9 li
411.9 161.6 li
410.2 161.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.7 0 0 -10.7 410.2 233.1 ]ct
<<
/T 1
/W 17 
/H 107 
/M[17 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnmp],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
B)mGV!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ*R(%s"F-IJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.TM~>

%%EndBinary
grestore
np
f
412.7 151.8 mo
416.7 151.8 li
416.7 161.9 li
412.7 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 412.7 232.2 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
417.6 153.9 mo
424.2 153.9 li
424.2 161.9 li
417.6 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.6 0 0 -8 417.6 230.1 ]ct
<<
/T 1
/W 66 
/H 80 
/M[66 0 0 -80 0 80 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
"TSN$!"])/"i10<huEcVrsQXBs*t(L5QCc!s8Mut"V:S4!<;in!!NK(!!*&grW!*&rVurui;EWYIK0BJ
_#4694obT_JGfHM*WQ3?qu?g/!!*&s!#c%A!<)ru&,ZD3!!)uu!.Y$!!WW5u!!3-"i;N]Vqud!%s8VTf
!!W9##QOi%rW!,s!"],0rr)m!p])E8s8E!"p])E8rrmoQ!;HOYrr3.P!!)co5Q:Zd^]4B0!'gJ_"lK@\
p],gCrrq<\!;HPDrr3/k!!)coJ,]HOn,NI`!.Y"J"n2Klp],gCrrr/t!;HPDrr3,r!!)co!.Y"J"o&&t
p],gCrrr/t!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l
!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)co
J,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HPqu?`l!.Y"Rs8Vus!;HPD
rr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gC
rrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr36$!!)coJ,fNQs82isp],gC
rrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J"oJ?#p],gCrrr<#!;HPDrr30"!!)coJ,]HOqu?`l!.Y"J
"oJ?#p],gCrrW)u!.Y~>

%%EndBinary
grestore
np
f
429.8 153.7 mo
436.3 153.7 li
436.3 161.9 li
429.8 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[6.5 0 0 -8.2 429.8 230.3 ]ct
<<
/T 1
/W 65 
/H 82 
/M[65 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3#g!<3!5JH,ZK!!!9(s+(.Lp](9ps8RWLs1nU6"[E$;s8RWK!!FDDJH,WI!!EQ,JH,QG!!EE(JH,-;
!!E?&JH+R*!!E7Os1nO4"+Pk$JG]Bf5Cica!!iE%!$?ak!!#7`^]4mqrVurus6p"!JGpMg"98Dr!!e&P
!!iQ(qu?tPp](j)s8E!#JG9*drr3-%"+]k@5Q:ZdJ,t2i!.Y"J"b6W(huJ9+rrg+<JD^G+rrg+;JD^G+
rrh6[JA;3arrh6[JA;3arrh6[JA;9crrhfkJA;9crrhfk!.Y1Mrrhfk!.Y=Qrrhfk!.Y=OrrR_$#Q+N&
J:In%rrR]N#Q+N&J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,WrrR]N&,ZA.J,g,W
rr[cO&-)S-!e:7]qu6_J!"\u,!e:7]qu6_J!"\u,!e:7]qu6_JJ-YuO!e>e+qu6_JJ-YuO!e>e+qu6_J
J-YuO!e>e'qu6_J^]XQ8"RlDA^]XQ8#2fK3^]XW:#64_]!._icrVm#Y!.`u.rVm#Y!.`u-rVm#9!J').
rVm&:!J'Y>J,]HO^]AuT!.Y"J"b6W(p]*PXrriB)JG9*drr4eT"+^:L&-)\/!!@cL!!iQ(qu?tPrW!'#
s7cR!JH#TLs8V!W%tOZ[!'gL6!"XV[J,fiP"TSNEJH*F_!!=<ns5<eT"$_>9nGE7gIt7Roqu?j!JH,QG
!!EE(JH,ZJ!!NW-JH,Y"rW!*4s+(.Li;N]a5Q?96s7cQo!WW1Mrr3-%!!iQ(JH#QLn,WIf!.]S~>

%%EndBinary
grestore
np
f
437.1 153.7 mo
444.4 153.7 li
444.4 161.9 li
437.1 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 437.1 230.3 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
445.3 150.9 mo
447 150.9 li
447 161.6 li
445.3 161.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.7 0 0 -10.7 445.3 233.1 ]ct
<<
/T 1
/W 17 
/H 107 
/M[17 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnmp],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
IK4lm!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbD
6@\b1J+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbD
J+s"nJ,~>

%%EndBinary
grestore
np
f
448.5 150.9 mo
450.2 150.9 li
450.2 161.6 li
448.5 161.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[1.7 0 0 -10.7 448.5 233.1 ]ct
<<
/T 1
/W 17 
/H 107 
/M[17 0 0 -107 0 107 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnmp],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
B)mGV!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=
!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.XbDJ*R(%s"F-IJ+s"np],g=!.XbDJ+s"n
p],g=!.XbDJ+s"np],g=!.XbDJ+s"np],g=!.TM~>

%%EndBinary
grestore
np
f
451.8 150.9 mo
458.9 150.9 li
458.9 161.9 li
451.8 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.1 0 0 -11 451.8 233.1 ]ct
<<
/T 1
/W 71 
/H 110 
/M[71 0 0 -110 0 110 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVm!#&-)\/rr3/k!!*'!rr2p'J,fQks8LpYrr)m$#QOe]"8r,u"U"f(huicQ!!N?$huhp9!!IfNhugdn
!!GOchueN.!!=>BhuilW!tYCh"8i->#QEW_!!*%L!!E5Y!!!9(n,NLghuEa!s82itrnn+`!.Y%K!!*#V
!!*#u"b6T%huEfWrrp1<Ic(2.rr3/[!']<@#QF`,n,PZ1!!iN'"o&'=huF;errr<#*oI#?rr30"!"Roe
+9)9DrW!Gd!'gJ_"o\K3huH"?rr`<+huH"?rr`<+huJ9*rrdiVhuJ9*rr[cUhuEb,rVltM!oO(Vrr^%<
huN]T"2Fur!;uj!^]NEor;Ql7!oO(Vrr^%<huWcU"5j1;!W;s"huM[9r;QlW!8mnUrr_0ZhuWcU"5j1;
!W;s"huM[9r;QlW!8mnUrrh6[huWlVrr_0ZhuWcU"5j1;!W;s"huM[9r;QlW!8mnUrr_0ZhuWcU"5j1;
!;uj!^]<9mr;Ql7!8mkTrr^%<huN]T"2Fur!;uj"^]NEoJ,TBMJ-+X/J,TBMJ-+X/J,TBNJ-+X/5QC`_
"98Ya!'gG^"98Ya!'gJ_"o\K+huFkurrrB%%c@=/rr30"!"Roe&,uS4qu@5b!!iN'"o&'=huF#]rrqll
*oI##rr3/[!']<@!WN*&^]6RV!!*#u,(KZBhuEb,s8N'!Ic(2++926=!<1mV!!iPn!!*#V!<<-""b6RR
rnmhT!!EE'huSB,!!EQ+huUXl!!Ei3huVd7!!FDChuW?G!!GOchuWWO!!IfNhuWiV!!NE'rnmhWrW"#F
s8LpWs1eU7+92>u!WVop!.Y%JhuWlX!!iQ(rnmhSrrW2X!W2lurnmhUrriB%rnmhSrrW2X!W2lurnmhS
rrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X!W2lurnmhSrrW2X
!W;s"s8LpWqu6`shuW`T!rh*Yqu6`shuW`T!rh*Yqu6`shuW`T!rh*Yqu6`shuW`T!rh*Yqu6`shuW`T
!rh*Yqu6ZqJ,~>

%%EndBinary
grestore
np
f
459.9 153.7 mo
464.1 153.7 li
464.1 161.6 li
459.9 161.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4.2 0 0 -7.9 459.9 230.3 ]ct
<<
/T 1
/W 42 
/H 79 
/M[42 0 0 -79 0 79 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
IeWnms8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZ
s8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[nZs8Tn0
IK4lts1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gD
s1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0J,fPap],gDs1nC0
IXhCt_"[nZs8Tn0!.Y%K_"[nZs8Tn0!.Y%K_"[mos8Tn0!'gM`_"[mos8Tn0!'gM`_"[mos8Tn0!$D7@
_"[mOs8Tn0!"],0_"[m?s8Tn0!!iQ(_"[m7s8Tn0!!E9$_"[m1s8Tn0!!*'!_"[m0J,d=Z!!#7`_"[m0
&J+oWp],gHs1nC0^]6U7p]/,/!!;oqi;N]Xp]0g_!!;oqq#16pp]1*g!!;oqr;HZtp]1<m!!;oqs8E!1
p]1>E!!)cos53kWp]1?`!!*#u!rN#urVlnK!.Y~>

%%EndBinary
grestore
np
f
464.8 153.7 mo
472.1 153.7 li
472.1 161.9 li
464.8 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 464.8 230.3 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
472.2 151.8 mo
476.2 151.8 li
476.2 161.9 li
472.2 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 472.2 232.2 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
477 153.7 mo
484 153.7 li
484 161.9 li
477 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7 0 0 -8.2 477 230.3 ]ct
<<
/T 1
/W 70 
/H 82 
/M[70 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr3/s!'gM`r;Q^%J,fWMs8;osr;H["5QCZ]s7$!f"V:Y2s8Tn6!!EE(r;Zfp!!E9!s8Mor"+U7Kr;6Ns
5Q(QVqu?g@r;Z9a!!<c0s5<eT*=)NB^]4E8J,f]Ls*t(ks6p!hr;Q`sJ,fEH!;uit!!3*!"TSQ#rW!'"
rrmoQI/EsLrr3/;!.=\E&,uS4huGn7!$D4?"n2LSp]*PXrrr/t*;BM`rr3/s!$(J.J,]HNqu@`+!<)p#
rW!Ab!<)p#rW!Ab!WE$$rW!Ab!W;s"!"@cfqu6`q^]XK6!rTh9qu6`q^]XK6!rTh=qu6`q^^'c:!rRQR
qu6`qJ-YuO!rRQRqu6`qJ-YuO!rRQRqu6]pJGB0FJGB0FJGB0FJGB0FJGB0HJ,fTH!!%QF!!%QF!!%QF
!!%QF!!.TPr;QkL!.Y1Lrr[cO^]XN7"+UBe"8r0$J,m@er;QkL!5JX5rr[cS^]FB5"+UO4!W;s"!!M3[
r;Qp#"Q0:[s8N$#!!M3[rVm'#!"A>sJ,]HOrW!Ar!.Y"J"oJ?/p]*PXrrr<#%/9ferr3/s!$(b6+9)9D
p])<3!"])/"n2LSqu@!$rrq<\4T5<_rr3/;!.=eH!WN*CJ,jus!!*'!rVurrs*t)6s82itr;XP4&-),!
!W;u5!!3*'!!!-!s5<eT!sec(nGE7g&,cJ&qu?g@r;Z]m!!>I`s8Vus"Fp@Ls+((K"TeZ$s8V$V!!NK)
r;ZfdrW!*4s8;osrr)m!5QCZ\rrp1<!WW2trr30"!'gM`r."~>

%%EndBinary
grestore
np
f
484.4 150.9 mo
491.9 150.9 li
491.9 161.9 li
484.4 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.5 0 0 -11 484.4 233.1 ]ct
<<
/T 1
/W 75 
/H 110 
/M[75 0 0 -110 0 110 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVlo6"9/<#i;W`\qu?^]s8V$Vrs%B]!"],0i;W`_J,fQOrr<'!s8Mrs"oeQ&s8W#q!!RiP!<<)gr;[!c
!!*'!i;EWZ%fcV0s1nR5"U>#-s8RWJ!!EN,!<<)s!##G7!<<'!!!iE%!<<-"rVup_s+((K#64T$!<<)W
rW!0&qu?j!s7lQn#64Gu#QOi%rW!0&n,O"!s8Mut"97ij+9)<>!!E8Z!'gJ_#(Q[Rs53m,rr3.P!!*&W
!<)p$^]4B7^]=?5"lK@\s1e[6rrq<\!<9h8rVm&j!!*%L"9&6(n,NIgJ-5iNrrqll!<7QSrVm&r!!*$!
#Q=Z+p](<o!!iK&"o&&trr<T.rrr<#!<3$0rVm'!!!*$!&,lM3qu?`s!"]&."oJ?#rW!K-rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rr`6#!<*!!+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW!K-
rrr<#!<)s/rVm'!!!*$!&,lM.qud!"rr<T.rrr<#!<3$0rVm'!!!*$!#Q=Z+p](<o!!iK&"o&&ts*t@Q
rrr/t!<7QOrVm&j!!*%L"9&6'n,NIgJ-#WK"n2Kls1e[6rrq<\!<9h7rVm&Z!!*&7!<)p%^]4B7huJ9+
rs+&S!<:sW5Q;#hs*t(Ls6p"1rr;rt#64/m&-)\/rW!0&p](R!s8;ir#64Gu"98DrrW!0&qu?`ss5<kV
#64Z&!'gL6rW!-%rr<$(r;?Wqs82j#!WW6#s+(%J"U4r,s8Tn5!!Ni4!<<)Wr;[!B!!*'!nGN=i4obT_
rrDuq!!RfO!<<)ur;Zou!!*#u#(Q[R"9&9#rr32\!!!Q/!!*#u#5eH$5Q1W_rVm&:"98?#!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]rrVuouqYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr
!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qu6curVurprrW0"!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]srVuqK~>

%%EndBinary
grestore
np
f
496.6 150.9 mo
504.1 150.9 li
504.1 161.9 li
496.6 161.9 li
cp
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.5 0 0 -11 496.6 233.1 ]ct
<<
/T 1
/W 75 
/H 110 
/M[75 0 0 -110 0 110 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rVlo6"9/<#i;W`\qu?^]s8V$Vrs%B]!"],0i;W`_J,fQOrr<'!s8Mrs"oeQ&s8W#q!!RiP!<<)gr;[!c
!!*'!i;EWZ%fcV0s1nR5"U>#-s8RWJ!!EN,!<<)s!##G7!<<'!!!iE%!<<-"rVup_s+((K#64T$!<<)W
rW!0&qu?j!s7lQn#64Gu#QOi%rW!0&n,O"!s8Mut"97ij+9)<>!!E8Z!'gJ_#(Q[Rs53m,rr3.P!!*&W
!<)p$^]4B7^]=?5"lK@\s1e[6rrq<\!<9h8rVm&j!!*%L"9&6(n,NIgJ-5iNrrqll!<7QSrVm&r!!*$!
#Q=Z+p](<o!!iK&"o&&trr<T.rrr<#!<3$0rVm'!!!*$!&,lM3qu?`s!"]&."oJ?#rW!K-rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rr`6#!<*!!+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?
rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW"&=rrrB%!<)s?rVm'#!!)uu+8u3CrVurt!$D1>"o\K%rW!K-
rrr<#!<)s/rVm'!!!*$!&,lM.qud!"rr<T.rrr<#!<3$0rVm'!!!*$!#Q=Z+p](<o!!iK&"o&&ts*t@Q
rrr/t!<7QOrVm&j!!*%L"9&6'n,NIgJ-#WK"n2Kls1e[6rrq<\!<9h7rVm&Z!!*&7!<)p%^]4B7huJ9+
rs+&S!<:sW5Q;#hs*t(Ls6p"1rr;rt#64/m&-)\/rW!0&p](R!s8;ir#64Gu"98DrrW!0&qu?`ss5<kV
#64Z&!'gL6rW!-%rr<$(r;?Wqs82j#!WW6#s+(%J"U4r,s8Tn5!!Ni4!<<)Wr;[!B!!*'!nGN=i4obT_
rrDuq!!RfO!<<)ur;Zou!!*#u#(Q[R"9&9#rr32\!!!Q/!!*#u#5eH$5Q1W_rVm&:"98?#!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]rrVuouqYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr
!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qYpWr!!)lq!r`0"qu6curVurprrW0"!;c]srVurp
rrW0"!;c]srVurprrW0"!;c]srVurprrW0"!;c]srVuqK~>

%%EndBinary
grestore
np
f
505.6 153.7 mo
512.9 153.7 li
512.9 161.9 li
505.6 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 505.6 230.3 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
512.9 151.8 mo
516.9 151.8 li
516.9 161.9 li
512.9 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[4 0 0 -10.1 512.9 232.2 ]ct
<<
/T 1
/W 40 
/H 101 
/M[40 0 0 -101 0 101 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
rr4<q#QOi%!!*'!p](<os53kWs8Tk7!<<)7!!*'!J,fTLs*t(Ls8W&us8W&us8W&u"98B$!WN*"!!iN'
!<<B(rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1
rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!
&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0
!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!rrl3q#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0mq#(0m
q#(0ps8N'0rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0
rrE*1rr3!!&,uS0!"])/!<<Z0rrE*1rr3!!&,uS0!"])/!<<Z0rrN02s*t~>

%%EndBinary
grestore
np
f
517.8 153.7 mo
525.1 153.7 li
525.1 161.9 li
517.8 161.9 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 384 ]ct
[7.3 0 0 -8.2 517.8 230.3 ]ct
<<
/T 1
/W 73 
/H 82 
/M[73 0 0 -82 0 82 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
('"=/!.Y%Kp]H'Hs*t(Ss8Tk7!<;ur!!`K'J,fTLnGWCg5Q:W^!WV*W!!*W0rW!!!JGoNL"8r,u!<;ut
!<N,t!!*#r!!%9C!!)rp!!#"X!!)rp!!!l8!!)fl!!ii1%flA)!<;!V!!kf>n,N^nqu?^@!.TOg!$D7@
J,fTLJD^Dls8V!W!<7T-!.Y%Kn,NIgJD^G,rs&B$!<7Sb!WN*'rVuruJA;3arriB&s+%lerVm%O!<7Sb
"9&6'^]=Cb^]XQ8"i(-<JA;9crrq<\s+%lerVm&Z!<7Sb"9&6)n,WK=^]XW:#QOhn!<7Sb"9&6'n,WK=
^]FE6"n2NlJD^J,rrqlls+'#-rVm&j!<7T-!<)p%n,WK=huJ9+rs%rms+'S=+9)9En,WK=n,O!urs%rm
s+'kE!WN*9n,WK=p](:Ys8VQgs+("I!!E9$n,WK=rr)m%#QO8ns+(.J!!Wu'!<7TLJGfHOn,WK=s1nR5
"V:\6JH,-9!!E7Os8;`o"93oOs8)d!s+(.Li;<QXs+(.Lrql`ss+(+K!;QKm!WR]KrrDin!!3+Mr;QoX
!!*%Lr;Qp!!!*%Lqu6\I!!3+Mqu6c6!<7THrr_0Zs+("H"7Q<jJG]?Kn,WK=qu6cf!<7THrs%rms+'kE
J,]HPn,WK=p],gCrs%rms+'kEJ,]HPn,WK=p],gCrs%rms+'kE5Q:Zen,WK=p]*PXrs8)os+'kE+92?G
s53nWJG9*drr32\!<7TI!"])/#/C6=JG]BPrr31Q!WR]J!!E6#,6.cEJGoNLs8W&u!WR]L!!%NKp](Er
JH#TL#QK;S"93oOJG]BM#QK>SJG]BM#QK>S_#+08&-%1[i;<QX+9-lknGE7h5Q?96r;6NtJ,b'!rqug$
!WW1Ms8RWK!!WQ*s+(.LnGWCl+92@ks8W)t!<2uuJH#QMn,OR0rr@S"~>

%%EndBinary
grestore
np
f
1.5 lw
361.417 156.522 mo
381.26 156.522 li
0 .990631 1 .000396735 cmyk
@
371.339 163.827 mo
371.339 149.217 li
@
368.039 156.522 mo
368.039 152.122 374.639 152.122 374.639 156.522 cv
374.639 160.922 368.039 160.922 368.039 156.522 cv
f
set_def_flat
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CCOQMX+MinionPro-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (CCOQMX+MinionPro-Bold)%%Title: (CCOQMX+MinionPro-Bold Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /CCOQMX+MinionPro-Bold def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-319 -360 1684 1024} def/FontInfo 5 dict dup begin/Notice (Copyright 1990, 1991, 1992, 1994, 1997, 1998, 2000, 2002, 2004 Adobe Systems Incorporated. All rights reserved. Minion is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/FSType 8 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 71 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-15 -0 442 458 475 488 623 636 650 665 691 703] def/OtherBlues [-244 -230] def/FamilyBlues [-15 -0 437 453 464 478 623 636 650 665 701 712] def/FamilyOtherBlues [-257 -240] def/BlueScale 0.046875 def/BlueFuzz 0 def/StdHW [41] def/StdVW [128] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 8 dict defct_GlyphDirProcs beginGlyphDirectory+60 <001C60D8A8C9B80D906E804558F54CA4921871819D27BB6722DD1E238D80B75597528666CC27BE1F183AA6C5646886CD03661D4060985F> |40 <001C60D8A8C9B60AF0C9FFEAC580ACA2CBE7B22D83B382B81158DA8AFF6BD50F17CFB17967A399E0799E4F3DB51B612C0A37237070F73FC3B7740386932461B467456714D689CE14C7DDE5FE5790A5048FA929DB1CBBAB92B1222788B270471C6F4295EB262A865F9BB36EFDCAE0B12D190D17AAD6253FD1E6303689705328C81AC0D25097E7C087B9AFF935D4351556280A> |70 <001C60D8A8C9B766CAB45806E230B95151A896C3DE55CE9E368FCDCDE807E52D8DD9EDA92AC0159F54C6467E5E1D72BC92E381289C22929422FA337E88486A787C76F380DD96D93FF26A42F9185453446FA86530210EBCF8F18CC3F2B669B65AE61FC989B6F44F1D508DF6822C81B0D051862A8D2EF6ABB14772E9B1518B6D1BC5D29C77BA9E3F28> |55 <001C60D8A8C9B63ABFB316FBA7CD493601A83EF00093AE2598F4E841E95D4ADEC317AF79BD09BAC75540FCBA66283CC461E8D38A70659E865CD95A5E2ECB969618006AA92A16F957BD9B1806FC2F53BB3B7A62093FFAD2EE3C0803A48C6C044DC9AE91FC9E2A166282B898> |14 <001C60D8A8C9B8144F93554DDB887ED81074A6FC1D4FB31F8D15DFCCEAF8D83641> |18 <001C60D8A8C9B7A73DC57EC15470A0BC9A3F0068C1DE983C4639F0DD89CAA1E95BDBDA4FABD03B28C187B731545DAE98DDB392C2DC50AAF388A70B4CE5EA0393062BB07AB1> |62 <001C60D8A8C9B80D906E804558F54CA49218564F07BB6AF5CDDBD1880A0470366220D7075D912CA4B5F143118EA69EC3E4142BAE73060E> |0 <001C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4A980A717C675DD749FCAD021C86E4A82A71450A60069401092D2766EC2A38FB4B27A723A2EF044B6549AE7BD225531C9BFBD9FDEC4C158C539EAA9E47425F43D2DE9C2FA717B7B8B00C9770334A66> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /CCOQMX+MinionPro-Bold-Identity-H /Identity-H 0 [/CCOQMX+MinionPro-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/NEJEJZ+MinionPro-Bold /CCOQMX+MinionPro-Bold-Identity-H findfont ct_VMDictPutNEJEJZ+MinionPro-Bold [0 -17 -17 0 0 0 ]msf40.8258 65.7608 mo(\000<\000\(\000F\0007)[-5.96698 -12.3591 -7.42896 0 ]yshNEJEJZ+MinionPro-Bold [0 -11.22 -11.22 0 0 0 ]msf35.5558 27.9188 mo(\000\016\000\022)[-3.83719 0 ]yshNEJEJZ+MinionPro-Bold [0 -17 -17 0 0 0 ]msf40.8258 18.4718 mo(\000>)shgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/NEJEJZ+MinionPro-Bold-Identity-H uf/NEJEJZ+MinionPro-Bold /CIDFont urAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
